
mcp2562.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007700  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007890  08007890  00017890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc4  08007cc4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007cc4  08007cc4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cc4  08007cc4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000158  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000033c  2000033c  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001188b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ac  00000000  00000000  00031a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00034150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  00034fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de61  00000000  00000000  00035d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013294  00000000  00000000  00053b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a90dd  00000000  00000000  00066e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010fefa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c50  00000000  00000000  0010ff4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007878 	.word	0x08007878

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007878 	.word	0x08007878

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bb0:	4a29      	ldr	r2, [pc, #164]	; (8000c58 <MX_CAN_Init+0xb0>)
 8000bb2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bc8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000bcc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_CAN_Init+0xac>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_CAN_Init+0xac>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000bf8:	4816      	ldr	r0, [pc, #88]	; (8000c54 <MX_CAN_Init+0xac>)
 8000bfa:	f000 fc85 	bl	8001508 <HAL_CAN_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000c04:	f000 f9c0 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
   CAN_FilterTypeDef sFilterConfig;
   sFilterConfig.FilterBank = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
   sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
   sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
//   sFilterConfig.FilterIdHigh = 0x456 << 5;
//   sFilterConfig.FilterIdLow = 0x456 << 5;
//   sFilterConfig.FilterMaskIdHigh = 0x456 << 5;
//   sFilterConfig.FilterMaskIdLow = 0x456 << 5;
  // // F303K8(2)
   sFilterConfig.FilterIdHigh = 0x123 << 5;
 8000c14:	f242 4360 	movw	r3, #9312	; 0x2460
 8000c18:	603b      	str	r3, [r7, #0]
   sFilterConfig.FilterIdLow = 0x123 << 5;
 8000c1a:	f242 4360 	movw	r3, #9312	; 0x2460
 8000c1e:	607b      	str	r3, [r7, #4]
   sFilterConfig.FilterMaskIdHigh = 0x123 << 5;
 8000c20:	f242 4360 	movw	r3, #9312	; 0x2460
 8000c24:	60bb      	str	r3, [r7, #8]
   sFilterConfig.FilterMaskIdLow = 0x123 << 5;
 8000c26:	f242 4360 	movw	r3, #9312	; 0x2460
 8000c2a:	60fb      	str	r3, [r7, #12]

   sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
   sFilterConfig.FilterActivation = ENABLE;
 8000c30:	2301      	movs	r3, #1
 8000c32:	623b      	str	r3, [r7, #32]

   sFilterConfig.SlaveStartFilterBank = 14;
 8000c34:	230e      	movs	r3, #14
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24

   if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_CAN_Init+0xac>)
 8000c3e:	f000 fd5e 	bl	80016fe <HAL_CAN_ConfigFilter>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_CAN_Init+0xa4>
   {
     Error_Handler();
 8000c48:	f000 f99e 	bl	8000f88 <Error_Handler>
   }
  /* USER CODE END CAN_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000200 	.word	0x20000200
 8000c58:	40006400 	.word	0x40006400

08000c5c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <HAL_CAN_MspInit+0xa0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d139      	bne.n	8000cf2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_CAN_MspInit+0xa4>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_CAN_MspInit+0xa4>)
 8000c84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_CAN_MspInit+0xa4>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_CAN_MspInit+0xa4>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_CAN_MspInit+0xa4>)
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_CAN_MspInit+0xa4>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000cc0:	2309      	movs	r3, #9
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cce:	f001 faad 	bl	800222c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	f001 fa71 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000cdc:	2014      	movs	r0, #20
 8000cde:	f001 fa8a 	bl	80021f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2015      	movs	r0, #21
 8000ce8:	f001 fa69 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000cec:	2015      	movs	r0, #21
 8000cee:	f001 fa82 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40006400 	.word	0x40006400
 8000d00:	40021000 	.word	0x40021000

08000d04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d24:	6153      	str	r3, [r2, #20]
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	6153      	str	r3, [r2, #20]
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d54:	6153      	str	r3, [r2, #20]
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2108      	movs	r1, #8
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <MX_GPIO_Init+0x90>)
 8000d68:	f001 fbd2 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_green_Pin;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_green_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_GPIO_Init+0x90>)
 8000d84:	f001 fa52 	bl	800222c <HAL_GPIO_Init>

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40021000 	.word	0x40021000
 8000d94:	48000400 	.word	0x48000400

08000d98 <Toggle_GPIO>:
{
  return HAL_GPIO_ReadPin(GPIO.GPIOx, GPIO.GPIO_PIN_x);
}

void Toggle_GPIO(GPIO_Value GPIO)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	463b      	mov	r3, r7
 8000da0:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_TogglePin(GPIO.GPIOx, GPIO.GPIO_PIN_x);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	88ba      	ldrh	r2, [r7, #4]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fbc8 	bl	8002540 <HAL_GPIO_TogglePin>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <Write_GPIO>:

void Write_GPIO(GPIO_Value GPIO, GPIO_PinState PinState)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO.GPIOx, GPIO.GPIO_PIN_x, PinState);
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	89b9      	ldrh	r1, [r7, #12]
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fb9d 	bl	8002510 <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

// LED for operational acceptance testing
int cnt1kHz = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) // interruption 1kHz
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d10f      	bne.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x30>
  {
	  cnt1kHz = (cnt1kHz + 1) % 1000;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000df8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dfc:	1199      	asrs	r1, r3, #6
 8000dfe:	17d3      	asrs	r3, r2, #31
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e06:	fb01 f303 	mul.w	r3, r1, r3
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e0e:	6013      	str	r3, [r2, #0]
//    else
//    {
//    	Write_GPIO(USER_LED, GPIO_PIN_RESET);
//    }
  }
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	20000254 	.word	0x20000254
 8000e20:	2000024c 	.word	0x2000024c
 8000e24:	10624dd3 	.word	0x10624dd3

08000e28 <HAL_CAN_RxFifo0MsgPendingCallback>:

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000e30:	1d38      	adds	r0, r7, #4
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000e34:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000e36:	2100      	movs	r1, #0
 8000e38:	f000 fd6f 	bl	800191a <HAL_CAN_GetRxMessage>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
   {
     Error_Handler();
 8000e42:	f000 f8a1 	bl	8000f88 <Error_Handler>
   }
//	 HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
   printf(" id=%d [0]=%d [1]=%d [2]=%d\r\n", RxHeader.StdId, RxData[0], RxData[1], RxData[2]);
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000e48:	6819      	ldr	r1, [r3, #0]
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000e52:	785b      	ldrb	r3, [r3, #1]
 8000e54:	4618      	mov	r0, r3
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000e60:	f004 fc44 	bl	80056ec <iprintf>
   Toggle_GPIO(USER_LED);
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000e66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e6a:	f7ff ff95 	bl	8000d98 <Toggle_GPIO>
 }
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000244 	.word	0x20000244
 8000e7c:	20000228 	.word	0x20000228
 8000e80:	08007890 	.word	0x08007890
 8000e84:	20000000 	.word	0x20000000

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8c:	f000 fad6 	bl	800143c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e90:	f000 f820 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e94:	f7ff ff36 	bl	8000d04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e98:	f000 fa32 	bl	8001300 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e9c:	f000 f9b6 	bl	800120c <MX_TIM1_Init>
  MX_CAN_Init();
 8000ea0:	f7ff fe82 	bl	8000ba8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <main+0x40>)
 8000ea6:	f000 fcf4 	bl	8001892 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <main+0x40>)
 8000eae:	f000 fe56 	bl	8001b5e <HAL_CAN_ActivateNotification>

  HAL_TIM_Base_Start_IT(&htim1);
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <main+0x44>)
 8000eb4:	f002 ff50 	bl	8003d58 <HAL_TIM_Base_Start_IT>
  Write_GPIO(USER_LED, GPIO_PIN_SET);
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <main+0x48>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ec0:	f7ff ff7a 	bl	8000db8 <Write_GPIO>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <main+0x3c>
 8000ec6:	bf00      	nop
 8000ec8:	20000200 	.word	0x20000200
 8000ecc:	20000254 	.word	0x20000254
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b096      	sub	sp, #88	; 0x58
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ede:	2228      	movs	r2, #40	; 0x28
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 ff90 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f10:	2310      	movs	r3, #16
 8000f12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f1c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000f20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fb24 	bl	8002574 <HAL_RCC_OscConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f32:	f000 f829 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	230f      	movs	r3, #15
 8000f38:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2101      	movs	r1, #1
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fb4b 	bl	80035f0 <HAL_RCC_ClockConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f60:	f000 f812 	bl	8000f88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fd73 	bl	8003a5c <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f7c:	f000 f804 	bl	8000f88 <Error_Handler>
  }
}
 8000f80:	bf00      	nop
 8000f82:	3758      	adds	r7, #88	; 0x58
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_MspInit+0x44>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 fa4e 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <CAN_RX0_IRQHandler+0x10>)
 8001036:	f000 fdb8 	bl	8001baa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000200 	.word	0x20000200

08001044 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <CAN_RX1_IRQHandler+0x10>)
 800104a:	f000 fdae 	bl	8001baa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000200 	.word	0x20000200

08001058 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800105e:	f002 fed7 	bl	8003e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000254 	.word	0x20000254

0800106c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return 1;
 8001070:	2301      	movs	r3, #1
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_kill>:

int _kill(int pid, int sig)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001086:	f003 fe95 	bl	8004db4 <__errno>
 800108a:	4603      	mov	r3, r0
 800108c:	2216      	movs	r2, #22
 800108e:	601a      	str	r2, [r3, #0]
  return -1;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <_exit>:

void _exit (int status)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffe7 	bl	800107c <_kill>
  while (1) {}    /* Make sure we hang here */
 80010ae:	e7fe      	b.n	80010ae <_exit+0x12>

080010b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e00a      	b.n	80010d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010c2:	f3af 8000 	nop.w
 80010c6:	4601      	mov	r1, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	60ba      	str	r2, [r7, #8]
 80010ce:	b2ca      	uxtb	r2, r1
 80010d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbf0      	blt.n	80010c2 <_read+0x12>
  }

  return len;
 80010e0:	687b      	ldr	r3, [r7, #4]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <_write>:
//    __io_putchar(*ptr++);
//  }
//  return len;
//}

int _write(int file, char *ptr, int len) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	230a      	movs	r3, #10
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <_write+0x24>)
 8001102:	f003 fa81 	bl	8004608 <HAL_UART_Transmit>
	return len;
 8001106:	687b      	ldr	r3, [r7, #4]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200002a0 	.word	0x200002a0

08001114 <_close>:

int _close(int file)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113c:	605a      	str	r2, [r3, #4]
  return 0;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_isatty>:

int _isatty(int file)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f003 fe02 	bl	8004db4 <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20003000 	.word	0x20003000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	20000250 	.word	0x20000250
 80011e4:	20000340 	.word	0x20000340

080011e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_TIM1_Init+0xa0>)
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <MX_TIM1_Init+0xa4>)
 800122e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_TIM1_Init+0xa0>)
 8001232:	222f      	movs	r2, #47	; 0x2f
 8001234:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_TIM1_Init+0xa0>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_TIM1_Init+0xa0>)
 800123e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001242:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_TIM1_Init+0xa0>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_TIM1_Init+0xa0>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_TIM1_Init+0xa0>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001256:	4815      	ldr	r0, [pc, #84]	; (80012ac <MX_TIM1_Init+0xa0>)
 8001258:	f002 fd26 	bl	8003ca8 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001262:	f7ff fe91 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <MX_TIM1_Init+0xa0>)
 8001274:	f002 feeb 	bl	800404e <HAL_TIM_ConfigClockSource>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800127e:	f7ff fe83 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_TIM1_Init+0xa0>)
 8001294:	f003 f8de 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800129e:	f7ff fe73 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000254 	.word	0x20000254
 80012b0:	40012c00 	.word	0x40012c00

080012b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_TIM_Base_MspInit+0x44>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d113      	bne.n	80012ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d0:	6193      	str	r3, [r2, #24]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2019      	movs	r0, #25
 80012e4:	f000 ff6b 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012e8:	2019      	movs	r0, #25
 80012ea:	f000 ff84 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40012c00 	.word	0x40012c00
 80012fc:	40021000 	.word	0x40021000

08001300 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <MX_USART2_UART_Init+0x5c>)
 8001308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_USART2_UART_Init+0x58>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_USART2_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART2_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART2_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001344:	f003 f912 	bl	800456c <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800134e:	f7ff fe1b 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002a0 	.word	0x200002a0
 800135c:	40004400 	.word	0x40004400

08001360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <HAL_UART_MspInit+0x80>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d129      	bne.n	80013d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_UART_MspInit+0x84>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <HAL_UART_MspInit+0x84>)
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	61d3      	str	r3, [r2, #28]
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_UART_MspInit+0x84>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_UART_MspInit+0x84>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_UART_MspInit+0x84>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6153      	str	r3, [r2, #20]
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_UART_MspInit+0x84>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80013b2:	f248 0304 	movw	r3, #32772	; 0x8004
 80013b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c4:	2307      	movs	r3, #7
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f000 ff2b 	bl	800222c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40004400 	.word	0x40004400
 80013e4:	40021000 	.word	0x40021000

080013e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001420 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ec:	f7ff fefc 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <LoopForever+0x6>)
  ldr r1, =_edata
 80013f2:	490d      	ldr	r1, [pc, #52]	; (8001428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <LoopForever+0xe>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001408:	4c0a      	ldr	r4, [pc, #40]	; (8001434 <LoopForever+0x16>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001416:	f003 fcd3 	bl	8004dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141a:	f7ff fd35 	bl	8000e88 <main>

0800141e <LoopForever>:

LoopForever:
    b LoopForever
 800141e:	e7fe      	b.n	800141e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001420:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800142c:	08007ccc 	.word	0x08007ccc
  ldr r2, =_sbss
 8001430:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001434:	2000033c 	.word	0x2000033c

08001438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC1_2_IRQHandler>
	...

0800143c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_Init+0x28>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_Init+0x28>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 feab 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fd9c 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fec3 	bl	8002212 <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 fe8b 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000010 	.word	0x20000010
 80014c4:	2000000c 	.word	0x2000000c

080014c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000010 	.word	0x20000010
 80014ec:	20000328 	.word	0x20000328

080014f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000328 	.word	0x20000328

08001508 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0ed      	b.n	80016f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fb98 	bl	8000c5c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800153c:	f7ff ffd8 	bl	80014f0 <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001542:	e012      	b.n	800156a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001544:	f7ff ffd4 	bl	80014f0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b0a      	cmp	r3, #10
 8001550:	d90b      	bls.n	800156a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2205      	movs	r2, #5
 8001562:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0c5      	b.n	80016f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0e5      	beq.n	8001544 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0202 	bic.w	r2, r2, #2
 8001586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001588:	f7ff ffb2 	bl	80014f0 <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800158e:	e012      	b.n	80015b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001590:	f7ff ffae 	bl	80014f0 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b0a      	cmp	r3, #10
 800159c:	d90b      	bls.n	80015b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2205      	movs	r2, #5
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e09f      	b.n	80016f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1e5      	bne.n	8001590 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7e1b      	ldrb	r3, [r3, #24]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d108      	bne.n	80015de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	e007      	b.n	80015ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7e5b      	ldrb	r3, [r3, #25]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d108      	bne.n	8001608 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e007      	b.n	8001618 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001616:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7e9b      	ldrb	r3, [r3, #26]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d108      	bne.n	8001632 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0220 	orr.w	r2, r2, #32
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e007      	b.n	8001642 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0220 	bic.w	r2, r2, #32
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7edb      	ldrb	r3, [r3, #27]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0210 	bic.w	r2, r2, #16
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e007      	b.n	800166c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0210 	orr.w	r2, r2, #16
 800166a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7f1b      	ldrb	r3, [r3, #28]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d108      	bne.n	8001686 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0208 	orr.w	r2, r2, #8
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e007      	b.n	8001696 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0208 	bic.w	r2, r2, #8
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7f5b      	ldrb	r3, [r3, #29]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d108      	bne.n	80016b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 0204 	orr.w	r2, r2, #4
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e007      	b.n	80016c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0204 	bic.w	r2, r2, #4
 80016be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	ea42 0103 	orr.w	r1, r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	1e5a      	subs	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016fe:	b480      	push	{r7}
 8001700:	b087      	sub	sp, #28
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001714:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001716:	7cfb      	ldrb	r3, [r7, #19]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d003      	beq.n	8001724 <HAL_CAN_ConfigFilter+0x26>
 800171c:	7cfb      	ldrb	r3, [r7, #19]
 800171e:	2b02      	cmp	r3, #2
 8001720:	f040 80aa 	bne.w	8001878 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	2201      	movs	r2, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d123      	bne.n	80017a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	401a      	ands	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001780:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3248      	adds	r2, #72	; 0x48
 8001786:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800179a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800179c:	6979      	ldr	r1, [r7, #20]
 800179e:	3348      	adds	r3, #72	; 0x48
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d122      	bne.n	80017f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3248      	adds	r2, #72	; 0x48
 80017d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ea:	6979      	ldr	r1, [r7, #20]
 80017ec:	3348      	adds	r3, #72	; 0x48
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800180e:	e007      	b.n	8001820 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	431a      	orrs	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43db      	mvns	r3, r3
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800183a:	e007      	b.n	800184c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	431a      	orrs	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d107      	bne.n	8001864 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	431a      	orrs	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800186a:	f023 0201 	bic.w	r2, r3, #1
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e006      	b.n	8001886 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
  }
}
 8001886:	4618      	mov	r0, r3
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d12e      	bne.n	8001904 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2202      	movs	r2, #2
 80018aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0201 	bic.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018be:	f7ff fe17 	bl	80014f0 <HAL_GetTick>
 80018c2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018c4:	e012      	b.n	80018ec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018c6:	f7ff fe13 	bl	80014f0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b0a      	cmp	r3, #10
 80018d2:	d90b      	bls.n	80018ec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2205      	movs	r2, #5
 80018e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e012      	b.n	8001912 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1e5      	bne.n	80018c6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e006      	b.n	8001912 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
  }
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800191a:	b480      	push	{r7}
 800191c:	b087      	sub	sp, #28
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d003      	beq.n	800193e <HAL_CAN_GetRxMessage+0x24>
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	2b02      	cmp	r3, #2
 800193a:	f040 8103 	bne.w	8001b44 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10e      	bne.n	8001962 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0f7      	b.n	8001b52 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d107      	bne.n	8001980 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0e8      	b.n	8001b52 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	331b      	adds	r3, #27
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0204 	and.w	r2, r3, #4
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	331b      	adds	r3, #27
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0d5b      	lsrs	r3, r3, #21
 80019ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	331b      	adds	r3, #27
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	4413      	add	r3, r2
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	331b      	adds	r3, #27
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4413      	add	r3, r2
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0202 	and.w	r2, r3, #2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	331b      	adds	r3, #27
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	3304      	adds	r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2208      	movs	r2, #8
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	e00b      	b.n	8001a1e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	331b      	adds	r3, #27
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	4413      	add	r3, r2
 8001a12:	3304      	adds	r3, #4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 020f 	and.w	r2, r3, #15
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	331b      	adds	r3, #27
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	331b      	adds	r3, #27
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4413      	add	r3, r2
 8001a42:	3304      	adds	r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0a1a      	lsrs	r2, r3, #8
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0c1a      	lsrs	r2, r3, #16
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3302      	adds	r3, #2
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0e1a      	lsrs	r2, r3, #24
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3303      	adds	r3, #3
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0a1a      	lsrs	r2, r3, #8
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0c1a      	lsrs	r2, r3, #16
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3306      	adds	r3, #6
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0e1a      	lsrs	r2, r3, #24
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	3307      	adds	r3, #7
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0220 	orr.w	r2, r2, #32
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	e007      	b.n	8001b40 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0220 	orr.w	r2, r2, #32
 8001b3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e006      	b.n	8001b52 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
  }
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d002      	beq.n	8001b7c <HAL_CAN_ActivateNotification+0x1e>
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d109      	bne.n	8001b90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6959      	ldr	r1, [r3, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e006      	b.n	8001b9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b08a      	sub	sp, #40	; 0x28
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d07c      	beq.n	8001cea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d023      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f983 	bl	8001f18 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c12:	e016      	b.n	8001c42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e00c      	b.n	8001c42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	e002      	b.n	8001c42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f989 	bl	8001f54 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d024      	beq.n	8001c96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f963 	bl	8001f2c <HAL_CAN_TxMailbox1CompleteCallback>
 8001c66:	e016      	b.n	8001c96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7a:	e00c      	b.n	8001c96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	e002      	b.n	8001c96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f969 	bl	8001f68 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d024      	beq.n	8001cea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ca8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f943 	bl	8001f40 <HAL_CAN_TxMailbox2CompleteCallback>
 8001cba:	e016      	b.n	8001cea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cce:	e00c      	b.n	8001cea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	e002      	b.n	8001cea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f949 	bl	8001f7c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00c      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2208      	movs	r2, #8
 8001d28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f930 	bl	8001f90 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff f86d 	bl	8000e28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00c      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2210      	movs	r2, #16
 8001d70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f912 	bl	8001fb8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f8f9 	bl	8001fa4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2210      	movs	r2, #16
 8001dcc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8fc 	bl	8001fcc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2208      	movs	r2, #8
 8001dee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8f5 	bl	8001fe0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d07b      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d072      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d043      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03e      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e78:	2b60      	cmp	r3, #96	; 0x60
 8001e7a:	d02b      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x32a>
 8001e7c:	2b60      	cmp	r3, #96	; 0x60
 8001e7e:	d82e      	bhi.n	8001ede <HAL_CAN_IRQHandler+0x334>
 8001e80:	2b50      	cmp	r3, #80	; 0x50
 8001e82:	d022      	beq.n	8001eca <HAL_CAN_IRQHandler+0x320>
 8001e84:	2b50      	cmp	r3, #80	; 0x50
 8001e86:	d82a      	bhi.n	8001ede <HAL_CAN_IRQHandler+0x334>
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d019      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x316>
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d826      	bhi.n	8001ede <HAL_CAN_IRQHandler+0x334>
 8001e90:	2b30      	cmp	r3, #48	; 0x30
 8001e92:	d010      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x30c>
 8001e94:	2b30      	cmp	r3, #48	; 0x30
 8001e96:	d822      	bhi.n	8001ede <HAL_CAN_IRQHandler+0x334>
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d002      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x2f8>
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	d005      	beq.n	8001eac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ea0:	e01d      	b.n	8001ede <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eaa:	e019      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	f043 0310 	orr.w	r3, r3, #16
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb4:	e014      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f043 0320 	orr.w	r3, r3, #32
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ebe:	e00f      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ec8:	e00a      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ed2:	e005      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001edc:	e000      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ede:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001eee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d008      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f872 	bl	8001ff4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff3e 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff31 	bl	800206c <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	e14e      	b.n	80024da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8140 	beq.w	80024d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d005      	beq.n	800226c <HAL_GPIO_Init+0x40>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d130      	bne.n	80022ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a2:	2201      	movs	r2, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 0201 	and.w	r2, r3, #1
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d017      	beq.n	800230a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d123      	bne.n	800235e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002322:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	6939      	ldr	r1, [r7, #16]
 800235a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0203 	and.w	r2, r3, #3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 809a 	beq.w	80024d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a0:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <HAL_GPIO_Init+0x2cc>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a54      	ldr	r2, [pc, #336]	; (80024f8 <HAL_GPIO_Init+0x2cc>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <HAL_GPIO_Init+0x2cc>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023b8:	4a50      	ldr	r2, [pc, #320]	; (80024fc <HAL_GPIO_Init+0x2d0>)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023e2:	d013      	beq.n	800240c <HAL_GPIO_Init+0x1e0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a46      	ldr	r2, [pc, #280]	; (8002500 <HAL_GPIO_Init+0x2d4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00d      	beq.n	8002408 <HAL_GPIO_Init+0x1dc>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a45      	ldr	r2, [pc, #276]	; (8002504 <HAL_GPIO_Init+0x2d8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d007      	beq.n	8002404 <HAL_GPIO_Init+0x1d8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a44      	ldr	r2, [pc, #272]	; (8002508 <HAL_GPIO_Init+0x2dc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d101      	bne.n	8002400 <HAL_GPIO_Init+0x1d4>
 80023fc:	2303      	movs	r3, #3
 80023fe:	e006      	b.n	800240e <HAL_GPIO_Init+0x1e2>
 8002400:	2305      	movs	r3, #5
 8002402:	e004      	b.n	800240e <HAL_GPIO_Init+0x1e2>
 8002404:	2302      	movs	r3, #2
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x1e2>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_GPIO_Init+0x1e2>
 800240c:	2300      	movs	r3, #0
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	f002 0203 	and.w	r2, r2, #3
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	4093      	lsls	r3, r2
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800241e:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_GPIO_Init+0x2d0>)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242c:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_GPIO_Init+0x2e0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002450:	4a2e      	ldr	r2, [pc, #184]	; (800250c <HAL_GPIO_Init+0x2e0>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002456:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x2e0>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800247a:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_GPIO_Init+0x2e0>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002480:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_GPIO_Init+0x2e0>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_GPIO_Init+0x2e0>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_GPIO_Init+0x2e0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024ce:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_GPIO_Init+0x2e0>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f aea9 	bne.w	800223c <HAL_GPIO_Init+0x10>
  }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	48000400 	.word	0x48000400
 8002504:	48000800 	.word	0x48000800
 8002508:	48000c00 	.word	0x48000c00
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
 800251c:	4613      	mov	r3, r2
 800251e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800252c:	e002      	b.n	8002534 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4013      	ands	r3, r2
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43d9      	mvns	r1, r3
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	400b      	ands	r3, r1
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	619a      	str	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800257a:	af00      	add	r7, sp, #0
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002584:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	f001 b823 	b.w	80035e0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 817d 	beq.w	80028aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025b0:	4bbc      	ldr	r3, [pc, #752]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d00c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025bc:	4bb9      	ldr	r3, [pc, #740]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d15c      	bne.n	8002682 <HAL_RCC_OscConfig+0x10e>
 80025c8:	4bb6      	ldr	r3, [pc, #728]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d155      	bne.n	8002682 <HAL_RCC_OscConfig+0x10e>
 80025d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025da:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HAL_RCC_OscConfig+0x94>
 8002602:	4ba8      	ldr	r3, [pc, #672]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	e015      	b.n	8002634 <HAL_RCC_OscConfig+0xc0>
 8002608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800261c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002620:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002624:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002630:	4b9c      	ldr	r3, [pc, #624]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002638:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800263c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002640:	fa92 f2a2 	rbit	r2, r2
 8002644:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002648:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800264c:	fab2 f282 	clz	r2, r2
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f042 0220 	orr.w	r2, r2, #32
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f002 021f 	and.w	r2, r2, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 811f 	beq.w	80028a8 <HAL_RCC_OscConfig+0x334>
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 8116 	bne.w	80028a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	f000 bfaf 	b.w	80035e0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x12e>
 8002694:	4b83      	ldr	r3, [pc, #524]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a82      	ldr	r2, [pc, #520]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	e036      	b.n	8002710 <HAL_RCC_OscConfig+0x19c>
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x158>
 80026b2:	4b7c      	ldr	r3, [pc, #496]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7b      	ldr	r2, [pc, #492]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b79      	ldr	r3, [pc, #484]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a78      	ldr	r2, [pc, #480]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e021      	b.n	8002710 <HAL_RCC_OscConfig+0x19c>
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x184>
 80026de:	4b71      	ldr	r3, [pc, #452]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a70      	ldr	r2, [pc, #448]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b6e      	ldr	r3, [pc, #440]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6d      	ldr	r2, [pc, #436]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0x19c>
 80026f8:	4b6a      	ldr	r3, [pc, #424]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a69      	ldr	r2, [pc, #420]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b67      	ldr	r3, [pc, #412]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a66      	ldr	r2, [pc, #408]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002710:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	f023 020f 	bic.w	r2, r3, #15
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	495f      	ldr	r1, [pc, #380]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 8002726:	4313      	orrs	r3, r2
 8002728:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d059      	beq.n	80027ee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe fed9 	bl	80014f0 <HAL_GetTick>
 800273e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fed4 	bl	80014f0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b64      	cmp	r3, #100	; 0x64
 8002752:	d902      	bls.n	800275a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	f000 bf43 	b.w	80035e0 <HAL_RCC_OscConfig+0x106c>
 800275a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800276e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d102      	bne.n	800278c <HAL_RCC_OscConfig+0x218>
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	e015      	b.n	80027b8 <HAL_RCC_OscConfig+0x244>
 800278c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002790:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027b4:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027bc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027c4:	fa92 f2a2 	rbit	r2, r2
 80027c8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	f042 0220 	orr.w	r2, r2, #32
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	f002 021f 	and.w	r2, r2, #31
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f202 	lsl.w	r2, r1, r2
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ab      	beq.n	8002744 <HAL_RCC_OscConfig+0x1d0>
 80027ec:	e05d      	b.n	80028aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fe7f 	bl	80014f0 <HAL_GetTick>
 80027f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f8:	f7fe fe7a 	bl	80014f0 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d902      	bls.n	800280e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	f000 bee9 	b.w	80035e0 <HAL_RCC_OscConfig+0x106c>
 800280e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002812:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002822:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <HAL_RCC_OscConfig+0x2cc>
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	e015      	b.n	800286c <HAL_RCC_OscConfig+0x2f8>
 8002840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002844:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002858:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800285c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002868:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_RCC_OscConfig+0x330>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002870:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002874:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002878:	fa92 f2a2 	rbit	r2, r2
 800287c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002880:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002884:	fab2 f282 	clz	r2, r2
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	f042 0220 	orr.w	r2, r2, #32
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f002 021f 	and.w	r2, r2, #31
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f202 	lsl.w	r2, r1, r2
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ab      	bne.n	80027f8 <HAL_RCC_OscConfig+0x284>
 80028a0:	e003      	b.n	80028aa <HAL_RCC_OscConfig+0x336>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 817d 	beq.w	8002bba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028c0:	4ba6      	ldr	r3, [pc, #664]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028cc:	4ba3      	ldr	r3, [pc, #652]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d172      	bne.n	80029be <HAL_RCC_OscConfig+0x44a>
 80028d8:	4ba0      	ldr	r3, [pc, #640]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d16c      	bne.n	80029be <HAL_RCC_OscConfig+0x44a>
 80028e4:	2302      	movs	r3, #2
 80028e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_RCC_OscConfig+0x3a0>
 800290e:	4b93      	ldr	r3, [pc, #588]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	e013      	b.n	800293c <HAL_RCC_OscConfig+0x3c8>
 8002914:	2302      	movs	r3, #2
 8002916:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002926:	2302      	movs	r3, #2
 8002928:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800292c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002938:	4b88      	ldr	r3, [pc, #544]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2202      	movs	r2, #2
 800293e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002942:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002946:	fa92 f2a2 	rbit	r2, r2
 800294a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800294e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f042 0220 	orr.w	r2, r2, #32
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f002 021f 	and.w	r2, r2, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCC_OscConfig+0x410>
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f000 be2e 	b.w	80035e0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b75      	ldr	r3, [pc, #468]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	21f8      	movs	r1, #248	; 0xf8
 800299a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029a2:	fa91 f1a1 	rbit	r1, r1
 80029a6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029aa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029ae:	fab1 f181 	clz	r1, r1
 80029b2:	b2c9      	uxtb	r1, r1
 80029b4:	408b      	lsls	r3, r1
 80029b6:	4969      	ldr	r1, [pc, #420]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029bc:	e0fd      	b.n	8002bba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8088 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x56c>
 80029d0:	2301      	movs	r3, #1
 80029d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	461a      	mov	r2, r3
 80029f8:	2301      	movs	r3, #1
 80029fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe fd78 	bl	80014f0 <HAL_GetTick>
 8002a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a06:	f7fe fd73 	bl	80014f0 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d902      	bls.n	8002a1c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	f000 bde2 	b.w	80035e0 <HAL_RCC_OscConfig+0x106c>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d102      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4d8>
 8002a46:	4b45      	ldr	r3, [pc, #276]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	e013      	b.n	8002a74 <HAL_RCC_OscConfig+0x500>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a5e:	2302      	movs	r3, #2
 8002a60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a70:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2202      	movs	r2, #2
 8002a76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a7e:	fa92 f2a2 	rbit	r2, r2
 8002a82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0af      	beq.n	8002a06 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	21f8      	movs	r1, #248	; 0xf8
 8002abc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ac4:	fa91 f1a1 	rbit	r1, r1
 8002ac8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002acc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ad0:	fab1 f181 	clz	r1, r1
 8002ad4:	b2c9      	uxtb	r1, r1
 8002ad6:	408b      	lsls	r3, r1
 8002ad8:	4920      	ldr	r1, [pc, #128]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
 8002ade:	e06c      	b.n	8002bba <HAL_RCC_OscConfig+0x646>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002af2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	461a      	mov	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fcf0 	bl	80014f0 <HAL_GetTick>
 8002b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b16:	f7fe fceb 	bl	80014f0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d902      	bls.n	8002b2c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	f000 bd5a 	b.w	80035e0 <HAL_RCC_OscConfig+0x106c>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d104      	bne.n	8002b60 <HAL_RCC_OscConfig+0x5ec>
 8002b56:	4b01      	ldr	r3, [pc, #4]	; (8002b5c <HAL_RCC_OscConfig+0x5e8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	e015      	b.n	8002b88 <HAL_RCC_OscConfig+0x614>
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	2302      	movs	r3, #2
 8002b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b72:	2302      	movs	r3, #2
 8002b74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b84:	4bc8      	ldr	r3, [pc, #800]	; (8002ea8 <HAL_RCC_OscConfig+0x934>)
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b92:	fa92 f2a2 	rbit	r2, r2
 8002b96:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b9a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b9e:	fab2 f282 	clz	r2, r2
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	f042 0220 	orr.w	r2, r2, #32
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f002 021f 	and.w	r2, r2, #31
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ad      	bne.n	8002b16 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8110 	beq.w	8002df0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d079      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x760>
 8002be0:	2301      	movs	r3, #1
 8002be2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4bab      	ldr	r3, [pc, #684]	; (8002eac <HAL_RCC_OscConfig+0x938>)
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	461a      	mov	r2, r3
 8002c06:	2301      	movs	r3, #1
 8002c08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fc71 	bl	80014f0 <HAL_GetTick>
 8002c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c14:	f7fe fc6c 	bl	80014f0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d902      	bls.n	8002c2a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	f000 bcdb 	b.w	80035e0 <HAL_RCC_OscConfig+0x106c>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c44:	2202      	movs	r2, #2
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	fa93 f2a3 	rbit	r2, r3
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c68:	2202      	movs	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	fa93 f2a3 	rbit	r2, r3
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c84:	4b88      	ldr	r3, [pc, #544]	; (8002ea8 <HAL_RCC_OscConfig+0x934>)
 8002c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c90:	2102      	movs	r1, #2
 8002c92:	6019      	str	r1, [r3, #0]
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fa93 f1a3 	rbit	r1, r3
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002caa:	6019      	str	r1, [r3, #0]
  return result;
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0a0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x6a0>
 8002cd2:	e08d      	b.n	8002df0 <HAL_RCC_OscConfig+0x87c>
 8002cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	fa93 f2a3 	rbit	r2, r3
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cf6:	601a      	str	r2, [r3, #0]
  return result;
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d00:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b68      	ldr	r3, [pc, #416]	; (8002eac <HAL_RCC_OscConfig+0x938>)
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	461a      	mov	r2, r3
 8002d12:	2300      	movs	r3, #0
 8002d14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d16:	f7fe fbeb 	bl	80014f0 <HAL_GetTick>
 8002d1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe fbe6 	bl	80014f0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d902      	bls.n	8002d36 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	f000 bc55 	b.w	80035e0 <HAL_RCC_OscConfig+0x106c>
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d3e:	2202      	movs	r2, #2
 8002d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f2a3 	rbit	r2, r3
 8002d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d54:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d62:	2202      	movs	r2, #2
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	fa93 f2a3 	rbit	r2, r3
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d86:	2202      	movs	r2, #2
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fa93 f2a3 	rbit	r2, r3
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002da0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_OscConfig+0x934>)
 8002da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dae:	2102      	movs	r1, #2
 8002db0:	6019      	str	r1, [r3, #0]
 8002db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fa93 f1a3 	rbit	r1, r3
 8002dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dc8:	6019      	str	r1, [r3, #0]
  return result;
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d197      	bne.n	8002d20 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 81a1 	beq.w	8003148 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0c:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_RCC_OscConfig+0x934>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d116      	bne.n	8002e46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_RCC_OscConfig+0x934>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <HAL_RCC_OscConfig+0x934>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e22:	61d3      	str	r3, [r2, #28]
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_OscConfig+0x934>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e3e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_RCC_OscConfig+0x93c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11a      	bne.n	8002e88 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <HAL_RCC_OscConfig+0x93c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <HAL_RCC_OscConfig+0x93c>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fb47 	bl	80014f0 <HAL_GetTick>
 8002e62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	e009      	b.n	8002e7c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e68:	f7fe fb42 	bl	80014f0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e3b1      	b.n	80035e0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_RCC_OscConfig+0x93c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ef      	beq.n	8002e68 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10d      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x940>
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_RCC_OscConfig+0x934>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a02      	ldr	r2, [pc, #8]	; (8002ea8 <HAL_RCC_OscConfig+0x934>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	e03c      	b.n	8002f20 <HAL_RCC_OscConfig+0x9ac>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	10908120 	.word	0x10908120
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x96a>
 8002ec4:	4bc1      	ldr	r3, [pc, #772]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4ac0      	ldr	r2, [pc, #768]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	4bbe      	ldr	r3, [pc, #760]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4abd      	ldr	r2, [pc, #756]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002ed6:	f023 0304 	bic.w	r3, r3, #4
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e020      	b.n	8002f20 <HAL_RCC_OscConfig+0x9ac>
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x994>
 8002eee:	4bb7      	ldr	r3, [pc, #732]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4ab6      	ldr	r2, [pc, #728]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	4bb4      	ldr	r3, [pc, #720]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4ab3      	ldr	r2, [pc, #716]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0x9ac>
 8002f08:	4bb0      	ldr	r3, [pc, #704]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4aaf      	ldr	r2, [pc, #700]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	4bad      	ldr	r3, [pc, #692]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4aac      	ldr	r2, [pc, #688]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8081 	beq.w	8003034 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f32:	f7fe fadd 	bl	80014f0 <HAL_GetTick>
 8002f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fad8 	bl	80014f0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e345      	b.n	80035e0 <HAL_RCC_OscConfig+0x106c>
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f80:	2202      	movs	r2, #2
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f9a:	601a      	str	r2, [r3, #0]
  return result;
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fa4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d102      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xa4c>
 8002fba:	4b84      	ldr	r3, [pc, #528]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	e013      	b.n	8002fe8 <HAL_RCC_OscConfig+0xa74>
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fc8:	2202      	movs	r2, #2
 8002fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	4b79      	ldr	r3, [pc, #484]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	6011      	str	r1, [r2, #0]
 8002ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	fa92 f1a2 	rbit	r1, r2
 8003002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003006:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800300a:	6011      	str	r1, [r2, #0]
  return result;
 800300c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003010:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	fab2 f282 	clz	r2, r2
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f002 021f 	and.w	r2, r2, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d084      	beq.n	8002f3c <HAL_RCC_OscConfig+0x9c8>
 8003032:	e07f      	b.n	8003134 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003034:	f7fe fa5c 	bl	80014f0 <HAL_GetTick>
 8003038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	e00b      	b.n	8003056 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fa57 	bl	80014f0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e2c4      	b.n	80035e0 <HAL_RCC_OscConfig+0x106c>
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800305e:	2202      	movs	r2, #2
 8003060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003082:	2202      	movs	r2, #2
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800309c:	601a      	str	r2, [r3, #0]
  return result;
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f043 0302 	orr.w	r3, r3, #2
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_OscConfig+0xb4e>
 80030bc:	4b43      	ldr	r3, [pc, #268]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	e013      	b.n	80030ea <HAL_RCC_OscConfig+0xb76>
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030ca:	2202      	movs	r2, #2
 80030cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fa93 f2a3 	rbit	r2, r3
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	4b39      	ldr	r3, [pc, #228]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030f2:	2102      	movs	r1, #2
 80030f4:	6011      	str	r1, [r2, #0]
 80030f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	fa92 f1a2 	rbit	r1, r2
 8003104:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003108:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800310c:	6011      	str	r1, [r2, #0]
  return result;
 800310e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003112:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	fab2 f282 	clz	r2, r2
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	f002 021f 	and.w	r2, r2, #31
 8003128:	2101      	movs	r1, #1
 800312a:	fa01 f202 	lsl.w	r2, r1, r2
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d184      	bne.n	800303e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003134:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313c:	4b23      	ldr	r3, [pc, #140]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 8003142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003146:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8242 	beq.w	80035de <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800315a:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <HAL_RCC_OscConfig+0xc58>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	f000 8213 	beq.w	800358e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	2b02      	cmp	r3, #2
 8003176:	f040 8162 	bne.w	800343e <HAL_RCC_OscConfig+0xeca>
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003182:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800319e:	601a      	str	r2, [r3, #0]
  return result;
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	461a      	mov	r2, r3
 80031bc:	2300      	movs	r3, #0
 80031be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fe f996 	bl	80014f0 <HAL_GetTick>
 80031c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c8:	e00c      	b.n	80031e4 <HAL_RCC_OscConfig+0xc70>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe f98e 	bl	80014f0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e1fd      	b.n	80035e0 <HAL_RCC_OscConfig+0x106c>
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	fa93 f2a3 	rbit	r2, r3
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003208:	601a      	str	r2, [r3, #0]
  return result;
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003212:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d102      	bne.n	800322e <HAL_RCC_OscConfig+0xcba>
 8003228:	4bb0      	ldr	r3, [pc, #704]	; (80034ec <HAL_RCC_OscConfig+0xf78>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	e027      	b.n	800327e <HAL_RCC_OscConfig+0xd0a>
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800323a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	fa93 f2a3 	rbit	r2, r3
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003258:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800325c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003266:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003274:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	4b9c      	ldr	r3, [pc, #624]	; (80034ec <HAL_RCC_OscConfig+0xf78>)
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003282:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003286:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800328a:	6011      	str	r1, [r2, #0]
 800328c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003290:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	fa92 f1a2 	rbit	r1, r2
 800329a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800329e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032a2:	6011      	str	r1, [r2, #0]
  return result;
 80032a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	fab2 f282 	clz	r2, r2
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f042 0220 	orr.w	r2, r2, #32
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f002 021f 	and.w	r2, r2, #31
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f202 	lsl.w	r2, r1, r2
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d182      	bne.n	80031d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0xf78>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	430b      	orrs	r3, r1
 80032ec:	497f      	ldr	r1, [pc, #508]	; (80034ec <HAL_RCC_OscConfig+0xf78>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fa93 f2a3 	rbit	r2, r3
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003316:	601a      	str	r2, [r3, #0]
  return result;
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003320:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800332c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	461a      	mov	r2, r3
 8003334:	2301      	movs	r3, #1
 8003336:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe f8da 	bl	80014f0 <HAL_GetTick>
 800333c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003340:	e009      	b.n	8003356 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe f8d5 	bl	80014f0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e144      	b.n	80035e0 <HAL_RCC_OscConfig+0x106c>
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800335e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800337a:	601a      	str	r2, [r3, #0]
  return result;
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003384:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_OscConfig+0xe2c>
 800339a:	4b54      	ldr	r3, [pc, #336]	; (80034ec <HAL_RCC_OscConfig+0xf78>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e027      	b.n	80033f0 <HAL_RCC_OscConfig+0xe7c>
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	fa93 f2a3 	rbit	r2, r3
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	fa93 f2a3 	rbit	r2, r3
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <HAL_RCC_OscConfig+0xf78>)
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033fc:	6011      	str	r1, [r2, #0]
 80033fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003402:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	fa92 f1a2 	rbit	r1, r2
 800340c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003410:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003414:	6011      	str	r1, [r2, #0]
  return result;
 8003416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f042 0220 	orr.w	r2, r2, #32
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f002 021f 	and.w	r2, r2, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d082      	beq.n	8003342 <HAL_RCC_OscConfig+0xdce>
 800343c:	e0cf      	b.n	80035de <HAL_RCC_OscConfig+0x106a>
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003446:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800344a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	fa93 f2a3 	rbit	r2, r3
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003462:	601a      	str	r2, [r3, #0]
  return result;
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800346c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003478:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	461a      	mov	r2, r3
 8003480:	2300      	movs	r3, #0
 8003482:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe f834 	bl	80014f0 <HAL_GetTick>
 8003488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348c:	e009      	b.n	80034a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe f82f 	bl	80014f0 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e09e      	b.n	80035e0 <HAL_RCC_OscConfig+0x106c>
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	fa93 f2a3 	rbit	r2, r3
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034c6:	601a      	str	r2, [r3, #0]
  return result;
 80034c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034cc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d104      	bne.n	80034f0 <HAL_RCC_OscConfig+0xf7c>
 80034e6:	4b01      	ldr	r3, [pc, #4]	; (80034ec <HAL_RCC_OscConfig+0xf78>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	e029      	b.n	8003540 <HAL_RCC_OscConfig+0xfcc>
 80034ec:	40021000 	.word	0x40021000
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	fa93 f2a3 	rbit	r2, r3
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800351e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003528:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	fa93 f2a3 	rbit	r2, r3
 8003532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003536:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x1078>)
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003544:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003548:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800354c:	6011      	str	r1, [r2, #0]
 800354e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003552:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	fa92 f1a2 	rbit	r1, r2
 800355c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003560:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003564:	6011      	str	r1, [r2, #0]
  return result;
 8003566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800356a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	fab2 f282 	clz	r2, r2
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	f042 0220 	orr.w	r2, r2, #32
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	f002 021f 	and.w	r2, r2, #31
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d180      	bne.n	800348e <HAL_RCC_OscConfig+0xf1a>
 800358c:	e027      	b.n	80035de <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e01e      	b.n	80035e0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCC_OscConfig+0x1078>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035ae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d10b      	bne.n	80035da <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000

080035f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b09e      	sub	sp, #120	; 0x78
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e162      	b.n	80038ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b90      	ldr	r3, [pc, #576]	; (800384c <HAL_RCC_ClockConfig+0x25c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d910      	bls.n	8003638 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b8d      	ldr	r3, [pc, #564]	; (800384c <HAL_RCC_ClockConfig+0x25c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 0207 	bic.w	r2, r3, #7
 800361e:	498b      	ldr	r1, [pc, #556]	; (800384c <HAL_RCC_ClockConfig+0x25c>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b89      	ldr	r3, [pc, #548]	; (800384c <HAL_RCC_ClockConfig+0x25c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e14a      	b.n	80038ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b82      	ldr	r3, [pc, #520]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	497f      	ldr	r1, [pc, #508]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80dc 	beq.w	800381c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d13c      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xf6>
 800366c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003670:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800367a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d102      	bne.n	8003696 <HAL_RCC_ClockConfig+0xa6>
 8003690:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	e00f      	b.n	80036b6 <HAL_RCC_ClockConfig+0xc6>
 8003696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800369a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	667b      	str	r3, [r7, #100]	; 0x64
 80036a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036a8:	663b      	str	r3, [r7, #96]	; 0x60
 80036aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ac:	fa93 f3a3 	rbit	r3, r3
 80036b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036b2:	4b67      	ldr	r3, [pc, #412]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80036bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036be:	fa92 f2a2 	rbit	r2, r2
 80036c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036c6:	fab2 f282 	clz	r2, r2
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	f042 0220 	orr.w	r2, r2, #32
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f002 021f 	and.w	r2, r2, #31
 80036d6:	2101      	movs	r1, #1
 80036d8:	fa01 f202 	lsl.w	r2, r1, r2
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d17b      	bne.n	80037da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0f3      	b.n	80038ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d13c      	bne.n	8003768 <HAL_RCC_ClockConfig+0x178>
 80036ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d102      	bne.n	8003718 <HAL_RCC_ClockConfig+0x128>
 8003712:	4b4f      	ldr	r3, [pc, #316]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	e00f      	b.n	8003738 <HAL_RCC_ClockConfig+0x148>
 8003718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800371c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	647b      	str	r3, [r7, #68]	; 0x44
 8003726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372a:	643b      	str	r3, [r7, #64]	; 0x40
 800372c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003734:	4b46      	ldr	r3, [pc, #280]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373c:	63ba      	str	r2, [r7, #56]	; 0x38
 800373e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003740:	fa92 f2a2 	rbit	r2, r2
 8003744:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f042 0220 	orr.w	r2, r2, #32
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f002 021f 	and.w	r2, r2, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d13a      	bne.n	80037da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0b2      	b.n	80038ce <HAL_RCC_ClockConfig+0x2de>
 8003768:	2302      	movs	r3, #2
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d102      	bne.n	8003790 <HAL_RCC_ClockConfig+0x1a0>
 800378a:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	e00d      	b.n	80037ac <HAL_RCC_ClockConfig+0x1bc>
 8003790:	2302      	movs	r3, #2
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	2302      	movs	r3, #2
 800379e:	623b      	str	r3, [r7, #32]
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2202      	movs	r2, #2
 80037ae:	61ba      	str	r2, [r7, #24]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	fa92 f2a2 	rbit	r2, r2
 80037b6:	617a      	str	r2, [r7, #20]
  return result;
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	fab2 f282 	clz	r2, r2
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	f042 0220 	orr.w	r2, r2, #32
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	f002 021f 	and.w	r2, r2, #31
 80037ca:	2101      	movs	r1, #1
 80037cc:	fa01 f202 	lsl.w	r2, r1, r2
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e079      	b.n	80038ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	491a      	ldr	r1, [pc, #104]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ec:	f7fd fe80 	bl	80014f0 <HAL_GetTick>
 80037f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fd fe7c 	bl	80014f0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e061      	b.n	80038ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_ClockConfig+0x25c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d214      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_RCC_ClockConfig+0x25c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4906      	ldr	r1, [pc, #24]	; (800384c <HAL_RCC_ClockConfig+0x25c>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_RCC_ClockConfig+0x25c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e040      	b.n	80038ce <HAL_RCC_ClockConfig+0x2de>
 800384c:	40022000 	.word	0x40022000
 8003850:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003860:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_RCC_ClockConfig+0x2e8>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	491a      	ldr	r1, [pc, #104]	; (80038d8 <HAL_RCC_ClockConfig+0x2e8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x2e8>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4912      	ldr	r1, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x2e8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003892:	f000 f829 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8003896:	4601      	mov	r1, r0
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_RCC_ClockConfig+0x2e8>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a0:	22f0      	movs	r2, #240	; 0xf0
 80038a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	fa92 f2a2 	rbit	r2, r2
 80038aa:	60fa      	str	r2, [r7, #12]
  return result;
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	fab2 f282 	clz	r2, r2
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	40d3      	lsrs	r3, r2
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x2ec>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	fa21 f303 	lsr.w	r3, r1, r3
 80038be:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <HAL_RCC_ClockConfig+0x2f0>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_RCC_ClockConfig+0x2f4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd fdce 	bl	8001468 <HAL_InitTick>
  
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3778      	adds	r7, #120	; 0x78
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	080078b0 	.word	0x080078b0
 80038e0:	20000008 	.word	0x20000008
 80038e4:	2000000c 	.word	0x2000000c

080038e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b08b      	sub	sp, #44	; 0x2c
 80038ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	2300      	movs	r3, #0
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003902:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x30>
 8003912:	2b08      	cmp	r3, #8
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x36>
 8003916:	e03c      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800391a:	623b      	str	r3, [r7, #32]
      break;
 800391c:	e03c      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003924:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003928:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	fa92 f2a2 	rbit	r2, r2
 8003930:	607a      	str	r2, [r7, #4]
  return result;
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	fab2 f282 	clz	r2, r2
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	40d3      	lsrs	r3, r2
 800393c:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	220f      	movs	r2, #15
 800394c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	fa92 f2a2 	rbit	r2, r2
 8003954:	60fa      	str	r2, [r7, #12]
  return result;
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	40d3      	lsrs	r3, r2
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003970:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	fbb2 f2f3 	udiv	r2, r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	e004      	b.n	800398c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a0c      	ldr	r2, [pc, #48]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	623b      	str	r3, [r7, #32]
      break;
 8003990:	e002      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003994:	623b      	str	r3, [r7, #32]
      break;
 8003996:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003998:	6a3b      	ldr	r3, [r7, #32]
}
 800399a:	4618      	mov	r0, r3
 800399c:	372c      	adds	r7, #44	; 0x2c
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	007a1200 	.word	0x007a1200
 80039b0:	080078c8 	.word	0x080078c8
 80039b4:	080078d8 	.word	0x080078d8
 80039b8:	003d0900 	.word	0x003d0900

080039bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000008 	.word	0x20000008

080039d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039da:	f7ff ffef 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 80039de:	4601      	mov	r1, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	fa92 f2a2 	rbit	r2, r2
 80039f4:	603a      	str	r2, [r7, #0]
  return result;
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	fab2 f282 	clz	r2, r2
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	40d3      	lsrs	r3, r2
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	080078c0 	.word	0x080078c0

08003a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a1e:	f7ff ffcd 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a22:	4601      	mov	r1, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a2c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	fa92 f2a2 	rbit	r2, r2
 8003a38:	603a      	str	r2, [r7, #0]
  return result;
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	fab2 f282 	clz	r2, r2
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	40d3      	lsrs	r3, r2
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a46:	5cd3      	ldrb	r3, [r2, r3]
 8003a48:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	080078c0 	.word	0x080078c0

08003a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b092      	sub	sp, #72	; 0x48
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80cd 	beq.w	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a80:	4b86      	ldr	r3, [pc, #536]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10e      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8c:	4b83      	ldr	r3, [pc, #524]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	4a82      	ldr	r2, [pc, #520]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	61d3      	str	r3, [r2, #28]
 8003a98:	4b80      	ldr	r3, [pc, #512]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aaa:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d118      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab6:	4b7a      	ldr	r3, [pc, #488]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a79      	ldr	r2, [pc, #484]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac2:	f7fd fd15 	bl	80014f0 <HAL_GetTick>
 8003ac6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac8:	e008      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fd fd11 	bl	80014f0 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b64      	cmp	r3, #100	; 0x64
 8003ad6:	d901      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e0db      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	4b70      	ldr	r3, [pc, #448]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ae8:	4b6c      	ldr	r3, [pc, #432]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d07d      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d076      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b06:	4b65      	ldr	r3, [pc, #404]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b14:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b20:	fab3 f383 	clz	r3, r3
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b5e      	ldr	r3, [pc, #376]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2301      	movs	r3, #1
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b55      	ldr	r3, [pc, #340]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	461a      	mov	r2, r3
 8003b54:	2300      	movs	r3, #0
 8003b56:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b58:	4a50      	ldr	r2, [pc, #320]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d045      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fcc2 	bl	80014f0 <HAL_GetTick>
 8003b6c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b70:	f7fd fcbe 	bl	80014f0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e086      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003b86:	2302      	movs	r3, #2
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
 8003b92:	2302      	movs	r3, #2
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	61fb      	str	r3, [r7, #28]
  return result;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d102      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003bb4:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	e007      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2202      	movs	r2, #2
 8003bcc:	613a      	str	r2, [r7, #16]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	60fa      	str	r2, [r7, #12]
  return result;
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	f002 021f 	and.w	r2, r2, #31
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f202 	lsl.w	r2, r1, r2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0bd      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bf4:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4926      	ldr	r1, [pc, #152]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c18:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	491a      	ldr	r1, [pc, #104]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c44:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f023 0210 	bic.w	r2, r3, #16
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4912      	ldr	r1, [pc, #72]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	490b      	ldr	r1, [pc, #44]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	4903      	ldr	r1, [pc, #12]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3748      	adds	r7, #72	; 0x48
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	10908100 	.word	0x10908100

08003ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e049      	b.n	8003d4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd faf0 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f000 faa2 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d001      	beq.n	8003d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e040      	b.n	8003df2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_TIM_Base_Start_IT+0xa8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x58>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9a:	d009      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x58>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <HAL_TIM_Base_Start_IT+0xac>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x58>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_TIM_Base_Start_IT+0xb0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d115      	bne.n	8003ddc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_TIM_Base_Start_IT+0xb4>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d015      	beq.n	8003dee <HAL_TIM_Base_Start_IT+0x96>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d011      	beq.n	8003dee <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0201 	orr.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dda:	e008      	b.n	8003dee <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	e000      	b.n	8003df0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	00010007 	.word	0x00010007

08003e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0202 	mvn.w	r2, #2
 8003e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9ce 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9c0 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f9d1 	bl	8004208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0204 	mvn.w	r2, #4
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9a4 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f996 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f9a7 	bl	8004208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0208 	mvn.w	r2, #8
 8003ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2204      	movs	r2, #4
 8003eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f97a 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f96c 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f97d 	bl	8004208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0210 	mvn.w	r2, #16
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f950 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f942 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f953 	bl	8004208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d10e      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0201 	mvn.w	r2, #1
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fc ff26 	bl	8000de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fac2 	bl	8004544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fce:	d10e      	bne.n	8003fee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fda:	2b80      	cmp	r3, #128	; 0x80
 8003fdc:	d107      	bne.n	8003fee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fab5 	bl	8004558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d10e      	bne.n	800401a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d107      	bne.n	800401a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f901 	bl	800421c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b20      	cmp	r3, #32
 8004026:	d10e      	bne.n	8004046 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b20      	cmp	r3, #32
 8004034:	d107      	bne.n	8004046 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f06f 0220 	mvn.w	r2, #32
 800403e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fa75 	bl	8004530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_TIM_ConfigClockSource+0x1c>
 8004066:	2302      	movs	r3, #2
 8004068:	e0b6      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x18a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800408c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004094:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a6:	d03e      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0xd8>
 80040a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ac:	f200 8087 	bhi.w	80041be <HAL_TIM_ConfigClockSource+0x170>
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	f000 8086 	beq.w	80041c4 <HAL_TIM_ConfigClockSource+0x176>
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040bc:	d87f      	bhi.n	80041be <HAL_TIM_ConfigClockSource+0x170>
 80040be:	2b70      	cmp	r3, #112	; 0x70
 80040c0:	d01a      	beq.n	80040f8 <HAL_TIM_ConfigClockSource+0xaa>
 80040c2:	2b70      	cmp	r3, #112	; 0x70
 80040c4:	d87b      	bhi.n	80041be <HAL_TIM_ConfigClockSource+0x170>
 80040c6:	2b60      	cmp	r3, #96	; 0x60
 80040c8:	d050      	beq.n	800416c <HAL_TIM_ConfigClockSource+0x11e>
 80040ca:	2b60      	cmp	r3, #96	; 0x60
 80040cc:	d877      	bhi.n	80041be <HAL_TIM_ConfigClockSource+0x170>
 80040ce:	2b50      	cmp	r3, #80	; 0x50
 80040d0:	d03c      	beq.n	800414c <HAL_TIM_ConfigClockSource+0xfe>
 80040d2:	2b50      	cmp	r3, #80	; 0x50
 80040d4:	d873      	bhi.n	80041be <HAL_TIM_ConfigClockSource+0x170>
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d058      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x13e>
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	d86f      	bhi.n	80041be <HAL_TIM_ConfigClockSource+0x170>
 80040de:	2b30      	cmp	r3, #48	; 0x30
 80040e0:	d064      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x15e>
 80040e2:	2b30      	cmp	r3, #48	; 0x30
 80040e4:	d86b      	bhi.n	80041be <HAL_TIM_ConfigClockSource+0x170>
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d060      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x15e>
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d867      	bhi.n	80041be <HAL_TIM_ConfigClockSource+0x170>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d05c      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x15e>
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d05a      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x15e>
 80040f6:	e062      	b.n	80041be <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6899      	ldr	r1, [r3, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f000 f984 	bl	8004414 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800411a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]
      break;
 8004124:	e04f      	b.n	80041c6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6899      	ldr	r1, [r3, #8]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f000 f96d 	bl	8004414 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004148:	609a      	str	r2, [r3, #8]
      break;
 800414a:	e03c      	b.n	80041c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	461a      	mov	r2, r3
 800415a:	f000 f8e1 	bl	8004320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2150      	movs	r1, #80	; 0x50
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f93a 	bl	80043de <TIM_ITRx_SetConfig>
      break;
 800416a:	e02c      	b.n	80041c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	461a      	mov	r2, r3
 800417a:	f000 f900 	bl	800437e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2160      	movs	r1, #96	; 0x60
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f92a 	bl	80043de <TIM_ITRx_SetConfig>
      break;
 800418a:	e01c      	b.n	80041c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	461a      	mov	r2, r3
 800419a:	f000 f8c1 	bl	8004320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2140      	movs	r1, #64	; 0x40
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f91a 	bl	80043de <TIM_ITRx_SetConfig>
      break;
 80041aa:	e00c      	b.n	80041c6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f000 f911 	bl	80043de <TIM_ITRx_SetConfig>
      break;
 80041bc:	e003      	b.n	80041c6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
      break;
 80041c2:	e000      	b.n	80041c6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80041c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a32      	ldr	r2, [pc, #200]	; (800430c <TIM_Base_SetConfig+0xdc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d007      	beq.n	8004258 <TIM_Base_SetConfig+0x28>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d003      	beq.n	8004258 <TIM_Base_SetConfig+0x28>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a2f      	ldr	r2, [pc, #188]	; (8004310 <TIM_Base_SetConfig+0xe0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d108      	bne.n	800426a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <TIM_Base_SetConfig+0xdc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <TIM_Base_SetConfig+0x6a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d00f      	beq.n	800429a <TIM_Base_SetConfig+0x6a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a24      	ldr	r2, [pc, #144]	; (8004310 <TIM_Base_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00b      	beq.n	800429a <TIM_Base_SetConfig+0x6a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <TIM_Base_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_Base_SetConfig+0x6a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a22      	ldr	r2, [pc, #136]	; (8004318 <TIM_Base_SetConfig+0xe8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_Base_SetConfig+0x6a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a21      	ldr	r2, [pc, #132]	; (800431c <TIM_Base_SetConfig+0xec>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <TIM_Base_SetConfig+0xdc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_Base_SetConfig+0xc0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <TIM_Base_SetConfig+0xe4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_Base_SetConfig+0xc0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <TIM_Base_SetConfig+0xe8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0xc0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0c      	ldr	r2, [pc, #48]	; (800431c <TIM_Base_SetConfig+0xec>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	615a      	str	r2, [r3, #20]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800

08004320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0201 	bic.w	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800434a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f023 030a 	bic.w	r3, r3, #10
 800435c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437e:	b480      	push	{r7}
 8004380:	b087      	sub	sp, #28
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0210 	bic.w	r2, r3, #16
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	031b      	lsls	r3, r3, #12
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f043 0307 	orr.w	r3, r3, #7
 8004400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	609a      	str	r2, [r3, #8]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800442e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	021a      	lsls	r2, r3, #8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	431a      	orrs	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4313      	orrs	r3, r2
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	609a      	str	r2, [r3, #8]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004468:	2302      	movs	r3, #2
 800446a:	e054      	b.n	8004516 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a24      	ldr	r2, [pc, #144]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d108      	bne.n	80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800449c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a17      	ldr	r2, [pc, #92]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d009      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a13      	ldr	r2, [pc, #76]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a11      	ldr	r2, [pc, #68]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10c      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40000400 	.word	0x40000400
 800452c:	40014000 	.word	0x40014000

08004530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e040      	b.n	8004600 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fee6 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8b6 	bl	800471c <UART_SetConfig>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e022      	b.n	8004600 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f9e0 	bl	8004988 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fa67 	bl	8004acc <UART_CheckIdleState>
 80045fe:	4603      	mov	r3, r0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800461c:	2b20      	cmp	r3, #32
 800461e:	d178      	bne.n	8004712 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_UART_Transmit+0x24>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e071      	b.n	8004714 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2221      	movs	r2, #33	; 0x21
 800463c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800463e:	f7fc ff57 	bl	80014f0 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	88fa      	ldrh	r2, [r7, #6]
 8004650:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d108      	bne.n	8004670 <HAL_UART_Transmit+0x68>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d104      	bne.n	8004670 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e003      	b.n	8004678 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004678:	e030      	b.n	80046dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2200      	movs	r2, #0
 8004682:	2180      	movs	r1, #128	; 0x80
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fac9 	bl	8004c1c <UART_WaitOnFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d004      	beq.n	800469a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e03c      	b.n	8004714 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10b      	bne.n	80046b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	881a      	ldrh	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ac:	b292      	uxth	r2, r2
 80046ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	3302      	adds	r3, #2
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e008      	b.n	80046ca <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	b292      	uxth	r2, r2
 80046c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	3301      	adds	r3, #1
 80046c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1c8      	bne.n	800467a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	2140      	movs	r1, #64	; 0x40
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fa92 	bl	8004c1c <UART_WaitOnFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e005      	b.n	8004714 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
  }
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b8a      	ldr	r3, [pc, #552]	; (8004970 <UART_SetConfig+0x254>)
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	6979      	ldr	r1, [r7, #20]
 8004750:	430b      	orrs	r3, r1
 8004752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	430a      	orrs	r2, r1
 800478c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a78      	ldr	r2, [pc, #480]	; (8004974 <UART_SetConfig+0x258>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d120      	bne.n	80047da <UART_SetConfig+0xbe>
 8004798:	4b77      	ldr	r3, [pc, #476]	; (8004978 <UART_SetConfig+0x25c>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d817      	bhi.n	80047d4 <UART_SetConfig+0xb8>
 80047a4:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <UART_SetConfig+0x90>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047c9 	.word	0x080047c9
 80047b4:	080047cf 	.word	0x080047cf
 80047b8:	080047c3 	.word	0x080047c3
 80047bc:	2300      	movs	r3, #0
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e01d      	b.n	80047fe <UART_SetConfig+0xe2>
 80047c2:	2302      	movs	r3, #2
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e01a      	b.n	80047fe <UART_SetConfig+0xe2>
 80047c8:	2304      	movs	r3, #4
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e017      	b.n	80047fe <UART_SetConfig+0xe2>
 80047ce:	2308      	movs	r3, #8
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	e014      	b.n	80047fe <UART_SetConfig+0xe2>
 80047d4:	2310      	movs	r3, #16
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e011      	b.n	80047fe <UART_SetConfig+0xe2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a67      	ldr	r2, [pc, #412]	; (800497c <UART_SetConfig+0x260>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d102      	bne.n	80047ea <UART_SetConfig+0xce>
 80047e4:	2300      	movs	r3, #0
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e009      	b.n	80047fe <UART_SetConfig+0xe2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a64      	ldr	r2, [pc, #400]	; (8004980 <UART_SetConfig+0x264>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d102      	bne.n	80047fa <UART_SetConfig+0xde>
 80047f4:	2300      	movs	r3, #0
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e001      	b.n	80047fe <UART_SetConfig+0xe2>
 80047fa:	2310      	movs	r3, #16
 80047fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004806:	d15a      	bne.n	80048be <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004808:	7ffb      	ldrb	r3, [r7, #31]
 800480a:	2b08      	cmp	r3, #8
 800480c:	d827      	bhi.n	800485e <UART_SetConfig+0x142>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <UART_SetConfig+0xf8>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004839 	.word	0x08004839
 8004818:	08004841 	.word	0x08004841
 800481c:	08004849 	.word	0x08004849
 8004820:	0800485f 	.word	0x0800485f
 8004824:	0800484f 	.word	0x0800484f
 8004828:	0800485f 	.word	0x0800485f
 800482c:	0800485f 	.word	0x0800485f
 8004830:	0800485f 	.word	0x0800485f
 8004834:	08004857 	.word	0x08004857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004838:	f7ff f8cc 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 800483c:	61b8      	str	r0, [r7, #24]
        break;
 800483e:	e013      	b.n	8004868 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7ff f8ea 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8004844:	61b8      	str	r0, [r7, #24]
        break;
 8004846:	e00f      	b.n	8004868 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004848:	4b4e      	ldr	r3, [pc, #312]	; (8004984 <UART_SetConfig+0x268>)
 800484a:	61bb      	str	r3, [r7, #24]
        break;
 800484c:	e00c      	b.n	8004868 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484e:	f7ff f84b 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8004852:	61b8      	str	r0, [r7, #24]
        break;
 8004854:	e008      	b.n	8004868 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485a:	61bb      	str	r3, [r7, #24]
        break;
 800485c:	e004      	b.n	8004868 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	77bb      	strb	r3, [r7, #30]
        break;
 8004866:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d074      	beq.n	8004958 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	005a      	lsls	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b0f      	cmp	r3, #15
 8004888:	d916      	bls.n	80048b8 <UART_SetConfig+0x19c>
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004890:	d212      	bcs.n	80048b8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f023 030f 	bic.w	r3, r3, #15
 800489a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	89fb      	ldrh	r3, [r7, #14]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	89fa      	ldrh	r2, [r7, #14]
 80048b4:	60da      	str	r2, [r3, #12]
 80048b6:	e04f      	b.n	8004958 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	77bb      	strb	r3, [r7, #30]
 80048bc:	e04c      	b.n	8004958 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048be:	7ffb      	ldrb	r3, [r7, #31]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d828      	bhi.n	8004916 <UART_SetConfig+0x1fa>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <UART_SetConfig+0x1b0>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f9 	.word	0x080048f9
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004917 	.word	0x08004917
 80048dc:	08004907 	.word	0x08004907
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004917 	.word	0x08004917
 80048e8:	08004917 	.word	0x08004917
 80048ec:	0800490f 	.word	0x0800490f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f0:	f7ff f870 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 80048f4:	61b8      	str	r0, [r7, #24]
        break;
 80048f6:	e013      	b.n	8004920 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f8:	f7ff f88e 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 80048fc:	61b8      	str	r0, [r7, #24]
        break;
 80048fe:	e00f      	b.n	8004920 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004900:	4b20      	ldr	r3, [pc, #128]	; (8004984 <UART_SetConfig+0x268>)
 8004902:	61bb      	str	r3, [r7, #24]
        break;
 8004904:	e00c      	b.n	8004920 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004906:	f7fe ffef 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800490a:	61b8      	str	r0, [r7, #24]
        break;
 800490c:	e008      	b.n	8004920 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004912:	61bb      	str	r3, [r7, #24]
        break;
 8004914:	e004      	b.n	8004920 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	77bb      	strb	r3, [r7, #30]
        break;
 800491e:	bf00      	nop
    }

    if (pclk != 0U)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d018      	beq.n	8004958 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	085a      	lsrs	r2, r3, #1
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	441a      	add	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b0f      	cmp	r3, #15
 800493e:	d909      	bls.n	8004954 <UART_SetConfig+0x238>
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004946:	d205      	bcs.n	8004954 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	e001      	b.n	8004958 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004964:	7fbb      	ldrb	r3, [r7, #30]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	efff69f3 	.word	0xefff69f3
 8004974:	40013800 	.word	0x40013800
 8004978:	40021000 	.word	0x40021000
 800497c:	40004400 	.word	0x40004400
 8004980:	40004800 	.word	0x40004800
 8004984:	007a1200 	.word	0x007a1200

08004988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01a      	beq.n	8004a9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a86:	d10a      	bne.n	8004a9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b098      	sub	sp, #96	; 0x60
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004adc:	f7fc fd08 	bl	80014f0 <HAL_GetTick>
 8004ae0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d12e      	bne.n	8004b4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af8:	2200      	movs	r2, #0
 8004afa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f88c 	bl	8004c1c <UART_WaitOnFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d021      	beq.n	8004b4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b28:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e6      	bne.n	8004b0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e062      	b.n	8004c14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d149      	bne.n	8004bf0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b64:	2200      	movs	r2, #0
 8004b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f856 	bl	8004c1c <UART_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d03c      	beq.n	8004bf0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	623b      	str	r3, [r7, #32]
   return(result);
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b94:	633b      	str	r3, [r7, #48]	; 0x30
 8004b96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e6      	bne.n	8004b76 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3308      	adds	r3, #8
 8004bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc8:	61fa      	str	r2, [r7, #28]
 8004bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	69b9      	ldr	r1, [r7, #24]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e5      	bne.n	8004ba8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e011      	b.n	8004c14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3758      	adds	r7, #88	; 0x58
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2c:	e049      	b.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d045      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c36:	f7fc fc5b 	bl	80014f0 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d302      	bcc.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e048      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d031      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d110      	bne.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2208      	movs	r2, #8
 8004c72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f838 	bl	8004cea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e029      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9c:	d111      	bne.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f81e 	bl	8004cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e00f      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d0a6      	beq.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b095      	sub	sp, #84	; 0x54
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	643b      	str	r3, [r7, #64]	; 0x40
 8004d12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e6      	bne.n	8004cf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f023 0301 	bic.w	r3, r3, #1
 8004d3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3308      	adds	r3, #8
 8004d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d118      	bne.n	8004d92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f023 0310 	bic.w	r3, r3, #16
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6979      	ldr	r1, [r7, #20]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e6      	bne.n	8004d60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004da6:	bf00      	nop
 8004da8:	3754      	adds	r7, #84	; 0x54
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <__errno>:
 8004db4:	4b01      	ldr	r3, [pc, #4]	; (8004dbc <__errno+0x8>)
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000014 	.word	0x20000014

08004dc0 <__libc_init_array>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4d0d      	ldr	r5, [pc, #52]	; (8004df8 <__libc_init_array+0x38>)
 8004dc4:	4c0d      	ldr	r4, [pc, #52]	; (8004dfc <__libc_init_array+0x3c>)
 8004dc6:	1b64      	subs	r4, r4, r5
 8004dc8:	10a4      	asrs	r4, r4, #2
 8004dca:	2600      	movs	r6, #0
 8004dcc:	42a6      	cmp	r6, r4
 8004dce:	d109      	bne.n	8004de4 <__libc_init_array+0x24>
 8004dd0:	4d0b      	ldr	r5, [pc, #44]	; (8004e00 <__libc_init_array+0x40>)
 8004dd2:	4c0c      	ldr	r4, [pc, #48]	; (8004e04 <__libc_init_array+0x44>)
 8004dd4:	f002 fd50 	bl	8007878 <_init>
 8004dd8:	1b64      	subs	r4, r4, r5
 8004dda:	10a4      	asrs	r4, r4, #2
 8004ddc:	2600      	movs	r6, #0
 8004dde:	42a6      	cmp	r6, r4
 8004de0:	d105      	bne.n	8004dee <__libc_init_array+0x2e>
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de8:	4798      	blx	r3
 8004dea:	3601      	adds	r6, #1
 8004dec:	e7ee      	b.n	8004dcc <__libc_init_array+0xc>
 8004dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df2:	4798      	blx	r3
 8004df4:	3601      	adds	r6, #1
 8004df6:	e7f2      	b.n	8004dde <__libc_init_array+0x1e>
 8004df8:	08007cc4 	.word	0x08007cc4
 8004dfc:	08007cc4 	.word	0x08007cc4
 8004e00:	08007cc4 	.word	0x08007cc4
 8004e04:	08007cc8 	.word	0x08007cc8

08004e08 <memset>:
 8004e08:	4402      	add	r2, r0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <__cvt>:
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	ec55 4b10 	vmov	r4, r5, d0
 8004e20:	2d00      	cmp	r5, #0
 8004e22:	460e      	mov	r6, r1
 8004e24:	4619      	mov	r1, r3
 8004e26:	462b      	mov	r3, r5
 8004e28:	bfbb      	ittet	lt
 8004e2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e2e:	461d      	movlt	r5, r3
 8004e30:	2300      	movge	r3, #0
 8004e32:	232d      	movlt	r3, #45	; 0x2d
 8004e34:	700b      	strb	r3, [r1, #0]
 8004e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e3c:	4691      	mov	r9, r2
 8004e3e:	f023 0820 	bic.w	r8, r3, #32
 8004e42:	bfbc      	itt	lt
 8004e44:	4622      	movlt	r2, r4
 8004e46:	4614      	movlt	r4, r2
 8004e48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e4c:	d005      	beq.n	8004e5a <__cvt+0x42>
 8004e4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e52:	d100      	bne.n	8004e56 <__cvt+0x3e>
 8004e54:	3601      	adds	r6, #1
 8004e56:	2102      	movs	r1, #2
 8004e58:	e000      	b.n	8004e5c <__cvt+0x44>
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	ab03      	add	r3, sp, #12
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	ab02      	add	r3, sp, #8
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	ec45 4b10 	vmov	d0, r4, r5
 8004e68:	4653      	mov	r3, sl
 8004e6a:	4632      	mov	r2, r6
 8004e6c:	f000 fce4 	bl	8005838 <_dtoa_r>
 8004e70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e74:	4607      	mov	r7, r0
 8004e76:	d102      	bne.n	8004e7e <__cvt+0x66>
 8004e78:	f019 0f01 	tst.w	r9, #1
 8004e7c:	d022      	beq.n	8004ec4 <__cvt+0xac>
 8004e7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e82:	eb07 0906 	add.w	r9, r7, r6
 8004e86:	d110      	bne.n	8004eaa <__cvt+0x92>
 8004e88:	783b      	ldrb	r3, [r7, #0]
 8004e8a:	2b30      	cmp	r3, #48	; 0x30
 8004e8c:	d10a      	bne.n	8004ea4 <__cvt+0x8c>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2300      	movs	r3, #0
 8004e92:	4620      	mov	r0, r4
 8004e94:	4629      	mov	r1, r5
 8004e96:	f7fb fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e9a:	b918      	cbnz	r0, 8004ea4 <__cvt+0x8c>
 8004e9c:	f1c6 0601 	rsb	r6, r6, #1
 8004ea0:	f8ca 6000 	str.w	r6, [sl]
 8004ea4:	f8da 3000 	ldr.w	r3, [sl]
 8004ea8:	4499      	add	r9, r3
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2300      	movs	r3, #0
 8004eae:	4620      	mov	r0, r4
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f7fb fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eb6:	b108      	cbz	r0, 8004ebc <__cvt+0xa4>
 8004eb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ebc:	2230      	movs	r2, #48	; 0x30
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	454b      	cmp	r3, r9
 8004ec2:	d307      	bcc.n	8004ed4 <__cvt+0xbc>
 8004ec4:	9b03      	ldr	r3, [sp, #12]
 8004ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ec8:	1bdb      	subs	r3, r3, r7
 8004eca:	4638      	mov	r0, r7
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	b004      	add	sp, #16
 8004ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed4:	1c59      	adds	r1, r3, #1
 8004ed6:	9103      	str	r1, [sp, #12]
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e7f0      	b.n	8004ebe <__cvt+0xa6>

08004edc <__exponent>:
 8004edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	bfb8      	it	lt
 8004ee4:	4249      	neglt	r1, r1
 8004ee6:	f803 2b02 	strb.w	r2, [r3], #2
 8004eea:	bfb4      	ite	lt
 8004eec:	222d      	movlt	r2, #45	; 0x2d
 8004eee:	222b      	movge	r2, #43	; 0x2b
 8004ef0:	2909      	cmp	r1, #9
 8004ef2:	7042      	strb	r2, [r0, #1]
 8004ef4:	dd2a      	ble.n	8004f4c <__exponent+0x70>
 8004ef6:	f10d 0407 	add.w	r4, sp, #7
 8004efa:	46a4      	mov	ip, r4
 8004efc:	270a      	movs	r7, #10
 8004efe:	46a6      	mov	lr, r4
 8004f00:	460a      	mov	r2, r1
 8004f02:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f06:	fb07 1516 	mls	r5, r7, r6, r1
 8004f0a:	3530      	adds	r5, #48	; 0x30
 8004f0c:	2a63      	cmp	r2, #99	; 0x63
 8004f0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f16:	4631      	mov	r1, r6
 8004f18:	dcf1      	bgt.n	8004efe <__exponent+0x22>
 8004f1a:	3130      	adds	r1, #48	; 0x30
 8004f1c:	f1ae 0502 	sub.w	r5, lr, #2
 8004f20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f24:	1c44      	adds	r4, r0, #1
 8004f26:	4629      	mov	r1, r5
 8004f28:	4561      	cmp	r1, ip
 8004f2a:	d30a      	bcc.n	8004f42 <__exponent+0x66>
 8004f2c:	f10d 0209 	add.w	r2, sp, #9
 8004f30:	eba2 020e 	sub.w	r2, r2, lr
 8004f34:	4565      	cmp	r5, ip
 8004f36:	bf88      	it	hi
 8004f38:	2200      	movhi	r2, #0
 8004f3a:	4413      	add	r3, r2
 8004f3c:	1a18      	subs	r0, r3, r0
 8004f3e:	b003      	add	sp, #12
 8004f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f4a:	e7ed      	b.n	8004f28 <__exponent+0x4c>
 8004f4c:	2330      	movs	r3, #48	; 0x30
 8004f4e:	3130      	adds	r1, #48	; 0x30
 8004f50:	7083      	strb	r3, [r0, #2]
 8004f52:	70c1      	strb	r1, [r0, #3]
 8004f54:	1d03      	adds	r3, r0, #4
 8004f56:	e7f1      	b.n	8004f3c <__exponent+0x60>

08004f58 <_printf_float>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	ed2d 8b02 	vpush	{d8}
 8004f60:	b08d      	sub	sp, #52	; 0x34
 8004f62:	460c      	mov	r4, r1
 8004f64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f68:	4616      	mov	r6, r2
 8004f6a:	461f      	mov	r7, r3
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	f001 fb47 	bl	8006600 <_localeconv_r>
 8004f72:	f8d0 a000 	ldr.w	sl, [r0]
 8004f76:	4650      	mov	r0, sl
 8004f78:	f7fb f92a 	bl	80001d0 <strlen>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	9305      	str	r3, [sp, #20]
 8004f84:	f8d8 3000 	ldr.w	r3, [r8]
 8004f88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f8c:	3307      	adds	r3, #7
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	f103 0208 	add.w	r2, r3, #8
 8004f96:	f8c8 2000 	str.w	r2, [r8]
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004faa:	9307      	str	r3, [sp, #28]
 8004fac:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fb0:	ee08 0a10 	vmov	s16, r0
 8004fb4:	4b9f      	ldr	r3, [pc, #636]	; (8005234 <_printf_float+0x2dc>)
 8004fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fba:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbe:	f7fb fdb5 	bl	8000b2c <__aeabi_dcmpun>
 8004fc2:	bb88      	cbnz	r0, 8005028 <_printf_float+0xd0>
 8004fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fc8:	4b9a      	ldr	r3, [pc, #616]	; (8005234 <_printf_float+0x2dc>)
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295
 8004fce:	f7fb fd8f 	bl	8000af0 <__aeabi_dcmple>
 8004fd2:	bb48      	cbnz	r0, 8005028 <_printf_float+0xd0>
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4649      	mov	r1, r9
 8004fdc:	f7fb fd7e 	bl	8000adc <__aeabi_dcmplt>
 8004fe0:	b110      	cbz	r0, 8004fe8 <_printf_float+0x90>
 8004fe2:	232d      	movs	r3, #45	; 0x2d
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe8:	4b93      	ldr	r3, [pc, #588]	; (8005238 <_printf_float+0x2e0>)
 8004fea:	4894      	ldr	r0, [pc, #592]	; (800523c <_printf_float+0x2e4>)
 8004fec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ff0:	bf94      	ite	ls
 8004ff2:	4698      	movls	r8, r3
 8004ff4:	4680      	movhi	r8, r0
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	9b05      	ldr	r3, [sp, #20]
 8004ffc:	f023 0204 	bic.w	r2, r3, #4
 8005000:	6022      	str	r2, [r4, #0]
 8005002:	f04f 0900 	mov.w	r9, #0
 8005006:	9700      	str	r7, [sp, #0]
 8005008:	4633      	mov	r3, r6
 800500a:	aa0b      	add	r2, sp, #44	; 0x2c
 800500c:	4621      	mov	r1, r4
 800500e:	4628      	mov	r0, r5
 8005010:	f000 f9d8 	bl	80053c4 <_printf_common>
 8005014:	3001      	adds	r0, #1
 8005016:	f040 8090 	bne.w	800513a <_printf_float+0x1e2>
 800501a:	f04f 30ff 	mov.w	r0, #4294967295
 800501e:	b00d      	add	sp, #52	; 0x34
 8005020:	ecbd 8b02 	vpop	{d8}
 8005024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005028:	4642      	mov	r2, r8
 800502a:	464b      	mov	r3, r9
 800502c:	4640      	mov	r0, r8
 800502e:	4649      	mov	r1, r9
 8005030:	f7fb fd7c 	bl	8000b2c <__aeabi_dcmpun>
 8005034:	b140      	cbz	r0, 8005048 <_printf_float+0xf0>
 8005036:	464b      	mov	r3, r9
 8005038:	2b00      	cmp	r3, #0
 800503a:	bfbc      	itt	lt
 800503c:	232d      	movlt	r3, #45	; 0x2d
 800503e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005042:	487f      	ldr	r0, [pc, #508]	; (8005240 <_printf_float+0x2e8>)
 8005044:	4b7f      	ldr	r3, [pc, #508]	; (8005244 <_printf_float+0x2ec>)
 8005046:	e7d1      	b.n	8004fec <_printf_float+0x94>
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800504e:	9206      	str	r2, [sp, #24]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	d13f      	bne.n	80050d4 <_printf_float+0x17c>
 8005054:	2306      	movs	r3, #6
 8005056:	6063      	str	r3, [r4, #4]
 8005058:	9b05      	ldr	r3, [sp, #20]
 800505a:	6861      	ldr	r1, [r4, #4]
 800505c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005060:	2300      	movs	r3, #0
 8005062:	9303      	str	r3, [sp, #12]
 8005064:	ab0a      	add	r3, sp, #40	; 0x28
 8005066:	e9cd b301 	strd	fp, r3, [sp, #4]
 800506a:	ab09      	add	r3, sp, #36	; 0x24
 800506c:	ec49 8b10 	vmov	d0, r8, r9
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005078:	4628      	mov	r0, r5
 800507a:	f7ff fecd 	bl	8004e18 <__cvt>
 800507e:	9b06      	ldr	r3, [sp, #24]
 8005080:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005082:	2b47      	cmp	r3, #71	; 0x47
 8005084:	4680      	mov	r8, r0
 8005086:	d108      	bne.n	800509a <_printf_float+0x142>
 8005088:	1cc8      	adds	r0, r1, #3
 800508a:	db02      	blt.n	8005092 <_printf_float+0x13a>
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	4299      	cmp	r1, r3
 8005090:	dd41      	ble.n	8005116 <_printf_float+0x1be>
 8005092:	f1ab 0b02 	sub.w	fp, fp, #2
 8005096:	fa5f fb8b 	uxtb.w	fp, fp
 800509a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800509e:	d820      	bhi.n	80050e2 <_printf_float+0x18a>
 80050a0:	3901      	subs	r1, #1
 80050a2:	465a      	mov	r2, fp
 80050a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050a8:	9109      	str	r1, [sp, #36]	; 0x24
 80050aa:	f7ff ff17 	bl	8004edc <__exponent>
 80050ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050b0:	1813      	adds	r3, r2, r0
 80050b2:	2a01      	cmp	r2, #1
 80050b4:	4681      	mov	r9, r0
 80050b6:	6123      	str	r3, [r4, #16]
 80050b8:	dc02      	bgt.n	80050c0 <_printf_float+0x168>
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	07d2      	lsls	r2, r2, #31
 80050be:	d501      	bpl.n	80050c4 <_printf_float+0x16c>
 80050c0:	3301      	adds	r3, #1
 80050c2:	6123      	str	r3, [r4, #16]
 80050c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d09c      	beq.n	8005006 <_printf_float+0xae>
 80050cc:	232d      	movs	r3, #45	; 0x2d
 80050ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d2:	e798      	b.n	8005006 <_printf_float+0xae>
 80050d4:	9a06      	ldr	r2, [sp, #24]
 80050d6:	2a47      	cmp	r2, #71	; 0x47
 80050d8:	d1be      	bne.n	8005058 <_printf_float+0x100>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1bc      	bne.n	8005058 <_printf_float+0x100>
 80050de:	2301      	movs	r3, #1
 80050e0:	e7b9      	b.n	8005056 <_printf_float+0xfe>
 80050e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050e6:	d118      	bne.n	800511a <_printf_float+0x1c2>
 80050e8:	2900      	cmp	r1, #0
 80050ea:	6863      	ldr	r3, [r4, #4]
 80050ec:	dd0b      	ble.n	8005106 <_printf_float+0x1ae>
 80050ee:	6121      	str	r1, [r4, #16]
 80050f0:	b913      	cbnz	r3, 80050f8 <_printf_float+0x1a0>
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	07d0      	lsls	r0, r2, #31
 80050f6:	d502      	bpl.n	80050fe <_printf_float+0x1a6>
 80050f8:	3301      	adds	r3, #1
 80050fa:	440b      	add	r3, r1
 80050fc:	6123      	str	r3, [r4, #16]
 80050fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005100:	f04f 0900 	mov.w	r9, #0
 8005104:	e7de      	b.n	80050c4 <_printf_float+0x16c>
 8005106:	b913      	cbnz	r3, 800510e <_printf_float+0x1b6>
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	07d2      	lsls	r2, r2, #31
 800510c:	d501      	bpl.n	8005112 <_printf_float+0x1ba>
 800510e:	3302      	adds	r3, #2
 8005110:	e7f4      	b.n	80050fc <_printf_float+0x1a4>
 8005112:	2301      	movs	r3, #1
 8005114:	e7f2      	b.n	80050fc <_printf_float+0x1a4>
 8005116:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800511a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800511c:	4299      	cmp	r1, r3
 800511e:	db05      	blt.n	800512c <_printf_float+0x1d4>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	6121      	str	r1, [r4, #16]
 8005124:	07d8      	lsls	r0, r3, #31
 8005126:	d5ea      	bpl.n	80050fe <_printf_float+0x1a6>
 8005128:	1c4b      	adds	r3, r1, #1
 800512a:	e7e7      	b.n	80050fc <_printf_float+0x1a4>
 800512c:	2900      	cmp	r1, #0
 800512e:	bfd4      	ite	le
 8005130:	f1c1 0202 	rsble	r2, r1, #2
 8005134:	2201      	movgt	r2, #1
 8005136:	4413      	add	r3, r2
 8005138:	e7e0      	b.n	80050fc <_printf_float+0x1a4>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	055a      	lsls	r2, r3, #21
 800513e:	d407      	bmi.n	8005150 <_printf_float+0x1f8>
 8005140:	6923      	ldr	r3, [r4, #16]
 8005142:	4642      	mov	r2, r8
 8005144:	4631      	mov	r1, r6
 8005146:	4628      	mov	r0, r5
 8005148:	47b8      	blx	r7
 800514a:	3001      	adds	r0, #1
 800514c:	d12c      	bne.n	80051a8 <_printf_float+0x250>
 800514e:	e764      	b.n	800501a <_printf_float+0xc2>
 8005150:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005154:	f240 80e0 	bls.w	8005318 <_printf_float+0x3c0>
 8005158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800515c:	2200      	movs	r2, #0
 800515e:	2300      	movs	r3, #0
 8005160:	f7fb fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005164:	2800      	cmp	r0, #0
 8005166:	d034      	beq.n	80051d2 <_printf_float+0x27a>
 8005168:	4a37      	ldr	r2, [pc, #220]	; (8005248 <_printf_float+0x2f0>)
 800516a:	2301      	movs	r3, #1
 800516c:	4631      	mov	r1, r6
 800516e:	4628      	mov	r0, r5
 8005170:	47b8      	blx	r7
 8005172:	3001      	adds	r0, #1
 8005174:	f43f af51 	beq.w	800501a <_printf_float+0xc2>
 8005178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800517c:	429a      	cmp	r2, r3
 800517e:	db02      	blt.n	8005186 <_printf_float+0x22e>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	07d8      	lsls	r0, r3, #31
 8005184:	d510      	bpl.n	80051a8 <_printf_float+0x250>
 8005186:	ee18 3a10 	vmov	r3, s16
 800518a:	4652      	mov	r2, sl
 800518c:	4631      	mov	r1, r6
 800518e:	4628      	mov	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	f43f af41 	beq.w	800501a <_printf_float+0xc2>
 8005198:	f04f 0800 	mov.w	r8, #0
 800519c:	f104 091a 	add.w	r9, r4, #26
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	3b01      	subs	r3, #1
 80051a4:	4543      	cmp	r3, r8
 80051a6:	dc09      	bgt.n	80051bc <_printf_float+0x264>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	079b      	lsls	r3, r3, #30
 80051ac:	f100 8105 	bmi.w	80053ba <_printf_float+0x462>
 80051b0:	68e0      	ldr	r0, [r4, #12]
 80051b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b4:	4298      	cmp	r0, r3
 80051b6:	bfb8      	it	lt
 80051b8:	4618      	movlt	r0, r3
 80051ba:	e730      	b.n	800501e <_printf_float+0xc6>
 80051bc:	2301      	movs	r3, #1
 80051be:	464a      	mov	r2, r9
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f af27 	beq.w	800501a <_printf_float+0xc2>
 80051cc:	f108 0801 	add.w	r8, r8, #1
 80051d0:	e7e6      	b.n	80051a0 <_printf_float+0x248>
 80051d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dc39      	bgt.n	800524c <_printf_float+0x2f4>
 80051d8:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <_printf_float+0x2f0>)
 80051da:	2301      	movs	r3, #1
 80051dc:	4631      	mov	r1, r6
 80051de:	4628      	mov	r0, r5
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	f43f af19 	beq.w	800501a <_printf_float+0xc2>
 80051e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d102      	bne.n	80051f6 <_printf_float+0x29e>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	07d9      	lsls	r1, r3, #31
 80051f4:	d5d8      	bpl.n	80051a8 <_printf_float+0x250>
 80051f6:	ee18 3a10 	vmov	r3, s16
 80051fa:	4652      	mov	r2, sl
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	f43f af09 	beq.w	800501a <_printf_float+0xc2>
 8005208:	f04f 0900 	mov.w	r9, #0
 800520c:	f104 0a1a 	add.w	sl, r4, #26
 8005210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005212:	425b      	negs	r3, r3
 8005214:	454b      	cmp	r3, r9
 8005216:	dc01      	bgt.n	800521c <_printf_float+0x2c4>
 8005218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800521a:	e792      	b.n	8005142 <_printf_float+0x1ea>
 800521c:	2301      	movs	r3, #1
 800521e:	4652      	mov	r2, sl
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f aef7 	beq.w	800501a <_printf_float+0xc2>
 800522c:	f109 0901 	add.w	r9, r9, #1
 8005230:	e7ee      	b.n	8005210 <_printf_float+0x2b8>
 8005232:	bf00      	nop
 8005234:	7fefffff 	.word	0x7fefffff
 8005238:	080078ec 	.word	0x080078ec
 800523c:	080078f0 	.word	0x080078f0
 8005240:	080078f8 	.word	0x080078f8
 8005244:	080078f4 	.word	0x080078f4
 8005248:	080078fc 	.word	0x080078fc
 800524c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800524e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005250:	429a      	cmp	r2, r3
 8005252:	bfa8      	it	ge
 8005254:	461a      	movge	r2, r3
 8005256:	2a00      	cmp	r2, #0
 8005258:	4691      	mov	r9, r2
 800525a:	dc37      	bgt.n	80052cc <_printf_float+0x374>
 800525c:	f04f 0b00 	mov.w	fp, #0
 8005260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005264:	f104 021a 	add.w	r2, r4, #26
 8005268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800526a:	9305      	str	r3, [sp, #20]
 800526c:	eba3 0309 	sub.w	r3, r3, r9
 8005270:	455b      	cmp	r3, fp
 8005272:	dc33      	bgt.n	80052dc <_printf_float+0x384>
 8005274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005278:	429a      	cmp	r2, r3
 800527a:	db3b      	blt.n	80052f4 <_printf_float+0x39c>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	07da      	lsls	r2, r3, #31
 8005280:	d438      	bmi.n	80052f4 <_printf_float+0x39c>
 8005282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005284:	9a05      	ldr	r2, [sp, #20]
 8005286:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005288:	1a9a      	subs	r2, r3, r2
 800528a:	eba3 0901 	sub.w	r9, r3, r1
 800528e:	4591      	cmp	r9, r2
 8005290:	bfa8      	it	ge
 8005292:	4691      	movge	r9, r2
 8005294:	f1b9 0f00 	cmp.w	r9, #0
 8005298:	dc35      	bgt.n	8005306 <_printf_float+0x3ae>
 800529a:	f04f 0800 	mov.w	r8, #0
 800529e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052a2:	f104 0a1a 	add.w	sl, r4, #26
 80052a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	eba3 0309 	sub.w	r3, r3, r9
 80052b0:	4543      	cmp	r3, r8
 80052b2:	f77f af79 	ble.w	80051a8 <_printf_float+0x250>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4652      	mov	r2, sl
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	f43f aeaa 	beq.w	800501a <_printf_float+0xc2>
 80052c6:	f108 0801 	add.w	r8, r8, #1
 80052ca:	e7ec      	b.n	80052a6 <_printf_float+0x34e>
 80052cc:	4613      	mov	r3, r2
 80052ce:	4631      	mov	r1, r6
 80052d0:	4642      	mov	r2, r8
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	d1c0      	bne.n	800525c <_printf_float+0x304>
 80052da:	e69e      	b.n	800501a <_printf_float+0xc2>
 80052dc:	2301      	movs	r3, #1
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	9205      	str	r2, [sp, #20]
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f ae97 	beq.w	800501a <_printf_float+0xc2>
 80052ec:	9a05      	ldr	r2, [sp, #20]
 80052ee:	f10b 0b01 	add.w	fp, fp, #1
 80052f2:	e7b9      	b.n	8005268 <_printf_float+0x310>
 80052f4:	ee18 3a10 	vmov	r3, s16
 80052f8:	4652      	mov	r2, sl
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	d1be      	bne.n	8005282 <_printf_float+0x32a>
 8005304:	e689      	b.n	800501a <_printf_float+0xc2>
 8005306:	9a05      	ldr	r2, [sp, #20]
 8005308:	464b      	mov	r3, r9
 800530a:	4442      	add	r2, r8
 800530c:	4631      	mov	r1, r6
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	d1c1      	bne.n	800529a <_printf_float+0x342>
 8005316:	e680      	b.n	800501a <_printf_float+0xc2>
 8005318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800531a:	2a01      	cmp	r2, #1
 800531c:	dc01      	bgt.n	8005322 <_printf_float+0x3ca>
 800531e:	07db      	lsls	r3, r3, #31
 8005320:	d538      	bpl.n	8005394 <_printf_float+0x43c>
 8005322:	2301      	movs	r3, #1
 8005324:	4642      	mov	r2, r8
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	f43f ae74 	beq.w	800501a <_printf_float+0xc2>
 8005332:	ee18 3a10 	vmov	r3, s16
 8005336:	4652      	mov	r2, sl
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f ae6b 	beq.w	800501a <_printf_float+0xc2>
 8005344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005348:	2200      	movs	r2, #0
 800534a:	2300      	movs	r3, #0
 800534c:	f7fb fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005350:	b9d8      	cbnz	r0, 800538a <_printf_float+0x432>
 8005352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005354:	f108 0201 	add.w	r2, r8, #1
 8005358:	3b01      	subs	r3, #1
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	d10e      	bne.n	8005382 <_printf_float+0x42a>
 8005364:	e659      	b.n	800501a <_printf_float+0xc2>
 8005366:	2301      	movs	r3, #1
 8005368:	4652      	mov	r2, sl
 800536a:	4631      	mov	r1, r6
 800536c:	4628      	mov	r0, r5
 800536e:	47b8      	blx	r7
 8005370:	3001      	adds	r0, #1
 8005372:	f43f ae52 	beq.w	800501a <_printf_float+0xc2>
 8005376:	f108 0801 	add.w	r8, r8, #1
 800537a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537c:	3b01      	subs	r3, #1
 800537e:	4543      	cmp	r3, r8
 8005380:	dcf1      	bgt.n	8005366 <_printf_float+0x40e>
 8005382:	464b      	mov	r3, r9
 8005384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005388:	e6dc      	b.n	8005144 <_printf_float+0x1ec>
 800538a:	f04f 0800 	mov.w	r8, #0
 800538e:	f104 0a1a 	add.w	sl, r4, #26
 8005392:	e7f2      	b.n	800537a <_printf_float+0x422>
 8005394:	2301      	movs	r3, #1
 8005396:	4642      	mov	r2, r8
 8005398:	e7df      	b.n	800535a <_printf_float+0x402>
 800539a:	2301      	movs	r3, #1
 800539c:	464a      	mov	r2, r9
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	f43f ae38 	beq.w	800501a <_printf_float+0xc2>
 80053aa:	f108 0801 	add.w	r8, r8, #1
 80053ae:	68e3      	ldr	r3, [r4, #12]
 80053b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053b2:	1a5b      	subs	r3, r3, r1
 80053b4:	4543      	cmp	r3, r8
 80053b6:	dcf0      	bgt.n	800539a <_printf_float+0x442>
 80053b8:	e6fa      	b.n	80051b0 <_printf_float+0x258>
 80053ba:	f04f 0800 	mov.w	r8, #0
 80053be:	f104 0919 	add.w	r9, r4, #25
 80053c2:	e7f4      	b.n	80053ae <_printf_float+0x456>

080053c4 <_printf_common>:
 80053c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c8:	4616      	mov	r6, r2
 80053ca:	4699      	mov	r9, r3
 80053cc:	688a      	ldr	r2, [r1, #8]
 80053ce:	690b      	ldr	r3, [r1, #16]
 80053d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053d4:	4293      	cmp	r3, r2
 80053d6:	bfb8      	it	lt
 80053d8:	4613      	movlt	r3, r2
 80053da:	6033      	str	r3, [r6, #0]
 80053dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053e0:	4607      	mov	r7, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	b10a      	cbz	r2, 80053ea <_printf_common+0x26>
 80053e6:	3301      	adds	r3, #1
 80053e8:	6033      	str	r3, [r6, #0]
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	0699      	lsls	r1, r3, #26
 80053ee:	bf42      	ittt	mi
 80053f0:	6833      	ldrmi	r3, [r6, #0]
 80053f2:	3302      	addmi	r3, #2
 80053f4:	6033      	strmi	r3, [r6, #0]
 80053f6:	6825      	ldr	r5, [r4, #0]
 80053f8:	f015 0506 	ands.w	r5, r5, #6
 80053fc:	d106      	bne.n	800540c <_printf_common+0x48>
 80053fe:	f104 0a19 	add.w	sl, r4, #25
 8005402:	68e3      	ldr	r3, [r4, #12]
 8005404:	6832      	ldr	r2, [r6, #0]
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	42ab      	cmp	r3, r5
 800540a:	dc26      	bgt.n	800545a <_printf_common+0x96>
 800540c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005410:	1e13      	subs	r3, r2, #0
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	bf18      	it	ne
 8005416:	2301      	movne	r3, #1
 8005418:	0692      	lsls	r2, r2, #26
 800541a:	d42b      	bmi.n	8005474 <_printf_common+0xb0>
 800541c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005420:	4649      	mov	r1, r9
 8005422:	4638      	mov	r0, r7
 8005424:	47c0      	blx	r8
 8005426:	3001      	adds	r0, #1
 8005428:	d01e      	beq.n	8005468 <_printf_common+0xa4>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	68e5      	ldr	r5, [r4, #12]
 800542e:	6832      	ldr	r2, [r6, #0]
 8005430:	f003 0306 	and.w	r3, r3, #6
 8005434:	2b04      	cmp	r3, #4
 8005436:	bf08      	it	eq
 8005438:	1aad      	subeq	r5, r5, r2
 800543a:	68a3      	ldr	r3, [r4, #8]
 800543c:	6922      	ldr	r2, [r4, #16]
 800543e:	bf0c      	ite	eq
 8005440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005444:	2500      	movne	r5, #0
 8005446:	4293      	cmp	r3, r2
 8005448:	bfc4      	itt	gt
 800544a:	1a9b      	subgt	r3, r3, r2
 800544c:	18ed      	addgt	r5, r5, r3
 800544e:	2600      	movs	r6, #0
 8005450:	341a      	adds	r4, #26
 8005452:	42b5      	cmp	r5, r6
 8005454:	d11a      	bne.n	800548c <_printf_common+0xc8>
 8005456:	2000      	movs	r0, #0
 8005458:	e008      	b.n	800546c <_printf_common+0xa8>
 800545a:	2301      	movs	r3, #1
 800545c:	4652      	mov	r2, sl
 800545e:	4649      	mov	r1, r9
 8005460:	4638      	mov	r0, r7
 8005462:	47c0      	blx	r8
 8005464:	3001      	adds	r0, #1
 8005466:	d103      	bne.n	8005470 <_printf_common+0xac>
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005470:	3501      	adds	r5, #1
 8005472:	e7c6      	b.n	8005402 <_printf_common+0x3e>
 8005474:	18e1      	adds	r1, r4, r3
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	2030      	movs	r0, #48	; 0x30
 800547a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800547e:	4422      	add	r2, r4
 8005480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005488:	3302      	adds	r3, #2
 800548a:	e7c7      	b.n	800541c <_printf_common+0x58>
 800548c:	2301      	movs	r3, #1
 800548e:	4622      	mov	r2, r4
 8005490:	4649      	mov	r1, r9
 8005492:	4638      	mov	r0, r7
 8005494:	47c0      	blx	r8
 8005496:	3001      	adds	r0, #1
 8005498:	d0e6      	beq.n	8005468 <_printf_common+0xa4>
 800549a:	3601      	adds	r6, #1
 800549c:	e7d9      	b.n	8005452 <_printf_common+0x8e>
	...

080054a0 <_printf_i>:
 80054a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	7e0f      	ldrb	r7, [r1, #24]
 80054a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054a8:	2f78      	cmp	r7, #120	; 0x78
 80054aa:	4691      	mov	r9, r2
 80054ac:	4680      	mov	r8, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	469a      	mov	sl, r3
 80054b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054b6:	d807      	bhi.n	80054c8 <_printf_i+0x28>
 80054b8:	2f62      	cmp	r7, #98	; 0x62
 80054ba:	d80a      	bhi.n	80054d2 <_printf_i+0x32>
 80054bc:	2f00      	cmp	r7, #0
 80054be:	f000 80d8 	beq.w	8005672 <_printf_i+0x1d2>
 80054c2:	2f58      	cmp	r7, #88	; 0x58
 80054c4:	f000 80a3 	beq.w	800560e <_printf_i+0x16e>
 80054c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054d0:	e03a      	b.n	8005548 <_printf_i+0xa8>
 80054d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054d6:	2b15      	cmp	r3, #21
 80054d8:	d8f6      	bhi.n	80054c8 <_printf_i+0x28>
 80054da:	a101      	add	r1, pc, #4	; (adr r1, 80054e0 <_printf_i+0x40>)
 80054dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054e0:	08005539 	.word	0x08005539
 80054e4:	0800554d 	.word	0x0800554d
 80054e8:	080054c9 	.word	0x080054c9
 80054ec:	080054c9 	.word	0x080054c9
 80054f0:	080054c9 	.word	0x080054c9
 80054f4:	080054c9 	.word	0x080054c9
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	080054c9 	.word	0x080054c9
 8005500:	080054c9 	.word	0x080054c9
 8005504:	080054c9 	.word	0x080054c9
 8005508:	080054c9 	.word	0x080054c9
 800550c:	08005659 	.word	0x08005659
 8005510:	0800557d 	.word	0x0800557d
 8005514:	0800563b 	.word	0x0800563b
 8005518:	080054c9 	.word	0x080054c9
 800551c:	080054c9 	.word	0x080054c9
 8005520:	0800567b 	.word	0x0800567b
 8005524:	080054c9 	.word	0x080054c9
 8005528:	0800557d 	.word	0x0800557d
 800552c:	080054c9 	.word	0x080054c9
 8005530:	080054c9 	.word	0x080054c9
 8005534:	08005643 	.word	0x08005643
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	602a      	str	r2, [r5, #0]
 8005540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005548:	2301      	movs	r3, #1
 800554a:	e0a3      	b.n	8005694 <_printf_i+0x1f4>
 800554c:	6820      	ldr	r0, [r4, #0]
 800554e:	6829      	ldr	r1, [r5, #0]
 8005550:	0606      	lsls	r6, r0, #24
 8005552:	f101 0304 	add.w	r3, r1, #4
 8005556:	d50a      	bpl.n	800556e <_printf_i+0xce>
 8005558:	680e      	ldr	r6, [r1, #0]
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	2e00      	cmp	r6, #0
 800555e:	da03      	bge.n	8005568 <_printf_i+0xc8>
 8005560:	232d      	movs	r3, #45	; 0x2d
 8005562:	4276      	negs	r6, r6
 8005564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005568:	485e      	ldr	r0, [pc, #376]	; (80056e4 <_printf_i+0x244>)
 800556a:	230a      	movs	r3, #10
 800556c:	e019      	b.n	80055a2 <_printf_i+0x102>
 800556e:	680e      	ldr	r6, [r1, #0]
 8005570:	602b      	str	r3, [r5, #0]
 8005572:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005576:	bf18      	it	ne
 8005578:	b236      	sxthne	r6, r6
 800557a:	e7ef      	b.n	800555c <_printf_i+0xbc>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	6820      	ldr	r0, [r4, #0]
 8005580:	1d19      	adds	r1, r3, #4
 8005582:	6029      	str	r1, [r5, #0]
 8005584:	0601      	lsls	r1, r0, #24
 8005586:	d501      	bpl.n	800558c <_printf_i+0xec>
 8005588:	681e      	ldr	r6, [r3, #0]
 800558a:	e002      	b.n	8005592 <_printf_i+0xf2>
 800558c:	0646      	lsls	r6, r0, #25
 800558e:	d5fb      	bpl.n	8005588 <_printf_i+0xe8>
 8005590:	881e      	ldrh	r6, [r3, #0]
 8005592:	4854      	ldr	r0, [pc, #336]	; (80056e4 <_printf_i+0x244>)
 8005594:	2f6f      	cmp	r7, #111	; 0x6f
 8005596:	bf0c      	ite	eq
 8005598:	2308      	moveq	r3, #8
 800559a:	230a      	movne	r3, #10
 800559c:	2100      	movs	r1, #0
 800559e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055a2:	6865      	ldr	r5, [r4, #4]
 80055a4:	60a5      	str	r5, [r4, #8]
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	bfa2      	ittt	ge
 80055aa:	6821      	ldrge	r1, [r4, #0]
 80055ac:	f021 0104 	bicge.w	r1, r1, #4
 80055b0:	6021      	strge	r1, [r4, #0]
 80055b2:	b90e      	cbnz	r6, 80055b8 <_printf_i+0x118>
 80055b4:	2d00      	cmp	r5, #0
 80055b6:	d04d      	beq.n	8005654 <_printf_i+0x1b4>
 80055b8:	4615      	mov	r5, r2
 80055ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80055be:	fb03 6711 	mls	r7, r3, r1, r6
 80055c2:	5dc7      	ldrb	r7, [r0, r7]
 80055c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055c8:	4637      	mov	r7, r6
 80055ca:	42bb      	cmp	r3, r7
 80055cc:	460e      	mov	r6, r1
 80055ce:	d9f4      	bls.n	80055ba <_printf_i+0x11a>
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d10b      	bne.n	80055ec <_printf_i+0x14c>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	07de      	lsls	r6, r3, #31
 80055d8:	d508      	bpl.n	80055ec <_printf_i+0x14c>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6861      	ldr	r1, [r4, #4]
 80055de:	4299      	cmp	r1, r3
 80055e0:	bfde      	ittt	le
 80055e2:	2330      	movle	r3, #48	; 0x30
 80055e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055ec:	1b52      	subs	r2, r2, r5
 80055ee:	6122      	str	r2, [r4, #16]
 80055f0:	f8cd a000 	str.w	sl, [sp]
 80055f4:	464b      	mov	r3, r9
 80055f6:	aa03      	add	r2, sp, #12
 80055f8:	4621      	mov	r1, r4
 80055fa:	4640      	mov	r0, r8
 80055fc:	f7ff fee2 	bl	80053c4 <_printf_common>
 8005600:	3001      	adds	r0, #1
 8005602:	d14c      	bne.n	800569e <_printf_i+0x1fe>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	b004      	add	sp, #16
 800560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560e:	4835      	ldr	r0, [pc, #212]	; (80056e4 <_printf_i+0x244>)
 8005610:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005614:	6829      	ldr	r1, [r5, #0]
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	f851 6b04 	ldr.w	r6, [r1], #4
 800561c:	6029      	str	r1, [r5, #0]
 800561e:	061d      	lsls	r5, r3, #24
 8005620:	d514      	bpl.n	800564c <_printf_i+0x1ac>
 8005622:	07df      	lsls	r7, r3, #31
 8005624:	bf44      	itt	mi
 8005626:	f043 0320 	orrmi.w	r3, r3, #32
 800562a:	6023      	strmi	r3, [r4, #0]
 800562c:	b91e      	cbnz	r6, 8005636 <_printf_i+0x196>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	f023 0320 	bic.w	r3, r3, #32
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	2310      	movs	r3, #16
 8005638:	e7b0      	b.n	800559c <_printf_i+0xfc>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	f043 0320 	orr.w	r3, r3, #32
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	2378      	movs	r3, #120	; 0x78
 8005644:	4828      	ldr	r0, [pc, #160]	; (80056e8 <_printf_i+0x248>)
 8005646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800564a:	e7e3      	b.n	8005614 <_printf_i+0x174>
 800564c:	0659      	lsls	r1, r3, #25
 800564e:	bf48      	it	mi
 8005650:	b2b6      	uxthmi	r6, r6
 8005652:	e7e6      	b.n	8005622 <_printf_i+0x182>
 8005654:	4615      	mov	r5, r2
 8005656:	e7bb      	b.n	80055d0 <_printf_i+0x130>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	6826      	ldr	r6, [r4, #0]
 800565c:	6961      	ldr	r1, [r4, #20]
 800565e:	1d18      	adds	r0, r3, #4
 8005660:	6028      	str	r0, [r5, #0]
 8005662:	0635      	lsls	r5, r6, #24
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	d501      	bpl.n	800566c <_printf_i+0x1cc>
 8005668:	6019      	str	r1, [r3, #0]
 800566a:	e002      	b.n	8005672 <_printf_i+0x1d2>
 800566c:	0670      	lsls	r0, r6, #25
 800566e:	d5fb      	bpl.n	8005668 <_printf_i+0x1c8>
 8005670:	8019      	strh	r1, [r3, #0]
 8005672:	2300      	movs	r3, #0
 8005674:	6123      	str	r3, [r4, #16]
 8005676:	4615      	mov	r5, r2
 8005678:	e7ba      	b.n	80055f0 <_printf_i+0x150>
 800567a:	682b      	ldr	r3, [r5, #0]
 800567c:	1d1a      	adds	r2, r3, #4
 800567e:	602a      	str	r2, [r5, #0]
 8005680:	681d      	ldr	r5, [r3, #0]
 8005682:	6862      	ldr	r2, [r4, #4]
 8005684:	2100      	movs	r1, #0
 8005686:	4628      	mov	r0, r5
 8005688:	f7fa fdaa 	bl	80001e0 <memchr>
 800568c:	b108      	cbz	r0, 8005692 <_printf_i+0x1f2>
 800568e:	1b40      	subs	r0, r0, r5
 8005690:	6060      	str	r0, [r4, #4]
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	6123      	str	r3, [r4, #16]
 8005696:	2300      	movs	r3, #0
 8005698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800569c:	e7a8      	b.n	80055f0 <_printf_i+0x150>
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	462a      	mov	r2, r5
 80056a2:	4649      	mov	r1, r9
 80056a4:	4640      	mov	r0, r8
 80056a6:	47d0      	blx	sl
 80056a8:	3001      	adds	r0, #1
 80056aa:	d0ab      	beq.n	8005604 <_printf_i+0x164>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	079b      	lsls	r3, r3, #30
 80056b0:	d413      	bmi.n	80056da <_printf_i+0x23a>
 80056b2:	68e0      	ldr	r0, [r4, #12]
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	4298      	cmp	r0, r3
 80056b8:	bfb8      	it	lt
 80056ba:	4618      	movlt	r0, r3
 80056bc:	e7a4      	b.n	8005608 <_printf_i+0x168>
 80056be:	2301      	movs	r3, #1
 80056c0:	4632      	mov	r2, r6
 80056c2:	4649      	mov	r1, r9
 80056c4:	4640      	mov	r0, r8
 80056c6:	47d0      	blx	sl
 80056c8:	3001      	adds	r0, #1
 80056ca:	d09b      	beq.n	8005604 <_printf_i+0x164>
 80056cc:	3501      	adds	r5, #1
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	9903      	ldr	r1, [sp, #12]
 80056d2:	1a5b      	subs	r3, r3, r1
 80056d4:	42ab      	cmp	r3, r5
 80056d6:	dcf2      	bgt.n	80056be <_printf_i+0x21e>
 80056d8:	e7eb      	b.n	80056b2 <_printf_i+0x212>
 80056da:	2500      	movs	r5, #0
 80056dc:	f104 0619 	add.w	r6, r4, #25
 80056e0:	e7f5      	b.n	80056ce <_printf_i+0x22e>
 80056e2:	bf00      	nop
 80056e4:	080078fe 	.word	0x080078fe
 80056e8:	0800790f 	.word	0x0800790f

080056ec <iprintf>:
 80056ec:	b40f      	push	{r0, r1, r2, r3}
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <iprintf+0x2c>)
 80056f0:	b513      	push	{r0, r1, r4, lr}
 80056f2:	681c      	ldr	r4, [r3, #0]
 80056f4:	b124      	cbz	r4, 8005700 <iprintf+0x14>
 80056f6:	69a3      	ldr	r3, [r4, #24]
 80056f8:	b913      	cbnz	r3, 8005700 <iprintf+0x14>
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 fee2 	bl	80064c4 <__sinit>
 8005700:	ab05      	add	r3, sp, #20
 8005702:	9a04      	ldr	r2, [sp, #16]
 8005704:	68a1      	ldr	r1, [r4, #8]
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	4620      	mov	r0, r4
 800570a:	f001 fc3b 	bl	8006f84 <_vfiprintf_r>
 800570e:	b002      	add	sp, #8
 8005710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005714:	b004      	add	sp, #16
 8005716:	4770      	bx	lr
 8005718:	20000014 	.word	0x20000014

0800571c <quorem>:
 800571c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005720:	6903      	ldr	r3, [r0, #16]
 8005722:	690c      	ldr	r4, [r1, #16]
 8005724:	42a3      	cmp	r3, r4
 8005726:	4607      	mov	r7, r0
 8005728:	f2c0 8081 	blt.w	800582e <quorem+0x112>
 800572c:	3c01      	subs	r4, #1
 800572e:	f101 0814 	add.w	r8, r1, #20
 8005732:	f100 0514 	add.w	r5, r0, #20
 8005736:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005740:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005744:	3301      	adds	r3, #1
 8005746:	429a      	cmp	r2, r3
 8005748:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800574c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005750:	fbb2 f6f3 	udiv	r6, r2, r3
 8005754:	d331      	bcc.n	80057ba <quorem+0x9e>
 8005756:	f04f 0e00 	mov.w	lr, #0
 800575a:	4640      	mov	r0, r8
 800575c:	46ac      	mov	ip, r5
 800575e:	46f2      	mov	sl, lr
 8005760:	f850 2b04 	ldr.w	r2, [r0], #4
 8005764:	b293      	uxth	r3, r2
 8005766:	fb06 e303 	mla	r3, r6, r3, lr
 800576a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800576e:	b29b      	uxth	r3, r3
 8005770:	ebaa 0303 	sub.w	r3, sl, r3
 8005774:	f8dc a000 	ldr.w	sl, [ip]
 8005778:	0c12      	lsrs	r2, r2, #16
 800577a:	fa13 f38a 	uxtah	r3, r3, sl
 800577e:	fb06 e202 	mla	r2, r6, r2, lr
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	9b00      	ldr	r3, [sp, #0]
 8005786:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800578a:	b292      	uxth	r2, r2
 800578c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005790:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005794:	f8bd 3000 	ldrh.w	r3, [sp]
 8005798:	4581      	cmp	r9, r0
 800579a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800579e:	f84c 3b04 	str.w	r3, [ip], #4
 80057a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057a6:	d2db      	bcs.n	8005760 <quorem+0x44>
 80057a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80057ac:	b92b      	cbnz	r3, 80057ba <quorem+0x9e>
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	429d      	cmp	r5, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	d32e      	bcc.n	8005816 <quorem+0xfa>
 80057b8:	613c      	str	r4, [r7, #16]
 80057ba:	4638      	mov	r0, r7
 80057bc:	f001 f9c0 	bl	8006b40 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	db24      	blt.n	800580e <quorem+0xf2>
 80057c4:	3601      	adds	r6, #1
 80057c6:	4628      	mov	r0, r5
 80057c8:	f04f 0c00 	mov.w	ip, #0
 80057cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80057d0:	f8d0 e000 	ldr.w	lr, [r0]
 80057d4:	b293      	uxth	r3, r2
 80057d6:	ebac 0303 	sub.w	r3, ip, r3
 80057da:	0c12      	lsrs	r2, r2, #16
 80057dc:	fa13 f38e 	uxtah	r3, r3, lr
 80057e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80057e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057ee:	45c1      	cmp	r9, r8
 80057f0:	f840 3b04 	str.w	r3, [r0], #4
 80057f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057f8:	d2e8      	bcs.n	80057cc <quorem+0xb0>
 80057fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005802:	b922      	cbnz	r2, 800580e <quorem+0xf2>
 8005804:	3b04      	subs	r3, #4
 8005806:	429d      	cmp	r5, r3
 8005808:	461a      	mov	r2, r3
 800580a:	d30a      	bcc.n	8005822 <quorem+0x106>
 800580c:	613c      	str	r4, [r7, #16]
 800580e:	4630      	mov	r0, r6
 8005810:	b003      	add	sp, #12
 8005812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	3b04      	subs	r3, #4
 800581a:	2a00      	cmp	r2, #0
 800581c:	d1cc      	bne.n	80057b8 <quorem+0x9c>
 800581e:	3c01      	subs	r4, #1
 8005820:	e7c7      	b.n	80057b2 <quorem+0x96>
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	3b04      	subs	r3, #4
 8005826:	2a00      	cmp	r2, #0
 8005828:	d1f0      	bne.n	800580c <quorem+0xf0>
 800582a:	3c01      	subs	r4, #1
 800582c:	e7eb      	b.n	8005806 <quorem+0xea>
 800582e:	2000      	movs	r0, #0
 8005830:	e7ee      	b.n	8005810 <quorem+0xf4>
 8005832:	0000      	movs	r0, r0
 8005834:	0000      	movs	r0, r0
	...

08005838 <_dtoa_r>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	ed2d 8b04 	vpush	{d8-d9}
 8005840:	ec57 6b10 	vmov	r6, r7, d0
 8005844:	b093      	sub	sp, #76	; 0x4c
 8005846:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005848:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800584c:	9106      	str	r1, [sp, #24]
 800584e:	ee10 aa10 	vmov	sl, s0
 8005852:	4604      	mov	r4, r0
 8005854:	9209      	str	r2, [sp, #36]	; 0x24
 8005856:	930c      	str	r3, [sp, #48]	; 0x30
 8005858:	46bb      	mov	fp, r7
 800585a:	b975      	cbnz	r5, 800587a <_dtoa_r+0x42>
 800585c:	2010      	movs	r0, #16
 800585e:	f000 fed7 	bl	8006610 <malloc>
 8005862:	4602      	mov	r2, r0
 8005864:	6260      	str	r0, [r4, #36]	; 0x24
 8005866:	b920      	cbnz	r0, 8005872 <_dtoa_r+0x3a>
 8005868:	4ba7      	ldr	r3, [pc, #668]	; (8005b08 <_dtoa_r+0x2d0>)
 800586a:	21ea      	movs	r1, #234	; 0xea
 800586c:	48a7      	ldr	r0, [pc, #668]	; (8005b0c <_dtoa_r+0x2d4>)
 800586e:	f001 fddf 	bl	8007430 <__assert_func>
 8005872:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005876:	6005      	str	r5, [r0, #0]
 8005878:	60c5      	str	r5, [r0, #12]
 800587a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800587c:	6819      	ldr	r1, [r3, #0]
 800587e:	b151      	cbz	r1, 8005896 <_dtoa_r+0x5e>
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	604a      	str	r2, [r1, #4]
 8005884:	2301      	movs	r3, #1
 8005886:	4093      	lsls	r3, r2
 8005888:	608b      	str	r3, [r1, #8]
 800588a:	4620      	mov	r0, r4
 800588c:	f000 ff16 	bl	80066bc <_Bfree>
 8005890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	1e3b      	subs	r3, r7, #0
 8005898:	bfaa      	itet	ge
 800589a:	2300      	movge	r3, #0
 800589c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80058a0:	f8c8 3000 	strge.w	r3, [r8]
 80058a4:	4b9a      	ldr	r3, [pc, #616]	; (8005b10 <_dtoa_r+0x2d8>)
 80058a6:	bfbc      	itt	lt
 80058a8:	2201      	movlt	r2, #1
 80058aa:	f8c8 2000 	strlt.w	r2, [r8]
 80058ae:	ea33 030b 	bics.w	r3, r3, fp
 80058b2:	d11b      	bne.n	80058ec <_dtoa_r+0xb4>
 80058b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058c0:	4333      	orrs	r3, r6
 80058c2:	f000 8592 	beq.w	80063ea <_dtoa_r+0xbb2>
 80058c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058c8:	b963      	cbnz	r3, 80058e4 <_dtoa_r+0xac>
 80058ca:	4b92      	ldr	r3, [pc, #584]	; (8005b14 <_dtoa_r+0x2dc>)
 80058cc:	e022      	b.n	8005914 <_dtoa_r+0xdc>
 80058ce:	4b92      	ldr	r3, [pc, #584]	; (8005b18 <_dtoa_r+0x2e0>)
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	3308      	adds	r3, #8
 80058d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	9801      	ldr	r0, [sp, #4]
 80058da:	b013      	add	sp, #76	; 0x4c
 80058dc:	ecbd 8b04 	vpop	{d8-d9}
 80058e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e4:	4b8b      	ldr	r3, [pc, #556]	; (8005b14 <_dtoa_r+0x2dc>)
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	3303      	adds	r3, #3
 80058ea:	e7f3      	b.n	80058d4 <_dtoa_r+0x9c>
 80058ec:	2200      	movs	r2, #0
 80058ee:	2300      	movs	r3, #0
 80058f0:	4650      	mov	r0, sl
 80058f2:	4659      	mov	r1, fp
 80058f4:	f7fb f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f8:	ec4b ab19 	vmov	d9, sl, fp
 80058fc:	4680      	mov	r8, r0
 80058fe:	b158      	cbz	r0, 8005918 <_dtoa_r+0xe0>
 8005900:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005902:	2301      	movs	r3, #1
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 856b 	beq.w	80063e4 <_dtoa_r+0xbac>
 800590e:	4883      	ldr	r0, [pc, #524]	; (8005b1c <_dtoa_r+0x2e4>)
 8005910:	6018      	str	r0, [r3, #0]
 8005912:	1e43      	subs	r3, r0, #1
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	e7df      	b.n	80058d8 <_dtoa_r+0xa0>
 8005918:	ec4b ab10 	vmov	d0, sl, fp
 800591c:	aa10      	add	r2, sp, #64	; 0x40
 800591e:	a911      	add	r1, sp, #68	; 0x44
 8005920:	4620      	mov	r0, r4
 8005922:	f001 f9b3 	bl	8006c8c <__d2b>
 8005926:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800592a:	ee08 0a10 	vmov	s16, r0
 800592e:	2d00      	cmp	r5, #0
 8005930:	f000 8084 	beq.w	8005a3c <_dtoa_r+0x204>
 8005934:	ee19 3a90 	vmov	r3, s19
 8005938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800593c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005940:	4656      	mov	r6, sl
 8005942:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005946:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800594a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800594e:	4b74      	ldr	r3, [pc, #464]	; (8005b20 <_dtoa_r+0x2e8>)
 8005950:	2200      	movs	r2, #0
 8005952:	4630      	mov	r0, r6
 8005954:	4639      	mov	r1, r7
 8005956:	f7fa fc97 	bl	8000288 <__aeabi_dsub>
 800595a:	a365      	add	r3, pc, #404	; (adr r3, 8005af0 <_dtoa_r+0x2b8>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	f7fa fe4a 	bl	80005f8 <__aeabi_dmul>
 8005964:	a364      	add	r3, pc, #400	; (adr r3, 8005af8 <_dtoa_r+0x2c0>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f7fa fc8f 	bl	800028c <__adddf3>
 800596e:	4606      	mov	r6, r0
 8005970:	4628      	mov	r0, r5
 8005972:	460f      	mov	r7, r1
 8005974:	f7fa fdd6 	bl	8000524 <__aeabi_i2d>
 8005978:	a361      	add	r3, pc, #388	; (adr r3, 8005b00 <_dtoa_r+0x2c8>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fa fe3b 	bl	80005f8 <__aeabi_dmul>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4630      	mov	r0, r6
 8005988:	4639      	mov	r1, r7
 800598a:	f7fa fc7f 	bl	800028c <__adddf3>
 800598e:	4606      	mov	r6, r0
 8005990:	460f      	mov	r7, r1
 8005992:	f7fb f8e1 	bl	8000b58 <__aeabi_d2iz>
 8005996:	2200      	movs	r2, #0
 8005998:	9000      	str	r0, [sp, #0]
 800599a:	2300      	movs	r3, #0
 800599c:	4630      	mov	r0, r6
 800599e:	4639      	mov	r1, r7
 80059a0:	f7fb f89c 	bl	8000adc <__aeabi_dcmplt>
 80059a4:	b150      	cbz	r0, 80059bc <_dtoa_r+0x184>
 80059a6:	9800      	ldr	r0, [sp, #0]
 80059a8:	f7fa fdbc 	bl	8000524 <__aeabi_i2d>
 80059ac:	4632      	mov	r2, r6
 80059ae:	463b      	mov	r3, r7
 80059b0:	f7fb f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80059b4:	b910      	cbnz	r0, 80059bc <_dtoa_r+0x184>
 80059b6:	9b00      	ldr	r3, [sp, #0]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	9b00      	ldr	r3, [sp, #0]
 80059be:	2b16      	cmp	r3, #22
 80059c0:	d85a      	bhi.n	8005a78 <_dtoa_r+0x240>
 80059c2:	9a00      	ldr	r2, [sp, #0]
 80059c4:	4b57      	ldr	r3, [pc, #348]	; (8005b24 <_dtoa_r+0x2ec>)
 80059c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	ec51 0b19 	vmov	r0, r1, d9
 80059d2:	f7fb f883 	bl	8000adc <__aeabi_dcmplt>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d050      	beq.n	8005a7c <_dtoa_r+0x244>
 80059da:	9b00      	ldr	r3, [sp, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2300      	movs	r3, #0
 80059e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80059e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059e6:	1b5d      	subs	r5, r3, r5
 80059e8:	1e6b      	subs	r3, r5, #1
 80059ea:	9305      	str	r3, [sp, #20]
 80059ec:	bf45      	ittet	mi
 80059ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80059f2:	9304      	strmi	r3, [sp, #16]
 80059f4:	2300      	movpl	r3, #0
 80059f6:	2300      	movmi	r3, #0
 80059f8:	bf4c      	ite	mi
 80059fa:	9305      	strmi	r3, [sp, #20]
 80059fc:	9304      	strpl	r3, [sp, #16]
 80059fe:	9b00      	ldr	r3, [sp, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db3d      	blt.n	8005a80 <_dtoa_r+0x248>
 8005a04:	9b05      	ldr	r3, [sp, #20]
 8005a06:	9a00      	ldr	r2, [sp, #0]
 8005a08:	920a      	str	r2, [sp, #40]	; 0x28
 8005a0a:	4413      	add	r3, r2
 8005a0c:	9305      	str	r3, [sp, #20]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	9307      	str	r3, [sp, #28]
 8005a12:	9b06      	ldr	r3, [sp, #24]
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	f200 8089 	bhi.w	8005b2c <_dtoa_r+0x2f4>
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	bfc4      	itt	gt
 8005a1e:	3b04      	subgt	r3, #4
 8005a20:	9306      	strgt	r3, [sp, #24]
 8005a22:	9b06      	ldr	r3, [sp, #24]
 8005a24:	f1a3 0302 	sub.w	r3, r3, #2
 8005a28:	bfcc      	ite	gt
 8005a2a:	2500      	movgt	r5, #0
 8005a2c:	2501      	movle	r5, #1
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	f200 8087 	bhi.w	8005b42 <_dtoa_r+0x30a>
 8005a34:	e8df f003 	tbb	[pc, r3]
 8005a38:	59383a2d 	.word	0x59383a2d
 8005a3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005a40:	441d      	add	r5, r3
 8005a42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	bfc1      	itttt	gt
 8005a4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005a52:	fa0b f303 	lslgt.w	r3, fp, r3
 8005a56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a5a:	bfda      	itte	le
 8005a5c:	f1c3 0320 	rsble	r3, r3, #32
 8005a60:	fa06 f003 	lslle.w	r0, r6, r3
 8005a64:	4318      	orrgt	r0, r3
 8005a66:	f7fa fd4d 	bl	8000504 <__aeabi_ui2d>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005a72:	3d01      	subs	r5, #1
 8005a74:	930e      	str	r3, [sp, #56]	; 0x38
 8005a76:	e76a      	b.n	800594e <_dtoa_r+0x116>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e7b2      	b.n	80059e2 <_dtoa_r+0x1aa>
 8005a7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005a7e:	e7b1      	b.n	80059e4 <_dtoa_r+0x1ac>
 8005a80:	9b04      	ldr	r3, [sp, #16]
 8005a82:	9a00      	ldr	r2, [sp, #0]
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	9304      	str	r3, [sp, #16]
 8005a88:	4253      	negs	r3, r2
 8005a8a:	9307      	str	r3, [sp, #28]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a90:	e7bf      	b.n	8005a12 <_dtoa_r+0x1da>
 8005a92:	2300      	movs	r3, #0
 8005a94:	9308      	str	r3, [sp, #32]
 8005a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	dc55      	bgt.n	8005b48 <_dtoa_r+0x310>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8005aa6:	e00c      	b.n	8005ac2 <_dtoa_r+0x28a>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e7f3      	b.n	8005a94 <_dtoa_r+0x25c>
 8005aac:	2300      	movs	r3, #0
 8005aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab0:	9308      	str	r3, [sp, #32]
 8005ab2:	9b00      	ldr	r3, [sp, #0]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	9302      	str	r3, [sp, #8]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	9303      	str	r3, [sp, #12]
 8005abe:	bfb8      	it	lt
 8005ac0:	2301      	movlt	r3, #1
 8005ac2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	6042      	str	r2, [r0, #4]
 8005ac8:	2204      	movs	r2, #4
 8005aca:	f102 0614 	add.w	r6, r2, #20
 8005ace:	429e      	cmp	r6, r3
 8005ad0:	6841      	ldr	r1, [r0, #4]
 8005ad2:	d93d      	bls.n	8005b50 <_dtoa_r+0x318>
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fdb1 	bl	800663c <_Balloc>
 8005ada:	9001      	str	r0, [sp, #4]
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d13b      	bne.n	8005b58 <_dtoa_r+0x320>
 8005ae0:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <_dtoa_r+0x2f0>)
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ae8:	e6c0      	b.n	800586c <_dtoa_r+0x34>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e7df      	b.n	8005aae <_dtoa_r+0x276>
 8005aee:	bf00      	nop
 8005af0:	636f4361 	.word	0x636f4361
 8005af4:	3fd287a7 	.word	0x3fd287a7
 8005af8:	8b60c8b3 	.word	0x8b60c8b3
 8005afc:	3fc68a28 	.word	0x3fc68a28
 8005b00:	509f79fb 	.word	0x509f79fb
 8005b04:	3fd34413 	.word	0x3fd34413
 8005b08:	0800792d 	.word	0x0800792d
 8005b0c:	08007944 	.word	0x08007944
 8005b10:	7ff00000 	.word	0x7ff00000
 8005b14:	08007929 	.word	0x08007929
 8005b18:	08007920 	.word	0x08007920
 8005b1c:	080078fd 	.word	0x080078fd
 8005b20:	3ff80000 	.word	0x3ff80000
 8005b24:	08007a98 	.word	0x08007a98
 8005b28:	0800799f 	.word	0x0800799f
 8005b2c:	2501      	movs	r5, #1
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9306      	str	r3, [sp, #24]
 8005b32:	9508      	str	r5, [sp, #32]
 8005b34:	f04f 33ff 	mov.w	r3, #4294967295
 8005b38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2312      	movs	r3, #18
 8005b40:	e7b0      	b.n	8005aa4 <_dtoa_r+0x26c>
 8005b42:	2301      	movs	r3, #1
 8005b44:	9308      	str	r3, [sp, #32]
 8005b46:	e7f5      	b.n	8005b34 <_dtoa_r+0x2fc>
 8005b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b4e:	e7b8      	b.n	8005ac2 <_dtoa_r+0x28a>
 8005b50:	3101      	adds	r1, #1
 8005b52:	6041      	str	r1, [r0, #4]
 8005b54:	0052      	lsls	r2, r2, #1
 8005b56:	e7b8      	b.n	8005aca <_dtoa_r+0x292>
 8005b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b5a:	9a01      	ldr	r2, [sp, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	9b03      	ldr	r3, [sp, #12]
 8005b60:	2b0e      	cmp	r3, #14
 8005b62:	f200 809d 	bhi.w	8005ca0 <_dtoa_r+0x468>
 8005b66:	2d00      	cmp	r5, #0
 8005b68:	f000 809a 	beq.w	8005ca0 <_dtoa_r+0x468>
 8005b6c:	9b00      	ldr	r3, [sp, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dd32      	ble.n	8005bd8 <_dtoa_r+0x3a0>
 8005b72:	4ab7      	ldr	r2, [pc, #732]	; (8005e50 <_dtoa_r+0x618>)
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b80:	9b00      	ldr	r3, [sp, #0]
 8005b82:	05d8      	lsls	r0, r3, #23
 8005b84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005b88:	d516      	bpl.n	8005bb8 <_dtoa_r+0x380>
 8005b8a:	4bb2      	ldr	r3, [pc, #712]	; (8005e54 <_dtoa_r+0x61c>)
 8005b8c:	ec51 0b19 	vmov	r0, r1, d9
 8005b90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b94:	f7fa fe5a 	bl	800084c <__aeabi_ddiv>
 8005b98:	f007 070f 	and.w	r7, r7, #15
 8005b9c:	4682      	mov	sl, r0
 8005b9e:	468b      	mov	fp, r1
 8005ba0:	2503      	movs	r5, #3
 8005ba2:	4eac      	ldr	r6, [pc, #688]	; (8005e54 <_dtoa_r+0x61c>)
 8005ba4:	b957      	cbnz	r7, 8005bbc <_dtoa_r+0x384>
 8005ba6:	4642      	mov	r2, r8
 8005ba8:	464b      	mov	r3, r9
 8005baa:	4650      	mov	r0, sl
 8005bac:	4659      	mov	r1, fp
 8005bae:	f7fa fe4d 	bl	800084c <__aeabi_ddiv>
 8005bb2:	4682      	mov	sl, r0
 8005bb4:	468b      	mov	fp, r1
 8005bb6:	e028      	b.n	8005c0a <_dtoa_r+0x3d2>
 8005bb8:	2502      	movs	r5, #2
 8005bba:	e7f2      	b.n	8005ba2 <_dtoa_r+0x36a>
 8005bbc:	07f9      	lsls	r1, r7, #31
 8005bbe:	d508      	bpl.n	8005bd2 <_dtoa_r+0x39a>
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bc8:	f7fa fd16 	bl	80005f8 <__aeabi_dmul>
 8005bcc:	3501      	adds	r5, #1
 8005bce:	4680      	mov	r8, r0
 8005bd0:	4689      	mov	r9, r1
 8005bd2:	107f      	asrs	r7, r7, #1
 8005bd4:	3608      	adds	r6, #8
 8005bd6:	e7e5      	b.n	8005ba4 <_dtoa_r+0x36c>
 8005bd8:	f000 809b 	beq.w	8005d12 <_dtoa_r+0x4da>
 8005bdc:	9b00      	ldr	r3, [sp, #0]
 8005bde:	4f9d      	ldr	r7, [pc, #628]	; (8005e54 <_dtoa_r+0x61c>)
 8005be0:	425e      	negs	r6, r3
 8005be2:	4b9b      	ldr	r3, [pc, #620]	; (8005e50 <_dtoa_r+0x618>)
 8005be4:	f006 020f 	and.w	r2, r6, #15
 8005be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	ec51 0b19 	vmov	r0, r1, d9
 8005bf4:	f7fa fd00 	bl	80005f8 <__aeabi_dmul>
 8005bf8:	1136      	asrs	r6, r6, #4
 8005bfa:	4682      	mov	sl, r0
 8005bfc:	468b      	mov	fp, r1
 8005bfe:	2300      	movs	r3, #0
 8005c00:	2502      	movs	r5, #2
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	d17a      	bne.n	8005cfc <_dtoa_r+0x4c4>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1d3      	bne.n	8005bb2 <_dtoa_r+0x37a>
 8005c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8082 	beq.w	8005d16 <_dtoa_r+0x4de>
 8005c12:	4b91      	ldr	r3, [pc, #580]	; (8005e58 <_dtoa_r+0x620>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	4650      	mov	r0, sl
 8005c18:	4659      	mov	r1, fp
 8005c1a:	f7fa ff5f 	bl	8000adc <__aeabi_dcmplt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d079      	beq.n	8005d16 <_dtoa_r+0x4de>
 8005c22:	9b03      	ldr	r3, [sp, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d076      	beq.n	8005d16 <_dtoa_r+0x4de>
 8005c28:	9b02      	ldr	r3, [sp, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dd36      	ble.n	8005c9c <_dtoa_r+0x464>
 8005c2e:	9b00      	ldr	r3, [sp, #0]
 8005c30:	4650      	mov	r0, sl
 8005c32:	4659      	mov	r1, fp
 8005c34:	1e5f      	subs	r7, r3, #1
 8005c36:	2200      	movs	r2, #0
 8005c38:	4b88      	ldr	r3, [pc, #544]	; (8005e5c <_dtoa_r+0x624>)
 8005c3a:	f7fa fcdd 	bl	80005f8 <__aeabi_dmul>
 8005c3e:	9e02      	ldr	r6, [sp, #8]
 8005c40:	4682      	mov	sl, r0
 8005c42:	468b      	mov	fp, r1
 8005c44:	3501      	adds	r5, #1
 8005c46:	4628      	mov	r0, r5
 8005c48:	f7fa fc6c 	bl	8000524 <__aeabi_i2d>
 8005c4c:	4652      	mov	r2, sl
 8005c4e:	465b      	mov	r3, fp
 8005c50:	f7fa fcd2 	bl	80005f8 <__aeabi_dmul>
 8005c54:	4b82      	ldr	r3, [pc, #520]	; (8005e60 <_dtoa_r+0x628>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	f7fa fb18 	bl	800028c <__adddf3>
 8005c5c:	46d0      	mov	r8, sl
 8005c5e:	46d9      	mov	r9, fp
 8005c60:	4682      	mov	sl, r0
 8005c62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005c66:	2e00      	cmp	r6, #0
 8005c68:	d158      	bne.n	8005d1c <_dtoa_r+0x4e4>
 8005c6a:	4b7e      	ldr	r3, [pc, #504]	; (8005e64 <_dtoa_r+0x62c>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4640      	mov	r0, r8
 8005c70:	4649      	mov	r1, r9
 8005c72:	f7fa fb09 	bl	8000288 <__aeabi_dsub>
 8005c76:	4652      	mov	r2, sl
 8005c78:	465b      	mov	r3, fp
 8005c7a:	4680      	mov	r8, r0
 8005c7c:	4689      	mov	r9, r1
 8005c7e:	f7fa ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f040 8295 	bne.w	80061b2 <_dtoa_r+0x97a>
 8005c88:	4652      	mov	r2, sl
 8005c8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c8e:	4640      	mov	r0, r8
 8005c90:	4649      	mov	r1, r9
 8005c92:	f7fa ff23 	bl	8000adc <__aeabi_dcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f040 8289 	bne.w	80061ae <_dtoa_r+0x976>
 8005c9c:	ec5b ab19 	vmov	sl, fp, d9
 8005ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f2c0 8148 	blt.w	8005f38 <_dtoa_r+0x700>
 8005ca8:	9a00      	ldr	r2, [sp, #0]
 8005caa:	2a0e      	cmp	r2, #14
 8005cac:	f300 8144 	bgt.w	8005f38 <_dtoa_r+0x700>
 8005cb0:	4b67      	ldr	r3, [pc, #412]	; (8005e50 <_dtoa_r+0x618>)
 8005cb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f280 80d5 	bge.w	8005e6c <_dtoa_r+0x634>
 8005cc2:	9b03      	ldr	r3, [sp, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f300 80d1 	bgt.w	8005e6c <_dtoa_r+0x634>
 8005cca:	f040 826f 	bne.w	80061ac <_dtoa_r+0x974>
 8005cce:	4b65      	ldr	r3, [pc, #404]	; (8005e64 <_dtoa_r+0x62c>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	f7fa fc8f 	bl	80005f8 <__aeabi_dmul>
 8005cda:	4652      	mov	r2, sl
 8005cdc:	465b      	mov	r3, fp
 8005cde:	f7fa ff11 	bl	8000b04 <__aeabi_dcmpge>
 8005ce2:	9e03      	ldr	r6, [sp, #12]
 8005ce4:	4637      	mov	r7, r6
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	f040 8245 	bne.w	8006176 <_dtoa_r+0x93e>
 8005cec:	9d01      	ldr	r5, [sp, #4]
 8005cee:	2331      	movs	r3, #49	; 0x31
 8005cf0:	f805 3b01 	strb.w	r3, [r5], #1
 8005cf4:	9b00      	ldr	r3, [sp, #0]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	e240      	b.n	800617e <_dtoa_r+0x946>
 8005cfc:	07f2      	lsls	r2, r6, #31
 8005cfe:	d505      	bpl.n	8005d0c <_dtoa_r+0x4d4>
 8005d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d04:	f7fa fc78 	bl	80005f8 <__aeabi_dmul>
 8005d08:	3501      	adds	r5, #1
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	1076      	asrs	r6, r6, #1
 8005d0e:	3708      	adds	r7, #8
 8005d10:	e777      	b.n	8005c02 <_dtoa_r+0x3ca>
 8005d12:	2502      	movs	r5, #2
 8005d14:	e779      	b.n	8005c0a <_dtoa_r+0x3d2>
 8005d16:	9f00      	ldr	r7, [sp, #0]
 8005d18:	9e03      	ldr	r6, [sp, #12]
 8005d1a:	e794      	b.n	8005c46 <_dtoa_r+0x40e>
 8005d1c:	9901      	ldr	r1, [sp, #4]
 8005d1e:	4b4c      	ldr	r3, [pc, #304]	; (8005e50 <_dtoa_r+0x618>)
 8005d20:	4431      	add	r1, r6
 8005d22:	910d      	str	r1, [sp, #52]	; 0x34
 8005d24:	9908      	ldr	r1, [sp, #32]
 8005d26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d2e:	2900      	cmp	r1, #0
 8005d30:	d043      	beq.n	8005dba <_dtoa_r+0x582>
 8005d32:	494d      	ldr	r1, [pc, #308]	; (8005e68 <_dtoa_r+0x630>)
 8005d34:	2000      	movs	r0, #0
 8005d36:	f7fa fd89 	bl	800084c <__aeabi_ddiv>
 8005d3a:	4652      	mov	r2, sl
 8005d3c:	465b      	mov	r3, fp
 8005d3e:	f7fa faa3 	bl	8000288 <__aeabi_dsub>
 8005d42:	9d01      	ldr	r5, [sp, #4]
 8005d44:	4682      	mov	sl, r0
 8005d46:	468b      	mov	fp, r1
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	f7fa ff04 	bl	8000b58 <__aeabi_d2iz>
 8005d50:	4606      	mov	r6, r0
 8005d52:	f7fa fbe7 	bl	8000524 <__aeabi_i2d>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	f7fa fa93 	bl	8000288 <__aeabi_dsub>
 8005d62:	3630      	adds	r6, #48	; 0x30
 8005d64:	f805 6b01 	strb.w	r6, [r5], #1
 8005d68:	4652      	mov	r2, sl
 8005d6a:	465b      	mov	r3, fp
 8005d6c:	4680      	mov	r8, r0
 8005d6e:	4689      	mov	r9, r1
 8005d70:	f7fa feb4 	bl	8000adc <__aeabi_dcmplt>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d163      	bne.n	8005e40 <_dtoa_r+0x608>
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	4936      	ldr	r1, [pc, #216]	; (8005e58 <_dtoa_r+0x620>)
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f7fa fa82 	bl	8000288 <__aeabi_dsub>
 8005d84:	4652      	mov	r2, sl
 8005d86:	465b      	mov	r3, fp
 8005d88:	f7fa fea8 	bl	8000adc <__aeabi_dcmplt>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	f040 80b5 	bne.w	8005efc <_dtoa_r+0x6c4>
 8005d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d94:	429d      	cmp	r5, r3
 8005d96:	d081      	beq.n	8005c9c <_dtoa_r+0x464>
 8005d98:	4b30      	ldr	r3, [pc, #192]	; (8005e5c <_dtoa_r+0x624>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	4659      	mov	r1, fp
 8005da0:	f7fa fc2a 	bl	80005f8 <__aeabi_dmul>
 8005da4:	4b2d      	ldr	r3, [pc, #180]	; (8005e5c <_dtoa_r+0x624>)
 8005da6:	4682      	mov	sl, r0
 8005da8:	468b      	mov	fp, r1
 8005daa:	4640      	mov	r0, r8
 8005dac:	4649      	mov	r1, r9
 8005dae:	2200      	movs	r2, #0
 8005db0:	f7fa fc22 	bl	80005f8 <__aeabi_dmul>
 8005db4:	4680      	mov	r8, r0
 8005db6:	4689      	mov	r9, r1
 8005db8:	e7c6      	b.n	8005d48 <_dtoa_r+0x510>
 8005dba:	4650      	mov	r0, sl
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	f7fa fc1b 	bl	80005f8 <__aeabi_dmul>
 8005dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dc4:	9d01      	ldr	r5, [sp, #4]
 8005dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dc8:	4682      	mov	sl, r0
 8005dca:	468b      	mov	fp, r1
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4640      	mov	r0, r8
 8005dd0:	f7fa fec2 	bl	8000b58 <__aeabi_d2iz>
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	f7fa fba5 	bl	8000524 <__aeabi_i2d>
 8005dda:	3630      	adds	r6, #48	; 0x30
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4640      	mov	r0, r8
 8005de2:	4649      	mov	r1, r9
 8005de4:	f7fa fa50 	bl	8000288 <__aeabi_dsub>
 8005de8:	f805 6b01 	strb.w	r6, [r5], #1
 8005dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dee:	429d      	cmp	r5, r3
 8005df0:	4680      	mov	r8, r0
 8005df2:	4689      	mov	r9, r1
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	d124      	bne.n	8005e44 <_dtoa_r+0x60c>
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <_dtoa_r+0x630>)
 8005dfc:	4650      	mov	r0, sl
 8005dfe:	4659      	mov	r1, fp
 8005e00:	f7fa fa44 	bl	800028c <__adddf3>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	f7fa fe84 	bl	8000b18 <__aeabi_dcmpgt>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d173      	bne.n	8005efc <_dtoa_r+0x6c4>
 8005e14:	4652      	mov	r2, sl
 8005e16:	465b      	mov	r3, fp
 8005e18:	4913      	ldr	r1, [pc, #76]	; (8005e68 <_dtoa_r+0x630>)
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f7fa fa34 	bl	8000288 <__aeabi_dsub>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4640      	mov	r0, r8
 8005e26:	4649      	mov	r1, r9
 8005e28:	f7fa fe58 	bl	8000adc <__aeabi_dcmplt>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	f43f af35 	beq.w	8005c9c <_dtoa_r+0x464>
 8005e32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e34:	1e6b      	subs	r3, r5, #1
 8005e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e3c:	2b30      	cmp	r3, #48	; 0x30
 8005e3e:	d0f8      	beq.n	8005e32 <_dtoa_r+0x5fa>
 8005e40:	9700      	str	r7, [sp, #0]
 8005e42:	e049      	b.n	8005ed8 <_dtoa_r+0x6a0>
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <_dtoa_r+0x624>)
 8005e46:	f7fa fbd7 	bl	80005f8 <__aeabi_dmul>
 8005e4a:	4680      	mov	r8, r0
 8005e4c:	4689      	mov	r9, r1
 8005e4e:	e7bd      	b.n	8005dcc <_dtoa_r+0x594>
 8005e50:	08007a98 	.word	0x08007a98
 8005e54:	08007a70 	.word	0x08007a70
 8005e58:	3ff00000 	.word	0x3ff00000
 8005e5c:	40240000 	.word	0x40240000
 8005e60:	401c0000 	.word	0x401c0000
 8005e64:	40140000 	.word	0x40140000
 8005e68:	3fe00000 	.word	0x3fe00000
 8005e6c:	9d01      	ldr	r5, [sp, #4]
 8005e6e:	4656      	mov	r6, sl
 8005e70:	465f      	mov	r7, fp
 8005e72:	4642      	mov	r2, r8
 8005e74:	464b      	mov	r3, r9
 8005e76:	4630      	mov	r0, r6
 8005e78:	4639      	mov	r1, r7
 8005e7a:	f7fa fce7 	bl	800084c <__aeabi_ddiv>
 8005e7e:	f7fa fe6b 	bl	8000b58 <__aeabi_d2iz>
 8005e82:	4682      	mov	sl, r0
 8005e84:	f7fa fb4e 	bl	8000524 <__aeabi_i2d>
 8005e88:	4642      	mov	r2, r8
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	f7fa fbb4 	bl	80005f8 <__aeabi_dmul>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4630      	mov	r0, r6
 8005e96:	4639      	mov	r1, r7
 8005e98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005e9c:	f7fa f9f4 	bl	8000288 <__aeabi_dsub>
 8005ea0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ea4:	9e01      	ldr	r6, [sp, #4]
 8005ea6:	9f03      	ldr	r7, [sp, #12]
 8005ea8:	1bae      	subs	r6, r5, r6
 8005eaa:	42b7      	cmp	r7, r6
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	d135      	bne.n	8005f1e <_dtoa_r+0x6e6>
 8005eb2:	f7fa f9eb 	bl	800028c <__adddf3>
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	464b      	mov	r3, r9
 8005eba:	4606      	mov	r6, r0
 8005ebc:	460f      	mov	r7, r1
 8005ebe:	f7fa fe2b 	bl	8000b18 <__aeabi_dcmpgt>
 8005ec2:	b9d0      	cbnz	r0, 8005efa <_dtoa_r+0x6c2>
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ed0:	b110      	cbz	r0, 8005ed8 <_dtoa_r+0x6a0>
 8005ed2:	f01a 0f01 	tst.w	sl, #1
 8005ed6:	d110      	bne.n	8005efa <_dtoa_r+0x6c2>
 8005ed8:	4620      	mov	r0, r4
 8005eda:	ee18 1a10 	vmov	r1, s16
 8005ede:	f000 fbed 	bl	80066bc <_Bfree>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9800      	ldr	r0, [sp, #0]
 8005ee6:	702b      	strb	r3, [r5, #0]
 8005ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eea:	3001      	adds	r0, #1
 8005eec:	6018      	str	r0, [r3, #0]
 8005eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f43f acf1 	beq.w	80058d8 <_dtoa_r+0xa0>
 8005ef6:	601d      	str	r5, [r3, #0]
 8005ef8:	e4ee      	b.n	80058d8 <_dtoa_r+0xa0>
 8005efa:	9f00      	ldr	r7, [sp, #0]
 8005efc:	462b      	mov	r3, r5
 8005efe:	461d      	mov	r5, r3
 8005f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f04:	2a39      	cmp	r2, #57	; 0x39
 8005f06:	d106      	bne.n	8005f16 <_dtoa_r+0x6de>
 8005f08:	9a01      	ldr	r2, [sp, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d1f7      	bne.n	8005efe <_dtoa_r+0x6c6>
 8005f0e:	9901      	ldr	r1, [sp, #4]
 8005f10:	2230      	movs	r2, #48	; 0x30
 8005f12:	3701      	adds	r7, #1
 8005f14:	700a      	strb	r2, [r1, #0]
 8005f16:	781a      	ldrb	r2, [r3, #0]
 8005f18:	3201      	adds	r2, #1
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	e790      	b.n	8005e40 <_dtoa_r+0x608>
 8005f1e:	4ba6      	ldr	r3, [pc, #664]	; (80061b8 <_dtoa_r+0x980>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	f7fa fb69 	bl	80005f8 <__aeabi_dmul>
 8005f26:	2200      	movs	r2, #0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	f7fa fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d09d      	beq.n	8005e72 <_dtoa_r+0x63a>
 8005f36:	e7cf      	b.n	8005ed8 <_dtoa_r+0x6a0>
 8005f38:	9a08      	ldr	r2, [sp, #32]
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	f000 80d7 	beq.w	80060ee <_dtoa_r+0x8b6>
 8005f40:	9a06      	ldr	r2, [sp, #24]
 8005f42:	2a01      	cmp	r2, #1
 8005f44:	f300 80ba 	bgt.w	80060bc <_dtoa_r+0x884>
 8005f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	f000 80b2 	beq.w	80060b4 <_dtoa_r+0x87c>
 8005f50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f54:	9e07      	ldr	r6, [sp, #28]
 8005f56:	9d04      	ldr	r5, [sp, #16]
 8005f58:	9a04      	ldr	r2, [sp, #16]
 8005f5a:	441a      	add	r2, r3
 8005f5c:	9204      	str	r2, [sp, #16]
 8005f5e:	9a05      	ldr	r2, [sp, #20]
 8005f60:	2101      	movs	r1, #1
 8005f62:	441a      	add	r2, r3
 8005f64:	4620      	mov	r0, r4
 8005f66:	9205      	str	r2, [sp, #20]
 8005f68:	f000 fc60 	bl	800682c <__i2b>
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	dd0c      	ble.n	8005f8c <_dtoa_r+0x754>
 8005f72:	9b05      	ldr	r3, [sp, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dd09      	ble.n	8005f8c <_dtoa_r+0x754>
 8005f78:	42ab      	cmp	r3, r5
 8005f7a:	9a04      	ldr	r2, [sp, #16]
 8005f7c:	bfa8      	it	ge
 8005f7e:	462b      	movge	r3, r5
 8005f80:	1ad2      	subs	r2, r2, r3
 8005f82:	9204      	str	r2, [sp, #16]
 8005f84:	9a05      	ldr	r2, [sp, #20]
 8005f86:	1aed      	subs	r5, r5, r3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	9305      	str	r3, [sp, #20]
 8005f8c:	9b07      	ldr	r3, [sp, #28]
 8005f8e:	b31b      	cbz	r3, 8005fd8 <_dtoa_r+0x7a0>
 8005f90:	9b08      	ldr	r3, [sp, #32]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80af 	beq.w	80060f6 <_dtoa_r+0x8be>
 8005f98:	2e00      	cmp	r6, #0
 8005f9a:	dd13      	ble.n	8005fc4 <_dtoa_r+0x78c>
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	4632      	mov	r2, r6
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fd03 	bl	80069ac <__pow5mult>
 8005fa6:	ee18 2a10 	vmov	r2, s16
 8005faa:	4601      	mov	r1, r0
 8005fac:	4607      	mov	r7, r0
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f000 fc52 	bl	8006858 <__multiply>
 8005fb4:	ee18 1a10 	vmov	r1, s16
 8005fb8:	4680      	mov	r8, r0
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fb7e 	bl	80066bc <_Bfree>
 8005fc0:	ee08 8a10 	vmov	s16, r8
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	1b9a      	subs	r2, r3, r6
 8005fc8:	d006      	beq.n	8005fd8 <_dtoa_r+0x7a0>
 8005fca:	ee18 1a10 	vmov	r1, s16
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 fcec 	bl	80069ac <__pow5mult>
 8005fd4:	ee08 0a10 	vmov	s16, r0
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fc26 	bl	800682c <__i2b>
 8005fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	f340 8088 	ble.w	80060fa <_dtoa_r+0x8c2>
 8005fea:	461a      	mov	r2, r3
 8005fec:	4601      	mov	r1, r0
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f000 fcdc 	bl	80069ac <__pow5mult>
 8005ff4:	9b06      	ldr	r3, [sp, #24]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	f340 8081 	ble.w	8006100 <_dtoa_r+0x8c8>
 8005ffe:	f04f 0800 	mov.w	r8, #0
 8006002:	6933      	ldr	r3, [r6, #16]
 8006004:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006008:	6918      	ldr	r0, [r3, #16]
 800600a:	f000 fbbf 	bl	800678c <__hi0bits>
 800600e:	f1c0 0020 	rsb	r0, r0, #32
 8006012:	9b05      	ldr	r3, [sp, #20]
 8006014:	4418      	add	r0, r3
 8006016:	f010 001f 	ands.w	r0, r0, #31
 800601a:	f000 8092 	beq.w	8006142 <_dtoa_r+0x90a>
 800601e:	f1c0 0320 	rsb	r3, r0, #32
 8006022:	2b04      	cmp	r3, #4
 8006024:	f340 808a 	ble.w	800613c <_dtoa_r+0x904>
 8006028:	f1c0 001c 	rsb	r0, r0, #28
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	4403      	add	r3, r0
 8006030:	9304      	str	r3, [sp, #16]
 8006032:	9b05      	ldr	r3, [sp, #20]
 8006034:	4403      	add	r3, r0
 8006036:	4405      	add	r5, r0
 8006038:	9305      	str	r3, [sp, #20]
 800603a:	9b04      	ldr	r3, [sp, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	dd07      	ble.n	8006050 <_dtoa_r+0x818>
 8006040:	ee18 1a10 	vmov	r1, s16
 8006044:	461a      	mov	r2, r3
 8006046:	4620      	mov	r0, r4
 8006048:	f000 fd0a 	bl	8006a60 <__lshift>
 800604c:	ee08 0a10 	vmov	s16, r0
 8006050:	9b05      	ldr	r3, [sp, #20]
 8006052:	2b00      	cmp	r3, #0
 8006054:	dd05      	ble.n	8006062 <_dtoa_r+0x82a>
 8006056:	4631      	mov	r1, r6
 8006058:	461a      	mov	r2, r3
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fd00 	bl	8006a60 <__lshift>
 8006060:	4606      	mov	r6, r0
 8006062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d06e      	beq.n	8006146 <_dtoa_r+0x90e>
 8006068:	ee18 0a10 	vmov	r0, s16
 800606c:	4631      	mov	r1, r6
 800606e:	f000 fd67 	bl	8006b40 <__mcmp>
 8006072:	2800      	cmp	r0, #0
 8006074:	da67      	bge.n	8006146 <_dtoa_r+0x90e>
 8006076:	9b00      	ldr	r3, [sp, #0]
 8006078:	3b01      	subs	r3, #1
 800607a:	ee18 1a10 	vmov	r1, s16
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	220a      	movs	r2, #10
 8006082:	2300      	movs	r3, #0
 8006084:	4620      	mov	r0, r4
 8006086:	f000 fb3b 	bl	8006700 <__multadd>
 800608a:	9b08      	ldr	r3, [sp, #32]
 800608c:	ee08 0a10 	vmov	s16, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 81b1 	beq.w	80063f8 <_dtoa_r+0xbc0>
 8006096:	2300      	movs	r3, #0
 8006098:	4639      	mov	r1, r7
 800609a:	220a      	movs	r2, #10
 800609c:	4620      	mov	r0, r4
 800609e:	f000 fb2f 	bl	8006700 <__multadd>
 80060a2:	9b02      	ldr	r3, [sp, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	4607      	mov	r7, r0
 80060a8:	f300 808e 	bgt.w	80061c8 <_dtoa_r+0x990>
 80060ac:	9b06      	ldr	r3, [sp, #24]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	dc51      	bgt.n	8006156 <_dtoa_r+0x91e>
 80060b2:	e089      	b.n	80061c8 <_dtoa_r+0x990>
 80060b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060ba:	e74b      	b.n	8005f54 <_dtoa_r+0x71c>
 80060bc:	9b03      	ldr	r3, [sp, #12]
 80060be:	1e5e      	subs	r6, r3, #1
 80060c0:	9b07      	ldr	r3, [sp, #28]
 80060c2:	42b3      	cmp	r3, r6
 80060c4:	bfbf      	itttt	lt
 80060c6:	9b07      	ldrlt	r3, [sp, #28]
 80060c8:	9607      	strlt	r6, [sp, #28]
 80060ca:	1af2      	sublt	r2, r6, r3
 80060cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060ce:	bfb6      	itet	lt
 80060d0:	189b      	addlt	r3, r3, r2
 80060d2:	1b9e      	subge	r6, r3, r6
 80060d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	bfb8      	it	lt
 80060da:	2600      	movlt	r6, #0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	bfb7      	itett	lt
 80060e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80060e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80060e8:	1a9d      	sublt	r5, r3, r2
 80060ea:	2300      	movlt	r3, #0
 80060ec:	e734      	b.n	8005f58 <_dtoa_r+0x720>
 80060ee:	9e07      	ldr	r6, [sp, #28]
 80060f0:	9d04      	ldr	r5, [sp, #16]
 80060f2:	9f08      	ldr	r7, [sp, #32]
 80060f4:	e73b      	b.n	8005f6e <_dtoa_r+0x736>
 80060f6:	9a07      	ldr	r2, [sp, #28]
 80060f8:	e767      	b.n	8005fca <_dtoa_r+0x792>
 80060fa:	9b06      	ldr	r3, [sp, #24]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	dc18      	bgt.n	8006132 <_dtoa_r+0x8fa>
 8006100:	f1ba 0f00 	cmp.w	sl, #0
 8006104:	d115      	bne.n	8006132 <_dtoa_r+0x8fa>
 8006106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800610a:	b993      	cbnz	r3, 8006132 <_dtoa_r+0x8fa>
 800610c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006110:	0d1b      	lsrs	r3, r3, #20
 8006112:	051b      	lsls	r3, r3, #20
 8006114:	b183      	cbz	r3, 8006138 <_dtoa_r+0x900>
 8006116:	9b04      	ldr	r3, [sp, #16]
 8006118:	3301      	adds	r3, #1
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	9b05      	ldr	r3, [sp, #20]
 800611e:	3301      	adds	r3, #1
 8006120:	9305      	str	r3, [sp, #20]
 8006122:	f04f 0801 	mov.w	r8, #1
 8006126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006128:	2b00      	cmp	r3, #0
 800612a:	f47f af6a 	bne.w	8006002 <_dtoa_r+0x7ca>
 800612e:	2001      	movs	r0, #1
 8006130:	e76f      	b.n	8006012 <_dtoa_r+0x7da>
 8006132:	f04f 0800 	mov.w	r8, #0
 8006136:	e7f6      	b.n	8006126 <_dtoa_r+0x8ee>
 8006138:	4698      	mov	r8, r3
 800613a:	e7f4      	b.n	8006126 <_dtoa_r+0x8ee>
 800613c:	f43f af7d 	beq.w	800603a <_dtoa_r+0x802>
 8006140:	4618      	mov	r0, r3
 8006142:	301c      	adds	r0, #28
 8006144:	e772      	b.n	800602c <_dtoa_r+0x7f4>
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	dc37      	bgt.n	80061bc <_dtoa_r+0x984>
 800614c:	9b06      	ldr	r3, [sp, #24]
 800614e:	2b02      	cmp	r3, #2
 8006150:	dd34      	ble.n	80061bc <_dtoa_r+0x984>
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	9302      	str	r3, [sp, #8]
 8006156:	9b02      	ldr	r3, [sp, #8]
 8006158:	b96b      	cbnz	r3, 8006176 <_dtoa_r+0x93e>
 800615a:	4631      	mov	r1, r6
 800615c:	2205      	movs	r2, #5
 800615e:	4620      	mov	r0, r4
 8006160:	f000 face 	bl	8006700 <__multadd>
 8006164:	4601      	mov	r1, r0
 8006166:	4606      	mov	r6, r0
 8006168:	ee18 0a10 	vmov	r0, s16
 800616c:	f000 fce8 	bl	8006b40 <__mcmp>
 8006170:	2800      	cmp	r0, #0
 8006172:	f73f adbb 	bgt.w	8005cec <_dtoa_r+0x4b4>
 8006176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006178:	9d01      	ldr	r5, [sp, #4]
 800617a:	43db      	mvns	r3, r3
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	f04f 0800 	mov.w	r8, #0
 8006182:	4631      	mov	r1, r6
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fa99 	bl	80066bc <_Bfree>
 800618a:	2f00      	cmp	r7, #0
 800618c:	f43f aea4 	beq.w	8005ed8 <_dtoa_r+0x6a0>
 8006190:	f1b8 0f00 	cmp.w	r8, #0
 8006194:	d005      	beq.n	80061a2 <_dtoa_r+0x96a>
 8006196:	45b8      	cmp	r8, r7
 8006198:	d003      	beq.n	80061a2 <_dtoa_r+0x96a>
 800619a:	4641      	mov	r1, r8
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fa8d 	bl	80066bc <_Bfree>
 80061a2:	4639      	mov	r1, r7
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 fa89 	bl	80066bc <_Bfree>
 80061aa:	e695      	b.n	8005ed8 <_dtoa_r+0x6a0>
 80061ac:	2600      	movs	r6, #0
 80061ae:	4637      	mov	r7, r6
 80061b0:	e7e1      	b.n	8006176 <_dtoa_r+0x93e>
 80061b2:	9700      	str	r7, [sp, #0]
 80061b4:	4637      	mov	r7, r6
 80061b6:	e599      	b.n	8005cec <_dtoa_r+0x4b4>
 80061b8:	40240000 	.word	0x40240000
 80061bc:	9b08      	ldr	r3, [sp, #32]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80ca 	beq.w	8006358 <_dtoa_r+0xb20>
 80061c4:	9b03      	ldr	r3, [sp, #12]
 80061c6:	9302      	str	r3, [sp, #8]
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	dd05      	ble.n	80061d8 <_dtoa_r+0x9a0>
 80061cc:	4639      	mov	r1, r7
 80061ce:	462a      	mov	r2, r5
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fc45 	bl	8006a60 <__lshift>
 80061d6:	4607      	mov	r7, r0
 80061d8:	f1b8 0f00 	cmp.w	r8, #0
 80061dc:	d05b      	beq.n	8006296 <_dtoa_r+0xa5e>
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 fa2b 	bl	800663c <_Balloc>
 80061e6:	4605      	mov	r5, r0
 80061e8:	b928      	cbnz	r0, 80061f6 <_dtoa_r+0x9be>
 80061ea:	4b87      	ldr	r3, [pc, #540]	; (8006408 <_dtoa_r+0xbd0>)
 80061ec:	4602      	mov	r2, r0
 80061ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80061f2:	f7ff bb3b 	b.w	800586c <_dtoa_r+0x34>
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	3202      	adds	r2, #2
 80061fa:	0092      	lsls	r2, r2, #2
 80061fc:	f107 010c 	add.w	r1, r7, #12
 8006200:	300c      	adds	r0, #12
 8006202:	f000 fa0d 	bl	8006620 <memcpy>
 8006206:	2201      	movs	r2, #1
 8006208:	4629      	mov	r1, r5
 800620a:	4620      	mov	r0, r4
 800620c:	f000 fc28 	bl	8006a60 <__lshift>
 8006210:	9b01      	ldr	r3, [sp, #4]
 8006212:	f103 0901 	add.w	r9, r3, #1
 8006216:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800621a:	4413      	add	r3, r2
 800621c:	9305      	str	r3, [sp, #20]
 800621e:	f00a 0301 	and.w	r3, sl, #1
 8006222:	46b8      	mov	r8, r7
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	4607      	mov	r7, r0
 8006228:	4631      	mov	r1, r6
 800622a:	ee18 0a10 	vmov	r0, s16
 800622e:	f7ff fa75 	bl	800571c <quorem>
 8006232:	4641      	mov	r1, r8
 8006234:	9002      	str	r0, [sp, #8]
 8006236:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800623a:	ee18 0a10 	vmov	r0, s16
 800623e:	f000 fc7f 	bl	8006b40 <__mcmp>
 8006242:	463a      	mov	r2, r7
 8006244:	9003      	str	r0, [sp, #12]
 8006246:	4631      	mov	r1, r6
 8006248:	4620      	mov	r0, r4
 800624a:	f000 fc95 	bl	8006b78 <__mdiff>
 800624e:	68c2      	ldr	r2, [r0, #12]
 8006250:	f109 3bff 	add.w	fp, r9, #4294967295
 8006254:	4605      	mov	r5, r0
 8006256:	bb02      	cbnz	r2, 800629a <_dtoa_r+0xa62>
 8006258:	4601      	mov	r1, r0
 800625a:	ee18 0a10 	vmov	r0, s16
 800625e:	f000 fc6f 	bl	8006b40 <__mcmp>
 8006262:	4602      	mov	r2, r0
 8006264:	4629      	mov	r1, r5
 8006266:	4620      	mov	r0, r4
 8006268:	9207      	str	r2, [sp, #28]
 800626a:	f000 fa27 	bl	80066bc <_Bfree>
 800626e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006272:	ea43 0102 	orr.w	r1, r3, r2
 8006276:	9b04      	ldr	r3, [sp, #16]
 8006278:	430b      	orrs	r3, r1
 800627a:	464d      	mov	r5, r9
 800627c:	d10f      	bne.n	800629e <_dtoa_r+0xa66>
 800627e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006282:	d02a      	beq.n	80062da <_dtoa_r+0xaa2>
 8006284:	9b03      	ldr	r3, [sp, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	dd02      	ble.n	8006290 <_dtoa_r+0xa58>
 800628a:	9b02      	ldr	r3, [sp, #8]
 800628c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006290:	f88b a000 	strb.w	sl, [fp]
 8006294:	e775      	b.n	8006182 <_dtoa_r+0x94a>
 8006296:	4638      	mov	r0, r7
 8006298:	e7ba      	b.n	8006210 <_dtoa_r+0x9d8>
 800629a:	2201      	movs	r2, #1
 800629c:	e7e2      	b.n	8006264 <_dtoa_r+0xa2c>
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	db04      	blt.n	80062ae <_dtoa_r+0xa76>
 80062a4:	9906      	ldr	r1, [sp, #24]
 80062a6:	430b      	orrs	r3, r1
 80062a8:	9904      	ldr	r1, [sp, #16]
 80062aa:	430b      	orrs	r3, r1
 80062ac:	d122      	bne.n	80062f4 <_dtoa_r+0xabc>
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	ddee      	ble.n	8006290 <_dtoa_r+0xa58>
 80062b2:	ee18 1a10 	vmov	r1, s16
 80062b6:	2201      	movs	r2, #1
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fbd1 	bl	8006a60 <__lshift>
 80062be:	4631      	mov	r1, r6
 80062c0:	ee08 0a10 	vmov	s16, r0
 80062c4:	f000 fc3c 	bl	8006b40 <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	dc03      	bgt.n	80062d4 <_dtoa_r+0xa9c>
 80062cc:	d1e0      	bne.n	8006290 <_dtoa_r+0xa58>
 80062ce:	f01a 0f01 	tst.w	sl, #1
 80062d2:	d0dd      	beq.n	8006290 <_dtoa_r+0xa58>
 80062d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062d8:	d1d7      	bne.n	800628a <_dtoa_r+0xa52>
 80062da:	2339      	movs	r3, #57	; 0x39
 80062dc:	f88b 3000 	strb.w	r3, [fp]
 80062e0:	462b      	mov	r3, r5
 80062e2:	461d      	mov	r5, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062ea:	2a39      	cmp	r2, #57	; 0x39
 80062ec:	d071      	beq.n	80063d2 <_dtoa_r+0xb9a>
 80062ee:	3201      	adds	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	e746      	b.n	8006182 <_dtoa_r+0x94a>
 80062f4:	2a00      	cmp	r2, #0
 80062f6:	dd07      	ble.n	8006308 <_dtoa_r+0xad0>
 80062f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062fc:	d0ed      	beq.n	80062da <_dtoa_r+0xaa2>
 80062fe:	f10a 0301 	add.w	r3, sl, #1
 8006302:	f88b 3000 	strb.w	r3, [fp]
 8006306:	e73c      	b.n	8006182 <_dtoa_r+0x94a>
 8006308:	9b05      	ldr	r3, [sp, #20]
 800630a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800630e:	4599      	cmp	r9, r3
 8006310:	d047      	beq.n	80063a2 <_dtoa_r+0xb6a>
 8006312:	ee18 1a10 	vmov	r1, s16
 8006316:	2300      	movs	r3, #0
 8006318:	220a      	movs	r2, #10
 800631a:	4620      	mov	r0, r4
 800631c:	f000 f9f0 	bl	8006700 <__multadd>
 8006320:	45b8      	cmp	r8, r7
 8006322:	ee08 0a10 	vmov	s16, r0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	f04f 020a 	mov.w	r2, #10
 800632e:	4641      	mov	r1, r8
 8006330:	4620      	mov	r0, r4
 8006332:	d106      	bne.n	8006342 <_dtoa_r+0xb0a>
 8006334:	f000 f9e4 	bl	8006700 <__multadd>
 8006338:	4680      	mov	r8, r0
 800633a:	4607      	mov	r7, r0
 800633c:	f109 0901 	add.w	r9, r9, #1
 8006340:	e772      	b.n	8006228 <_dtoa_r+0x9f0>
 8006342:	f000 f9dd 	bl	8006700 <__multadd>
 8006346:	4639      	mov	r1, r7
 8006348:	4680      	mov	r8, r0
 800634a:	2300      	movs	r3, #0
 800634c:	220a      	movs	r2, #10
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f9d6 	bl	8006700 <__multadd>
 8006354:	4607      	mov	r7, r0
 8006356:	e7f1      	b.n	800633c <_dtoa_r+0xb04>
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	9302      	str	r3, [sp, #8]
 800635c:	9d01      	ldr	r5, [sp, #4]
 800635e:	ee18 0a10 	vmov	r0, s16
 8006362:	4631      	mov	r1, r6
 8006364:	f7ff f9da 	bl	800571c <quorem>
 8006368:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800636c:	9b01      	ldr	r3, [sp, #4]
 800636e:	f805 ab01 	strb.w	sl, [r5], #1
 8006372:	1aea      	subs	r2, r5, r3
 8006374:	9b02      	ldr	r3, [sp, #8]
 8006376:	4293      	cmp	r3, r2
 8006378:	dd09      	ble.n	800638e <_dtoa_r+0xb56>
 800637a:	ee18 1a10 	vmov	r1, s16
 800637e:	2300      	movs	r3, #0
 8006380:	220a      	movs	r2, #10
 8006382:	4620      	mov	r0, r4
 8006384:	f000 f9bc 	bl	8006700 <__multadd>
 8006388:	ee08 0a10 	vmov	s16, r0
 800638c:	e7e7      	b.n	800635e <_dtoa_r+0xb26>
 800638e:	9b02      	ldr	r3, [sp, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	bfc8      	it	gt
 8006394:	461d      	movgt	r5, r3
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	bfd8      	it	le
 800639a:	2501      	movle	r5, #1
 800639c:	441d      	add	r5, r3
 800639e:	f04f 0800 	mov.w	r8, #0
 80063a2:	ee18 1a10 	vmov	r1, s16
 80063a6:	2201      	movs	r2, #1
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 fb59 	bl	8006a60 <__lshift>
 80063ae:	4631      	mov	r1, r6
 80063b0:	ee08 0a10 	vmov	s16, r0
 80063b4:	f000 fbc4 	bl	8006b40 <__mcmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	dc91      	bgt.n	80062e0 <_dtoa_r+0xaa8>
 80063bc:	d102      	bne.n	80063c4 <_dtoa_r+0xb8c>
 80063be:	f01a 0f01 	tst.w	sl, #1
 80063c2:	d18d      	bne.n	80062e0 <_dtoa_r+0xaa8>
 80063c4:	462b      	mov	r3, r5
 80063c6:	461d      	mov	r5, r3
 80063c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063cc:	2a30      	cmp	r2, #48	; 0x30
 80063ce:	d0fa      	beq.n	80063c6 <_dtoa_r+0xb8e>
 80063d0:	e6d7      	b.n	8006182 <_dtoa_r+0x94a>
 80063d2:	9a01      	ldr	r2, [sp, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d184      	bne.n	80062e2 <_dtoa_r+0xaaa>
 80063d8:	9b00      	ldr	r3, [sp, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	2331      	movs	r3, #49	; 0x31
 80063e0:	7013      	strb	r3, [r2, #0]
 80063e2:	e6ce      	b.n	8006182 <_dtoa_r+0x94a>
 80063e4:	4b09      	ldr	r3, [pc, #36]	; (800640c <_dtoa_r+0xbd4>)
 80063e6:	f7ff ba95 	b.w	8005914 <_dtoa_r+0xdc>
 80063ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f47f aa6e 	bne.w	80058ce <_dtoa_r+0x96>
 80063f2:	4b07      	ldr	r3, [pc, #28]	; (8006410 <_dtoa_r+0xbd8>)
 80063f4:	f7ff ba8e 	b.w	8005914 <_dtoa_r+0xdc>
 80063f8:	9b02      	ldr	r3, [sp, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	dcae      	bgt.n	800635c <_dtoa_r+0xb24>
 80063fe:	9b06      	ldr	r3, [sp, #24]
 8006400:	2b02      	cmp	r3, #2
 8006402:	f73f aea8 	bgt.w	8006156 <_dtoa_r+0x91e>
 8006406:	e7a9      	b.n	800635c <_dtoa_r+0xb24>
 8006408:	0800799f 	.word	0x0800799f
 800640c:	080078fc 	.word	0x080078fc
 8006410:	08007920 	.word	0x08007920

08006414 <std>:
 8006414:	2300      	movs	r3, #0
 8006416:	b510      	push	{r4, lr}
 8006418:	4604      	mov	r4, r0
 800641a:	e9c0 3300 	strd	r3, r3, [r0]
 800641e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006422:	6083      	str	r3, [r0, #8]
 8006424:	8181      	strh	r1, [r0, #12]
 8006426:	6643      	str	r3, [r0, #100]	; 0x64
 8006428:	81c2      	strh	r2, [r0, #14]
 800642a:	6183      	str	r3, [r0, #24]
 800642c:	4619      	mov	r1, r3
 800642e:	2208      	movs	r2, #8
 8006430:	305c      	adds	r0, #92	; 0x5c
 8006432:	f7fe fce9 	bl	8004e08 <memset>
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <std+0x38>)
 8006438:	6263      	str	r3, [r4, #36]	; 0x24
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <std+0x3c>)
 800643c:	62a3      	str	r3, [r4, #40]	; 0x28
 800643e:	4b05      	ldr	r3, [pc, #20]	; (8006454 <std+0x40>)
 8006440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006442:	4b05      	ldr	r3, [pc, #20]	; (8006458 <std+0x44>)
 8006444:	6224      	str	r4, [r4, #32]
 8006446:	6323      	str	r3, [r4, #48]	; 0x30
 8006448:	bd10      	pop	{r4, pc}
 800644a:	bf00      	nop
 800644c:	08007205 	.word	0x08007205
 8006450:	08007227 	.word	0x08007227
 8006454:	0800725f 	.word	0x0800725f
 8006458:	08007283 	.word	0x08007283

0800645c <_cleanup_r>:
 800645c:	4901      	ldr	r1, [pc, #4]	; (8006464 <_cleanup_r+0x8>)
 800645e:	f000 b8af 	b.w	80065c0 <_fwalk_reent>
 8006462:	bf00      	nop
 8006464:	08007599 	.word	0x08007599

08006468 <__sfmoreglue>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	2268      	movs	r2, #104	; 0x68
 800646c:	1e4d      	subs	r5, r1, #1
 800646e:	4355      	muls	r5, r2
 8006470:	460e      	mov	r6, r1
 8006472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006476:	f000 fce7 	bl	8006e48 <_malloc_r>
 800647a:	4604      	mov	r4, r0
 800647c:	b140      	cbz	r0, 8006490 <__sfmoreglue+0x28>
 800647e:	2100      	movs	r1, #0
 8006480:	e9c0 1600 	strd	r1, r6, [r0]
 8006484:	300c      	adds	r0, #12
 8006486:	60a0      	str	r0, [r4, #8]
 8006488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800648c:	f7fe fcbc 	bl	8004e08 <memset>
 8006490:	4620      	mov	r0, r4
 8006492:	bd70      	pop	{r4, r5, r6, pc}

08006494 <__sfp_lock_acquire>:
 8006494:	4801      	ldr	r0, [pc, #4]	; (800649c <__sfp_lock_acquire+0x8>)
 8006496:	f000 b8b8 	b.w	800660a <__retarget_lock_acquire_recursive>
 800649a:	bf00      	nop
 800649c:	2000032d 	.word	0x2000032d

080064a0 <__sfp_lock_release>:
 80064a0:	4801      	ldr	r0, [pc, #4]	; (80064a8 <__sfp_lock_release+0x8>)
 80064a2:	f000 b8b3 	b.w	800660c <__retarget_lock_release_recursive>
 80064a6:	bf00      	nop
 80064a8:	2000032d 	.word	0x2000032d

080064ac <__sinit_lock_acquire>:
 80064ac:	4801      	ldr	r0, [pc, #4]	; (80064b4 <__sinit_lock_acquire+0x8>)
 80064ae:	f000 b8ac 	b.w	800660a <__retarget_lock_acquire_recursive>
 80064b2:	bf00      	nop
 80064b4:	2000032e 	.word	0x2000032e

080064b8 <__sinit_lock_release>:
 80064b8:	4801      	ldr	r0, [pc, #4]	; (80064c0 <__sinit_lock_release+0x8>)
 80064ba:	f000 b8a7 	b.w	800660c <__retarget_lock_release_recursive>
 80064be:	bf00      	nop
 80064c0:	2000032e 	.word	0x2000032e

080064c4 <__sinit>:
 80064c4:	b510      	push	{r4, lr}
 80064c6:	4604      	mov	r4, r0
 80064c8:	f7ff fff0 	bl	80064ac <__sinit_lock_acquire>
 80064cc:	69a3      	ldr	r3, [r4, #24]
 80064ce:	b11b      	cbz	r3, 80064d8 <__sinit+0x14>
 80064d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d4:	f7ff bff0 	b.w	80064b8 <__sinit_lock_release>
 80064d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80064dc:	6523      	str	r3, [r4, #80]	; 0x50
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <__sinit+0x68>)
 80064e0:	4a13      	ldr	r2, [pc, #76]	; (8006530 <__sinit+0x6c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80064e6:	42a3      	cmp	r3, r4
 80064e8:	bf04      	itt	eq
 80064ea:	2301      	moveq	r3, #1
 80064ec:	61a3      	streq	r3, [r4, #24]
 80064ee:	4620      	mov	r0, r4
 80064f0:	f000 f820 	bl	8006534 <__sfp>
 80064f4:	6060      	str	r0, [r4, #4]
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 f81c 	bl	8006534 <__sfp>
 80064fc:	60a0      	str	r0, [r4, #8]
 80064fe:	4620      	mov	r0, r4
 8006500:	f000 f818 	bl	8006534 <__sfp>
 8006504:	2200      	movs	r2, #0
 8006506:	60e0      	str	r0, [r4, #12]
 8006508:	2104      	movs	r1, #4
 800650a:	6860      	ldr	r0, [r4, #4]
 800650c:	f7ff ff82 	bl	8006414 <std>
 8006510:	68a0      	ldr	r0, [r4, #8]
 8006512:	2201      	movs	r2, #1
 8006514:	2109      	movs	r1, #9
 8006516:	f7ff ff7d 	bl	8006414 <std>
 800651a:	68e0      	ldr	r0, [r4, #12]
 800651c:	2202      	movs	r2, #2
 800651e:	2112      	movs	r1, #18
 8006520:	f7ff ff78 	bl	8006414 <std>
 8006524:	2301      	movs	r3, #1
 8006526:	61a3      	str	r3, [r4, #24]
 8006528:	e7d2      	b.n	80064d0 <__sinit+0xc>
 800652a:	bf00      	nop
 800652c:	080078e8 	.word	0x080078e8
 8006530:	0800645d 	.word	0x0800645d

08006534 <__sfp>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	4607      	mov	r7, r0
 8006538:	f7ff ffac 	bl	8006494 <__sfp_lock_acquire>
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <__sfp+0x84>)
 800653e:	681e      	ldr	r6, [r3, #0]
 8006540:	69b3      	ldr	r3, [r6, #24]
 8006542:	b913      	cbnz	r3, 800654a <__sfp+0x16>
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff ffbd 	bl	80064c4 <__sinit>
 800654a:	3648      	adds	r6, #72	; 0x48
 800654c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006550:	3b01      	subs	r3, #1
 8006552:	d503      	bpl.n	800655c <__sfp+0x28>
 8006554:	6833      	ldr	r3, [r6, #0]
 8006556:	b30b      	cbz	r3, 800659c <__sfp+0x68>
 8006558:	6836      	ldr	r6, [r6, #0]
 800655a:	e7f7      	b.n	800654c <__sfp+0x18>
 800655c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006560:	b9d5      	cbnz	r5, 8006598 <__sfp+0x64>
 8006562:	4b16      	ldr	r3, [pc, #88]	; (80065bc <__sfp+0x88>)
 8006564:	60e3      	str	r3, [r4, #12]
 8006566:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800656a:	6665      	str	r5, [r4, #100]	; 0x64
 800656c:	f000 f84c 	bl	8006608 <__retarget_lock_init_recursive>
 8006570:	f7ff ff96 	bl	80064a0 <__sfp_lock_release>
 8006574:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006578:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800657c:	6025      	str	r5, [r4, #0]
 800657e:	61a5      	str	r5, [r4, #24]
 8006580:	2208      	movs	r2, #8
 8006582:	4629      	mov	r1, r5
 8006584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006588:	f7fe fc3e 	bl	8004e08 <memset>
 800658c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006594:	4620      	mov	r0, r4
 8006596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006598:	3468      	adds	r4, #104	; 0x68
 800659a:	e7d9      	b.n	8006550 <__sfp+0x1c>
 800659c:	2104      	movs	r1, #4
 800659e:	4638      	mov	r0, r7
 80065a0:	f7ff ff62 	bl	8006468 <__sfmoreglue>
 80065a4:	4604      	mov	r4, r0
 80065a6:	6030      	str	r0, [r6, #0]
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d1d5      	bne.n	8006558 <__sfp+0x24>
 80065ac:	f7ff ff78 	bl	80064a0 <__sfp_lock_release>
 80065b0:	230c      	movs	r3, #12
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	e7ee      	b.n	8006594 <__sfp+0x60>
 80065b6:	bf00      	nop
 80065b8:	080078e8 	.word	0x080078e8
 80065bc:	ffff0001 	.word	0xffff0001

080065c0 <_fwalk_reent>:
 80065c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c4:	4606      	mov	r6, r0
 80065c6:	4688      	mov	r8, r1
 80065c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065cc:	2700      	movs	r7, #0
 80065ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065d2:	f1b9 0901 	subs.w	r9, r9, #1
 80065d6:	d505      	bpl.n	80065e4 <_fwalk_reent+0x24>
 80065d8:	6824      	ldr	r4, [r4, #0]
 80065da:	2c00      	cmp	r4, #0
 80065dc:	d1f7      	bne.n	80065ce <_fwalk_reent+0xe>
 80065de:	4638      	mov	r0, r7
 80065e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065e4:	89ab      	ldrh	r3, [r5, #12]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d907      	bls.n	80065fa <_fwalk_reent+0x3a>
 80065ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065ee:	3301      	adds	r3, #1
 80065f0:	d003      	beq.n	80065fa <_fwalk_reent+0x3a>
 80065f2:	4629      	mov	r1, r5
 80065f4:	4630      	mov	r0, r6
 80065f6:	47c0      	blx	r8
 80065f8:	4307      	orrs	r7, r0
 80065fa:	3568      	adds	r5, #104	; 0x68
 80065fc:	e7e9      	b.n	80065d2 <_fwalk_reent+0x12>
	...

08006600 <_localeconv_r>:
 8006600:	4800      	ldr	r0, [pc, #0]	; (8006604 <_localeconv_r+0x4>)
 8006602:	4770      	bx	lr
 8006604:	20000168 	.word	0x20000168

08006608 <__retarget_lock_init_recursive>:
 8006608:	4770      	bx	lr

0800660a <__retarget_lock_acquire_recursive>:
 800660a:	4770      	bx	lr

0800660c <__retarget_lock_release_recursive>:
 800660c:	4770      	bx	lr
	...

08006610 <malloc>:
 8006610:	4b02      	ldr	r3, [pc, #8]	; (800661c <malloc+0xc>)
 8006612:	4601      	mov	r1, r0
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	f000 bc17 	b.w	8006e48 <_malloc_r>
 800661a:	bf00      	nop
 800661c:	20000014 	.word	0x20000014

08006620 <memcpy>:
 8006620:	440a      	add	r2, r1
 8006622:	4291      	cmp	r1, r2
 8006624:	f100 33ff 	add.w	r3, r0, #4294967295
 8006628:	d100      	bne.n	800662c <memcpy+0xc>
 800662a:	4770      	bx	lr
 800662c:	b510      	push	{r4, lr}
 800662e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006636:	4291      	cmp	r1, r2
 8006638:	d1f9      	bne.n	800662e <memcpy+0xe>
 800663a:	bd10      	pop	{r4, pc}

0800663c <_Balloc>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006640:	4604      	mov	r4, r0
 8006642:	460d      	mov	r5, r1
 8006644:	b976      	cbnz	r6, 8006664 <_Balloc+0x28>
 8006646:	2010      	movs	r0, #16
 8006648:	f7ff ffe2 	bl	8006610 <malloc>
 800664c:	4602      	mov	r2, r0
 800664e:	6260      	str	r0, [r4, #36]	; 0x24
 8006650:	b920      	cbnz	r0, 800665c <_Balloc+0x20>
 8006652:	4b18      	ldr	r3, [pc, #96]	; (80066b4 <_Balloc+0x78>)
 8006654:	4818      	ldr	r0, [pc, #96]	; (80066b8 <_Balloc+0x7c>)
 8006656:	2166      	movs	r1, #102	; 0x66
 8006658:	f000 feea 	bl	8007430 <__assert_func>
 800665c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006660:	6006      	str	r6, [r0, #0]
 8006662:	60c6      	str	r6, [r0, #12]
 8006664:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006666:	68f3      	ldr	r3, [r6, #12]
 8006668:	b183      	cbz	r3, 800668c <_Balloc+0x50>
 800666a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006672:	b9b8      	cbnz	r0, 80066a4 <_Balloc+0x68>
 8006674:	2101      	movs	r1, #1
 8006676:	fa01 f605 	lsl.w	r6, r1, r5
 800667a:	1d72      	adds	r2, r6, #5
 800667c:	0092      	lsls	r2, r2, #2
 800667e:	4620      	mov	r0, r4
 8006680:	f000 fb60 	bl	8006d44 <_calloc_r>
 8006684:	b160      	cbz	r0, 80066a0 <_Balloc+0x64>
 8006686:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800668a:	e00e      	b.n	80066aa <_Balloc+0x6e>
 800668c:	2221      	movs	r2, #33	; 0x21
 800668e:	2104      	movs	r1, #4
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fb57 	bl	8006d44 <_calloc_r>
 8006696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006698:	60f0      	str	r0, [r6, #12]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e4      	bne.n	800666a <_Balloc+0x2e>
 80066a0:	2000      	movs	r0, #0
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	6802      	ldr	r2, [r0, #0]
 80066a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066aa:	2300      	movs	r3, #0
 80066ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066b0:	e7f7      	b.n	80066a2 <_Balloc+0x66>
 80066b2:	bf00      	nop
 80066b4:	0800792d 	.word	0x0800792d
 80066b8:	08007a10 	.word	0x08007a10

080066bc <_Bfree>:
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066c0:	4605      	mov	r5, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	b976      	cbnz	r6, 80066e4 <_Bfree+0x28>
 80066c6:	2010      	movs	r0, #16
 80066c8:	f7ff ffa2 	bl	8006610 <malloc>
 80066cc:	4602      	mov	r2, r0
 80066ce:	6268      	str	r0, [r5, #36]	; 0x24
 80066d0:	b920      	cbnz	r0, 80066dc <_Bfree+0x20>
 80066d2:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <_Bfree+0x3c>)
 80066d4:	4809      	ldr	r0, [pc, #36]	; (80066fc <_Bfree+0x40>)
 80066d6:	218a      	movs	r1, #138	; 0x8a
 80066d8:	f000 feaa 	bl	8007430 <__assert_func>
 80066dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066e0:	6006      	str	r6, [r0, #0]
 80066e2:	60c6      	str	r6, [r0, #12]
 80066e4:	b13c      	cbz	r4, 80066f6 <_Bfree+0x3a>
 80066e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066e8:	6862      	ldr	r2, [r4, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066f0:	6021      	str	r1, [r4, #0]
 80066f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	0800792d 	.word	0x0800792d
 80066fc:	08007a10 	.word	0x08007a10

08006700 <__multadd>:
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	690d      	ldr	r5, [r1, #16]
 8006706:	4607      	mov	r7, r0
 8006708:	460c      	mov	r4, r1
 800670a:	461e      	mov	r6, r3
 800670c:	f101 0c14 	add.w	ip, r1, #20
 8006710:	2000      	movs	r0, #0
 8006712:	f8dc 3000 	ldr.w	r3, [ip]
 8006716:	b299      	uxth	r1, r3
 8006718:	fb02 6101 	mla	r1, r2, r1, r6
 800671c:	0c1e      	lsrs	r6, r3, #16
 800671e:	0c0b      	lsrs	r3, r1, #16
 8006720:	fb02 3306 	mla	r3, r2, r6, r3
 8006724:	b289      	uxth	r1, r1
 8006726:	3001      	adds	r0, #1
 8006728:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800672c:	4285      	cmp	r5, r0
 800672e:	f84c 1b04 	str.w	r1, [ip], #4
 8006732:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006736:	dcec      	bgt.n	8006712 <__multadd+0x12>
 8006738:	b30e      	cbz	r6, 800677e <__multadd+0x7e>
 800673a:	68a3      	ldr	r3, [r4, #8]
 800673c:	42ab      	cmp	r3, r5
 800673e:	dc19      	bgt.n	8006774 <__multadd+0x74>
 8006740:	6861      	ldr	r1, [r4, #4]
 8006742:	4638      	mov	r0, r7
 8006744:	3101      	adds	r1, #1
 8006746:	f7ff ff79 	bl	800663c <_Balloc>
 800674a:	4680      	mov	r8, r0
 800674c:	b928      	cbnz	r0, 800675a <__multadd+0x5a>
 800674e:	4602      	mov	r2, r0
 8006750:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <__multadd+0x84>)
 8006752:	480d      	ldr	r0, [pc, #52]	; (8006788 <__multadd+0x88>)
 8006754:	21b5      	movs	r1, #181	; 0xb5
 8006756:	f000 fe6b 	bl	8007430 <__assert_func>
 800675a:	6922      	ldr	r2, [r4, #16]
 800675c:	3202      	adds	r2, #2
 800675e:	f104 010c 	add.w	r1, r4, #12
 8006762:	0092      	lsls	r2, r2, #2
 8006764:	300c      	adds	r0, #12
 8006766:	f7ff ff5b 	bl	8006620 <memcpy>
 800676a:	4621      	mov	r1, r4
 800676c:	4638      	mov	r0, r7
 800676e:	f7ff ffa5 	bl	80066bc <_Bfree>
 8006772:	4644      	mov	r4, r8
 8006774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006778:	3501      	adds	r5, #1
 800677a:	615e      	str	r6, [r3, #20]
 800677c:	6125      	str	r5, [r4, #16]
 800677e:	4620      	mov	r0, r4
 8006780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006784:	0800799f 	.word	0x0800799f
 8006788:	08007a10 	.word	0x08007a10

0800678c <__hi0bits>:
 800678c:	0c03      	lsrs	r3, r0, #16
 800678e:	041b      	lsls	r3, r3, #16
 8006790:	b9d3      	cbnz	r3, 80067c8 <__hi0bits+0x3c>
 8006792:	0400      	lsls	r0, r0, #16
 8006794:	2310      	movs	r3, #16
 8006796:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800679a:	bf04      	itt	eq
 800679c:	0200      	lsleq	r0, r0, #8
 800679e:	3308      	addeq	r3, #8
 80067a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80067a4:	bf04      	itt	eq
 80067a6:	0100      	lsleq	r0, r0, #4
 80067a8:	3304      	addeq	r3, #4
 80067aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80067ae:	bf04      	itt	eq
 80067b0:	0080      	lsleq	r0, r0, #2
 80067b2:	3302      	addeq	r3, #2
 80067b4:	2800      	cmp	r0, #0
 80067b6:	db05      	blt.n	80067c4 <__hi0bits+0x38>
 80067b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80067bc:	f103 0301 	add.w	r3, r3, #1
 80067c0:	bf08      	it	eq
 80067c2:	2320      	moveq	r3, #32
 80067c4:	4618      	mov	r0, r3
 80067c6:	4770      	bx	lr
 80067c8:	2300      	movs	r3, #0
 80067ca:	e7e4      	b.n	8006796 <__hi0bits+0xa>

080067cc <__lo0bits>:
 80067cc:	6803      	ldr	r3, [r0, #0]
 80067ce:	f013 0207 	ands.w	r2, r3, #7
 80067d2:	4601      	mov	r1, r0
 80067d4:	d00b      	beq.n	80067ee <__lo0bits+0x22>
 80067d6:	07da      	lsls	r2, r3, #31
 80067d8:	d423      	bmi.n	8006822 <__lo0bits+0x56>
 80067da:	0798      	lsls	r0, r3, #30
 80067dc:	bf49      	itett	mi
 80067de:	085b      	lsrmi	r3, r3, #1
 80067e0:	089b      	lsrpl	r3, r3, #2
 80067e2:	2001      	movmi	r0, #1
 80067e4:	600b      	strmi	r3, [r1, #0]
 80067e6:	bf5c      	itt	pl
 80067e8:	600b      	strpl	r3, [r1, #0]
 80067ea:	2002      	movpl	r0, #2
 80067ec:	4770      	bx	lr
 80067ee:	b298      	uxth	r0, r3
 80067f0:	b9a8      	cbnz	r0, 800681e <__lo0bits+0x52>
 80067f2:	0c1b      	lsrs	r3, r3, #16
 80067f4:	2010      	movs	r0, #16
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	b90a      	cbnz	r2, 80067fe <__lo0bits+0x32>
 80067fa:	3008      	adds	r0, #8
 80067fc:	0a1b      	lsrs	r3, r3, #8
 80067fe:	071a      	lsls	r2, r3, #28
 8006800:	bf04      	itt	eq
 8006802:	091b      	lsreq	r3, r3, #4
 8006804:	3004      	addeq	r0, #4
 8006806:	079a      	lsls	r2, r3, #30
 8006808:	bf04      	itt	eq
 800680a:	089b      	lsreq	r3, r3, #2
 800680c:	3002      	addeq	r0, #2
 800680e:	07da      	lsls	r2, r3, #31
 8006810:	d403      	bmi.n	800681a <__lo0bits+0x4e>
 8006812:	085b      	lsrs	r3, r3, #1
 8006814:	f100 0001 	add.w	r0, r0, #1
 8006818:	d005      	beq.n	8006826 <__lo0bits+0x5a>
 800681a:	600b      	str	r3, [r1, #0]
 800681c:	4770      	bx	lr
 800681e:	4610      	mov	r0, r2
 8006820:	e7e9      	b.n	80067f6 <__lo0bits+0x2a>
 8006822:	2000      	movs	r0, #0
 8006824:	4770      	bx	lr
 8006826:	2020      	movs	r0, #32
 8006828:	4770      	bx	lr
	...

0800682c <__i2b>:
 800682c:	b510      	push	{r4, lr}
 800682e:	460c      	mov	r4, r1
 8006830:	2101      	movs	r1, #1
 8006832:	f7ff ff03 	bl	800663c <_Balloc>
 8006836:	4602      	mov	r2, r0
 8006838:	b928      	cbnz	r0, 8006846 <__i2b+0x1a>
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <__i2b+0x24>)
 800683c:	4805      	ldr	r0, [pc, #20]	; (8006854 <__i2b+0x28>)
 800683e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006842:	f000 fdf5 	bl	8007430 <__assert_func>
 8006846:	2301      	movs	r3, #1
 8006848:	6144      	str	r4, [r0, #20]
 800684a:	6103      	str	r3, [r0, #16]
 800684c:	bd10      	pop	{r4, pc}
 800684e:	bf00      	nop
 8006850:	0800799f 	.word	0x0800799f
 8006854:	08007a10 	.word	0x08007a10

08006858 <__multiply>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	4691      	mov	r9, r2
 800685e:	690a      	ldr	r2, [r1, #16]
 8006860:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006864:	429a      	cmp	r2, r3
 8006866:	bfb8      	it	lt
 8006868:	460b      	movlt	r3, r1
 800686a:	460c      	mov	r4, r1
 800686c:	bfbc      	itt	lt
 800686e:	464c      	movlt	r4, r9
 8006870:	4699      	movlt	r9, r3
 8006872:	6927      	ldr	r7, [r4, #16]
 8006874:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006878:	68a3      	ldr	r3, [r4, #8]
 800687a:	6861      	ldr	r1, [r4, #4]
 800687c:	eb07 060a 	add.w	r6, r7, sl
 8006880:	42b3      	cmp	r3, r6
 8006882:	b085      	sub	sp, #20
 8006884:	bfb8      	it	lt
 8006886:	3101      	addlt	r1, #1
 8006888:	f7ff fed8 	bl	800663c <_Balloc>
 800688c:	b930      	cbnz	r0, 800689c <__multiply+0x44>
 800688e:	4602      	mov	r2, r0
 8006890:	4b44      	ldr	r3, [pc, #272]	; (80069a4 <__multiply+0x14c>)
 8006892:	4845      	ldr	r0, [pc, #276]	; (80069a8 <__multiply+0x150>)
 8006894:	f240 115d 	movw	r1, #349	; 0x15d
 8006898:	f000 fdca 	bl	8007430 <__assert_func>
 800689c:	f100 0514 	add.w	r5, r0, #20
 80068a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068a4:	462b      	mov	r3, r5
 80068a6:	2200      	movs	r2, #0
 80068a8:	4543      	cmp	r3, r8
 80068aa:	d321      	bcc.n	80068f0 <__multiply+0x98>
 80068ac:	f104 0314 	add.w	r3, r4, #20
 80068b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068b4:	f109 0314 	add.w	r3, r9, #20
 80068b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068bc:	9202      	str	r2, [sp, #8]
 80068be:	1b3a      	subs	r2, r7, r4
 80068c0:	3a15      	subs	r2, #21
 80068c2:	f022 0203 	bic.w	r2, r2, #3
 80068c6:	3204      	adds	r2, #4
 80068c8:	f104 0115 	add.w	r1, r4, #21
 80068cc:	428f      	cmp	r7, r1
 80068ce:	bf38      	it	cc
 80068d0:	2204      	movcc	r2, #4
 80068d2:	9201      	str	r2, [sp, #4]
 80068d4:	9a02      	ldr	r2, [sp, #8]
 80068d6:	9303      	str	r3, [sp, #12]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d80c      	bhi.n	80068f6 <__multiply+0x9e>
 80068dc:	2e00      	cmp	r6, #0
 80068de:	dd03      	ble.n	80068e8 <__multiply+0x90>
 80068e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d05a      	beq.n	800699e <__multiply+0x146>
 80068e8:	6106      	str	r6, [r0, #16]
 80068ea:	b005      	add	sp, #20
 80068ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f0:	f843 2b04 	str.w	r2, [r3], #4
 80068f4:	e7d8      	b.n	80068a8 <__multiply+0x50>
 80068f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80068fa:	f1ba 0f00 	cmp.w	sl, #0
 80068fe:	d024      	beq.n	800694a <__multiply+0xf2>
 8006900:	f104 0e14 	add.w	lr, r4, #20
 8006904:	46a9      	mov	r9, r5
 8006906:	f04f 0c00 	mov.w	ip, #0
 800690a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800690e:	f8d9 1000 	ldr.w	r1, [r9]
 8006912:	fa1f fb82 	uxth.w	fp, r2
 8006916:	b289      	uxth	r1, r1
 8006918:	fb0a 110b 	mla	r1, sl, fp, r1
 800691c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006920:	f8d9 2000 	ldr.w	r2, [r9]
 8006924:	4461      	add	r1, ip
 8006926:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800692a:	fb0a c20b 	mla	r2, sl, fp, ip
 800692e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006932:	b289      	uxth	r1, r1
 8006934:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006938:	4577      	cmp	r7, lr
 800693a:	f849 1b04 	str.w	r1, [r9], #4
 800693e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006942:	d8e2      	bhi.n	800690a <__multiply+0xb2>
 8006944:	9a01      	ldr	r2, [sp, #4]
 8006946:	f845 c002 	str.w	ip, [r5, r2]
 800694a:	9a03      	ldr	r2, [sp, #12]
 800694c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006950:	3304      	adds	r3, #4
 8006952:	f1b9 0f00 	cmp.w	r9, #0
 8006956:	d020      	beq.n	800699a <__multiply+0x142>
 8006958:	6829      	ldr	r1, [r5, #0]
 800695a:	f104 0c14 	add.w	ip, r4, #20
 800695e:	46ae      	mov	lr, r5
 8006960:	f04f 0a00 	mov.w	sl, #0
 8006964:	f8bc b000 	ldrh.w	fp, [ip]
 8006968:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800696c:	fb09 220b 	mla	r2, r9, fp, r2
 8006970:	4492      	add	sl, r2
 8006972:	b289      	uxth	r1, r1
 8006974:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006978:	f84e 1b04 	str.w	r1, [lr], #4
 800697c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006980:	f8be 1000 	ldrh.w	r1, [lr]
 8006984:	0c12      	lsrs	r2, r2, #16
 8006986:	fb09 1102 	mla	r1, r9, r2, r1
 800698a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800698e:	4567      	cmp	r7, ip
 8006990:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006994:	d8e6      	bhi.n	8006964 <__multiply+0x10c>
 8006996:	9a01      	ldr	r2, [sp, #4]
 8006998:	50a9      	str	r1, [r5, r2]
 800699a:	3504      	adds	r5, #4
 800699c:	e79a      	b.n	80068d4 <__multiply+0x7c>
 800699e:	3e01      	subs	r6, #1
 80069a0:	e79c      	b.n	80068dc <__multiply+0x84>
 80069a2:	bf00      	nop
 80069a4:	0800799f 	.word	0x0800799f
 80069a8:	08007a10 	.word	0x08007a10

080069ac <__pow5mult>:
 80069ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b0:	4615      	mov	r5, r2
 80069b2:	f012 0203 	ands.w	r2, r2, #3
 80069b6:	4606      	mov	r6, r0
 80069b8:	460f      	mov	r7, r1
 80069ba:	d007      	beq.n	80069cc <__pow5mult+0x20>
 80069bc:	4c25      	ldr	r4, [pc, #148]	; (8006a54 <__pow5mult+0xa8>)
 80069be:	3a01      	subs	r2, #1
 80069c0:	2300      	movs	r3, #0
 80069c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069c6:	f7ff fe9b 	bl	8006700 <__multadd>
 80069ca:	4607      	mov	r7, r0
 80069cc:	10ad      	asrs	r5, r5, #2
 80069ce:	d03d      	beq.n	8006a4c <__pow5mult+0xa0>
 80069d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069d2:	b97c      	cbnz	r4, 80069f4 <__pow5mult+0x48>
 80069d4:	2010      	movs	r0, #16
 80069d6:	f7ff fe1b 	bl	8006610 <malloc>
 80069da:	4602      	mov	r2, r0
 80069dc:	6270      	str	r0, [r6, #36]	; 0x24
 80069de:	b928      	cbnz	r0, 80069ec <__pow5mult+0x40>
 80069e0:	4b1d      	ldr	r3, [pc, #116]	; (8006a58 <__pow5mult+0xac>)
 80069e2:	481e      	ldr	r0, [pc, #120]	; (8006a5c <__pow5mult+0xb0>)
 80069e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069e8:	f000 fd22 	bl	8007430 <__assert_func>
 80069ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069f0:	6004      	str	r4, [r0, #0]
 80069f2:	60c4      	str	r4, [r0, #12]
 80069f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069fc:	b94c      	cbnz	r4, 8006a12 <__pow5mult+0x66>
 80069fe:	f240 2171 	movw	r1, #625	; 0x271
 8006a02:	4630      	mov	r0, r6
 8006a04:	f7ff ff12 	bl	800682c <__i2b>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a0e:	4604      	mov	r4, r0
 8006a10:	6003      	str	r3, [r0, #0]
 8006a12:	f04f 0900 	mov.w	r9, #0
 8006a16:	07eb      	lsls	r3, r5, #31
 8006a18:	d50a      	bpl.n	8006a30 <__pow5mult+0x84>
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ff1a 	bl	8006858 <__multiply>
 8006a24:	4639      	mov	r1, r7
 8006a26:	4680      	mov	r8, r0
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7ff fe47 	bl	80066bc <_Bfree>
 8006a2e:	4647      	mov	r7, r8
 8006a30:	106d      	asrs	r5, r5, #1
 8006a32:	d00b      	beq.n	8006a4c <__pow5mult+0xa0>
 8006a34:	6820      	ldr	r0, [r4, #0]
 8006a36:	b938      	cbnz	r0, 8006a48 <__pow5mult+0x9c>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f7ff ff0b 	bl	8006858 <__multiply>
 8006a42:	6020      	str	r0, [r4, #0]
 8006a44:	f8c0 9000 	str.w	r9, [r0]
 8006a48:	4604      	mov	r4, r0
 8006a4a:	e7e4      	b.n	8006a16 <__pow5mult+0x6a>
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a52:	bf00      	nop
 8006a54:	08007b60 	.word	0x08007b60
 8006a58:	0800792d 	.word	0x0800792d
 8006a5c:	08007a10 	.word	0x08007a10

08006a60 <__lshift>:
 8006a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	460c      	mov	r4, r1
 8006a66:	6849      	ldr	r1, [r1, #4]
 8006a68:	6923      	ldr	r3, [r4, #16]
 8006a6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	4607      	mov	r7, r0
 8006a72:	4691      	mov	r9, r2
 8006a74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a78:	f108 0601 	add.w	r6, r8, #1
 8006a7c:	42b3      	cmp	r3, r6
 8006a7e:	db0b      	blt.n	8006a98 <__lshift+0x38>
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff fddb 	bl	800663c <_Balloc>
 8006a86:	4605      	mov	r5, r0
 8006a88:	b948      	cbnz	r0, 8006a9e <__lshift+0x3e>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4b2a      	ldr	r3, [pc, #168]	; (8006b38 <__lshift+0xd8>)
 8006a8e:	482b      	ldr	r0, [pc, #172]	; (8006b3c <__lshift+0xdc>)
 8006a90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a94:	f000 fccc 	bl	8007430 <__assert_func>
 8006a98:	3101      	adds	r1, #1
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	e7ee      	b.n	8006a7c <__lshift+0x1c>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f100 0114 	add.w	r1, r0, #20
 8006aa4:	f100 0210 	add.w	r2, r0, #16
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	4553      	cmp	r3, sl
 8006aac:	db37      	blt.n	8006b1e <__lshift+0xbe>
 8006aae:	6920      	ldr	r0, [r4, #16]
 8006ab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ab4:	f104 0314 	add.w	r3, r4, #20
 8006ab8:	f019 091f 	ands.w	r9, r9, #31
 8006abc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ac0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ac4:	d02f      	beq.n	8006b26 <__lshift+0xc6>
 8006ac6:	f1c9 0e20 	rsb	lr, r9, #32
 8006aca:	468a      	mov	sl, r1
 8006acc:	f04f 0c00 	mov.w	ip, #0
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	fa02 f209 	lsl.w	r2, r2, r9
 8006ad6:	ea42 020c 	orr.w	r2, r2, ip
 8006ada:	f84a 2b04 	str.w	r2, [sl], #4
 8006ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ae2:	4298      	cmp	r0, r3
 8006ae4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ae8:	d8f2      	bhi.n	8006ad0 <__lshift+0x70>
 8006aea:	1b03      	subs	r3, r0, r4
 8006aec:	3b15      	subs	r3, #21
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	3304      	adds	r3, #4
 8006af4:	f104 0215 	add.w	r2, r4, #21
 8006af8:	4290      	cmp	r0, r2
 8006afa:	bf38      	it	cc
 8006afc:	2304      	movcc	r3, #4
 8006afe:	f841 c003 	str.w	ip, [r1, r3]
 8006b02:	f1bc 0f00 	cmp.w	ip, #0
 8006b06:	d001      	beq.n	8006b0c <__lshift+0xac>
 8006b08:	f108 0602 	add.w	r6, r8, #2
 8006b0c:	3e01      	subs	r6, #1
 8006b0e:	4638      	mov	r0, r7
 8006b10:	612e      	str	r6, [r5, #16]
 8006b12:	4621      	mov	r1, r4
 8006b14:	f7ff fdd2 	bl	80066bc <_Bfree>
 8006b18:	4628      	mov	r0, r5
 8006b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b22:	3301      	adds	r3, #1
 8006b24:	e7c1      	b.n	8006aaa <__lshift+0x4a>
 8006b26:	3904      	subs	r1, #4
 8006b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b30:	4298      	cmp	r0, r3
 8006b32:	d8f9      	bhi.n	8006b28 <__lshift+0xc8>
 8006b34:	e7ea      	b.n	8006b0c <__lshift+0xac>
 8006b36:	bf00      	nop
 8006b38:	0800799f 	.word	0x0800799f
 8006b3c:	08007a10 	.word	0x08007a10

08006b40 <__mcmp>:
 8006b40:	b530      	push	{r4, r5, lr}
 8006b42:	6902      	ldr	r2, [r0, #16]
 8006b44:	690c      	ldr	r4, [r1, #16]
 8006b46:	1b12      	subs	r2, r2, r4
 8006b48:	d10e      	bne.n	8006b68 <__mcmp+0x28>
 8006b4a:	f100 0314 	add.w	r3, r0, #20
 8006b4e:	3114      	adds	r1, #20
 8006b50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006b54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006b58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b60:	42a5      	cmp	r5, r4
 8006b62:	d003      	beq.n	8006b6c <__mcmp+0x2c>
 8006b64:	d305      	bcc.n	8006b72 <__mcmp+0x32>
 8006b66:	2201      	movs	r2, #1
 8006b68:	4610      	mov	r0, r2
 8006b6a:	bd30      	pop	{r4, r5, pc}
 8006b6c:	4283      	cmp	r3, r0
 8006b6e:	d3f3      	bcc.n	8006b58 <__mcmp+0x18>
 8006b70:	e7fa      	b.n	8006b68 <__mcmp+0x28>
 8006b72:	f04f 32ff 	mov.w	r2, #4294967295
 8006b76:	e7f7      	b.n	8006b68 <__mcmp+0x28>

08006b78 <__mdiff>:
 8006b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	4606      	mov	r6, r0
 8006b80:	4611      	mov	r1, r2
 8006b82:	4620      	mov	r0, r4
 8006b84:	4690      	mov	r8, r2
 8006b86:	f7ff ffdb 	bl	8006b40 <__mcmp>
 8006b8a:	1e05      	subs	r5, r0, #0
 8006b8c:	d110      	bne.n	8006bb0 <__mdiff+0x38>
 8006b8e:	4629      	mov	r1, r5
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff fd53 	bl	800663c <_Balloc>
 8006b96:	b930      	cbnz	r0, 8006ba6 <__mdiff+0x2e>
 8006b98:	4b3a      	ldr	r3, [pc, #232]	; (8006c84 <__mdiff+0x10c>)
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	f240 2132 	movw	r1, #562	; 0x232
 8006ba0:	4839      	ldr	r0, [pc, #228]	; (8006c88 <__mdiff+0x110>)
 8006ba2:	f000 fc45 	bl	8007430 <__assert_func>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006bac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb0:	bfa4      	itt	ge
 8006bb2:	4643      	movge	r3, r8
 8006bb4:	46a0      	movge	r8, r4
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bbc:	bfa6      	itte	ge
 8006bbe:	461c      	movge	r4, r3
 8006bc0:	2500      	movge	r5, #0
 8006bc2:	2501      	movlt	r5, #1
 8006bc4:	f7ff fd3a 	bl	800663c <_Balloc>
 8006bc8:	b920      	cbnz	r0, 8006bd4 <__mdiff+0x5c>
 8006bca:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <__mdiff+0x10c>)
 8006bcc:	4602      	mov	r2, r0
 8006bce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006bd2:	e7e5      	b.n	8006ba0 <__mdiff+0x28>
 8006bd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006bd8:	6926      	ldr	r6, [r4, #16]
 8006bda:	60c5      	str	r5, [r0, #12]
 8006bdc:	f104 0914 	add.w	r9, r4, #20
 8006be0:	f108 0514 	add.w	r5, r8, #20
 8006be4:	f100 0e14 	add.w	lr, r0, #20
 8006be8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006bec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bf0:	f108 0210 	add.w	r2, r8, #16
 8006bf4:	46f2      	mov	sl, lr
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c00:	fa1f f883 	uxth.w	r8, r3
 8006c04:	fa11 f18b 	uxtah	r1, r1, fp
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	eba1 0808 	sub.w	r8, r1, r8
 8006c0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c16:	fa1f f888 	uxth.w	r8, r8
 8006c1a:	1419      	asrs	r1, r3, #16
 8006c1c:	454e      	cmp	r6, r9
 8006c1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c22:	f84a 3b04 	str.w	r3, [sl], #4
 8006c26:	d8e7      	bhi.n	8006bf8 <__mdiff+0x80>
 8006c28:	1b33      	subs	r3, r6, r4
 8006c2a:	3b15      	subs	r3, #21
 8006c2c:	f023 0303 	bic.w	r3, r3, #3
 8006c30:	3304      	adds	r3, #4
 8006c32:	3415      	adds	r4, #21
 8006c34:	42a6      	cmp	r6, r4
 8006c36:	bf38      	it	cc
 8006c38:	2304      	movcc	r3, #4
 8006c3a:	441d      	add	r5, r3
 8006c3c:	4473      	add	r3, lr
 8006c3e:	469e      	mov	lr, r3
 8006c40:	462e      	mov	r6, r5
 8006c42:	4566      	cmp	r6, ip
 8006c44:	d30e      	bcc.n	8006c64 <__mdiff+0xec>
 8006c46:	f10c 0203 	add.w	r2, ip, #3
 8006c4a:	1b52      	subs	r2, r2, r5
 8006c4c:	f022 0203 	bic.w	r2, r2, #3
 8006c50:	3d03      	subs	r5, #3
 8006c52:	45ac      	cmp	ip, r5
 8006c54:	bf38      	it	cc
 8006c56:	2200      	movcc	r2, #0
 8006c58:	441a      	add	r2, r3
 8006c5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006c5e:	b17b      	cbz	r3, 8006c80 <__mdiff+0x108>
 8006c60:	6107      	str	r7, [r0, #16]
 8006c62:	e7a3      	b.n	8006bac <__mdiff+0x34>
 8006c64:	f856 8b04 	ldr.w	r8, [r6], #4
 8006c68:	fa11 f288 	uxtah	r2, r1, r8
 8006c6c:	1414      	asrs	r4, r2, #16
 8006c6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c72:	b292      	uxth	r2, r2
 8006c74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006c78:	f84e 2b04 	str.w	r2, [lr], #4
 8006c7c:	1421      	asrs	r1, r4, #16
 8006c7e:	e7e0      	b.n	8006c42 <__mdiff+0xca>
 8006c80:	3f01      	subs	r7, #1
 8006c82:	e7ea      	b.n	8006c5a <__mdiff+0xe2>
 8006c84:	0800799f 	.word	0x0800799f
 8006c88:	08007a10 	.word	0x08007a10

08006c8c <__d2b>:
 8006c8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c90:	4689      	mov	r9, r1
 8006c92:	2101      	movs	r1, #1
 8006c94:	ec57 6b10 	vmov	r6, r7, d0
 8006c98:	4690      	mov	r8, r2
 8006c9a:	f7ff fccf 	bl	800663c <_Balloc>
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	b930      	cbnz	r0, 8006cb0 <__d2b+0x24>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <__d2b+0xb0>)
 8006ca6:	4826      	ldr	r0, [pc, #152]	; (8006d40 <__d2b+0xb4>)
 8006ca8:	f240 310a 	movw	r1, #778	; 0x30a
 8006cac:	f000 fbc0 	bl	8007430 <__assert_func>
 8006cb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006cb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cb8:	bb35      	cbnz	r5, 8006d08 <__d2b+0x7c>
 8006cba:	2e00      	cmp	r6, #0
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	d028      	beq.n	8006d12 <__d2b+0x86>
 8006cc0:	4668      	mov	r0, sp
 8006cc2:	9600      	str	r6, [sp, #0]
 8006cc4:	f7ff fd82 	bl	80067cc <__lo0bits>
 8006cc8:	9900      	ldr	r1, [sp, #0]
 8006cca:	b300      	cbz	r0, 8006d0e <__d2b+0x82>
 8006ccc:	9a01      	ldr	r2, [sp, #4]
 8006cce:	f1c0 0320 	rsb	r3, r0, #32
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	40c2      	lsrs	r2, r0
 8006cda:	6163      	str	r3, [r4, #20]
 8006cdc:	9201      	str	r2, [sp, #4]
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	61a3      	str	r3, [r4, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	bf14      	ite	ne
 8006ce6:	2202      	movne	r2, #2
 8006ce8:	2201      	moveq	r2, #1
 8006cea:	6122      	str	r2, [r4, #16]
 8006cec:	b1d5      	cbz	r5, 8006d24 <__d2b+0x98>
 8006cee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006cf2:	4405      	add	r5, r0
 8006cf4:	f8c9 5000 	str.w	r5, [r9]
 8006cf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006cfc:	f8c8 0000 	str.w	r0, [r8]
 8006d00:	4620      	mov	r0, r4
 8006d02:	b003      	add	sp, #12
 8006d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d0c:	e7d5      	b.n	8006cba <__d2b+0x2e>
 8006d0e:	6161      	str	r1, [r4, #20]
 8006d10:	e7e5      	b.n	8006cde <__d2b+0x52>
 8006d12:	a801      	add	r0, sp, #4
 8006d14:	f7ff fd5a 	bl	80067cc <__lo0bits>
 8006d18:	9b01      	ldr	r3, [sp, #4]
 8006d1a:	6163      	str	r3, [r4, #20]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	6122      	str	r2, [r4, #16]
 8006d20:	3020      	adds	r0, #32
 8006d22:	e7e3      	b.n	8006cec <__d2b+0x60>
 8006d24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d2c:	f8c9 0000 	str.w	r0, [r9]
 8006d30:	6918      	ldr	r0, [r3, #16]
 8006d32:	f7ff fd2b 	bl	800678c <__hi0bits>
 8006d36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d3a:	e7df      	b.n	8006cfc <__d2b+0x70>
 8006d3c:	0800799f 	.word	0x0800799f
 8006d40:	08007a10 	.word	0x08007a10

08006d44 <_calloc_r>:
 8006d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d46:	fba1 2402 	umull	r2, r4, r1, r2
 8006d4a:	b94c      	cbnz	r4, 8006d60 <_calloc_r+0x1c>
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	9201      	str	r2, [sp, #4]
 8006d50:	f000 f87a 	bl	8006e48 <_malloc_r>
 8006d54:	9a01      	ldr	r2, [sp, #4]
 8006d56:	4605      	mov	r5, r0
 8006d58:	b930      	cbnz	r0, 8006d68 <_calloc_r+0x24>
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	b003      	add	sp, #12
 8006d5e:	bd30      	pop	{r4, r5, pc}
 8006d60:	220c      	movs	r2, #12
 8006d62:	6002      	str	r2, [r0, #0]
 8006d64:	2500      	movs	r5, #0
 8006d66:	e7f8      	b.n	8006d5a <_calloc_r+0x16>
 8006d68:	4621      	mov	r1, r4
 8006d6a:	f7fe f84d 	bl	8004e08 <memset>
 8006d6e:	e7f4      	b.n	8006d5a <_calloc_r+0x16>

08006d70 <_free_r>:
 8006d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d72:	2900      	cmp	r1, #0
 8006d74:	d044      	beq.n	8006e00 <_free_r+0x90>
 8006d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7a:	9001      	str	r0, [sp, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d82:	bfb8      	it	lt
 8006d84:	18e4      	addlt	r4, r4, r3
 8006d86:	f000 fcdf 	bl	8007748 <__malloc_lock>
 8006d8a:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <_free_r+0x94>)
 8006d8c:	9801      	ldr	r0, [sp, #4]
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	b933      	cbnz	r3, 8006da0 <_free_r+0x30>
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	6014      	str	r4, [r2, #0]
 8006d96:	b003      	add	sp, #12
 8006d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d9c:	f000 bcda 	b.w	8007754 <__malloc_unlock>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d908      	bls.n	8006db6 <_free_r+0x46>
 8006da4:	6825      	ldr	r5, [r4, #0]
 8006da6:	1961      	adds	r1, r4, r5
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf01      	itttt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	1949      	addeq	r1, r1, r5
 8006db2:	6021      	streq	r1, [r4, #0]
 8006db4:	e7ed      	b.n	8006d92 <_free_r+0x22>
 8006db6:	461a      	mov	r2, r3
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	b10b      	cbz	r3, 8006dc0 <_free_r+0x50>
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d9fa      	bls.n	8006db6 <_free_r+0x46>
 8006dc0:	6811      	ldr	r1, [r2, #0]
 8006dc2:	1855      	adds	r5, r2, r1
 8006dc4:	42a5      	cmp	r5, r4
 8006dc6:	d10b      	bne.n	8006de0 <_free_r+0x70>
 8006dc8:	6824      	ldr	r4, [r4, #0]
 8006dca:	4421      	add	r1, r4
 8006dcc:	1854      	adds	r4, r2, r1
 8006dce:	42a3      	cmp	r3, r4
 8006dd0:	6011      	str	r1, [r2, #0]
 8006dd2:	d1e0      	bne.n	8006d96 <_free_r+0x26>
 8006dd4:	681c      	ldr	r4, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	6053      	str	r3, [r2, #4]
 8006dda:	4421      	add	r1, r4
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	e7da      	b.n	8006d96 <_free_r+0x26>
 8006de0:	d902      	bls.n	8006de8 <_free_r+0x78>
 8006de2:	230c      	movs	r3, #12
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	e7d6      	b.n	8006d96 <_free_r+0x26>
 8006de8:	6825      	ldr	r5, [r4, #0]
 8006dea:	1961      	adds	r1, r4, r5
 8006dec:	428b      	cmp	r3, r1
 8006dee:	bf04      	itt	eq
 8006df0:	6819      	ldreq	r1, [r3, #0]
 8006df2:	685b      	ldreq	r3, [r3, #4]
 8006df4:	6063      	str	r3, [r4, #4]
 8006df6:	bf04      	itt	eq
 8006df8:	1949      	addeq	r1, r1, r5
 8006dfa:	6021      	streq	r1, [r4, #0]
 8006dfc:	6054      	str	r4, [r2, #4]
 8006dfe:	e7ca      	b.n	8006d96 <_free_r+0x26>
 8006e00:	b003      	add	sp, #12
 8006e02:	bd30      	pop	{r4, r5, pc}
 8006e04:	20000330 	.word	0x20000330

08006e08 <sbrk_aligned>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4e0e      	ldr	r6, [pc, #56]	; (8006e44 <sbrk_aligned+0x3c>)
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	6831      	ldr	r1, [r6, #0]
 8006e10:	4605      	mov	r5, r0
 8006e12:	b911      	cbnz	r1, 8006e1a <sbrk_aligned+0x12>
 8006e14:	f000 f9e6 	bl	80071e4 <_sbrk_r>
 8006e18:	6030      	str	r0, [r6, #0]
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 f9e1 	bl	80071e4 <_sbrk_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d00a      	beq.n	8006e3c <sbrk_aligned+0x34>
 8006e26:	1cc4      	adds	r4, r0, #3
 8006e28:	f024 0403 	bic.w	r4, r4, #3
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d007      	beq.n	8006e40 <sbrk_aligned+0x38>
 8006e30:	1a21      	subs	r1, r4, r0
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 f9d6 	bl	80071e4 <_sbrk_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d101      	bne.n	8006e40 <sbrk_aligned+0x38>
 8006e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e40:	4620      	mov	r0, r4
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	20000334 	.word	0x20000334

08006e48 <_malloc_r>:
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	1ccd      	adds	r5, r1, #3
 8006e4e:	f025 0503 	bic.w	r5, r5, #3
 8006e52:	3508      	adds	r5, #8
 8006e54:	2d0c      	cmp	r5, #12
 8006e56:	bf38      	it	cc
 8006e58:	250c      	movcc	r5, #12
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	db01      	blt.n	8006e64 <_malloc_r+0x1c>
 8006e60:	42a9      	cmp	r1, r5
 8006e62:	d905      	bls.n	8006e70 <_malloc_r+0x28>
 8006e64:	230c      	movs	r3, #12
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	2600      	movs	r6, #0
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e70:	4e2e      	ldr	r6, [pc, #184]	; (8006f2c <_malloc_r+0xe4>)
 8006e72:	f000 fc69 	bl	8007748 <__malloc_lock>
 8006e76:	6833      	ldr	r3, [r6, #0]
 8006e78:	461c      	mov	r4, r3
 8006e7a:	bb34      	cbnz	r4, 8006eca <_malloc_r+0x82>
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4638      	mov	r0, r7
 8006e80:	f7ff ffc2 	bl	8006e08 <sbrk_aligned>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	4604      	mov	r4, r0
 8006e88:	d14d      	bne.n	8006f26 <_malloc_r+0xde>
 8006e8a:	6834      	ldr	r4, [r6, #0]
 8006e8c:	4626      	mov	r6, r4
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	d140      	bne.n	8006f14 <_malloc_r+0xcc>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	4631      	mov	r1, r6
 8006e96:	4638      	mov	r0, r7
 8006e98:	eb04 0803 	add.w	r8, r4, r3
 8006e9c:	f000 f9a2 	bl	80071e4 <_sbrk_r>
 8006ea0:	4580      	cmp	r8, r0
 8006ea2:	d13a      	bne.n	8006f1a <_malloc_r+0xd2>
 8006ea4:	6821      	ldr	r1, [r4, #0]
 8006ea6:	3503      	adds	r5, #3
 8006ea8:	1a6d      	subs	r5, r5, r1
 8006eaa:	f025 0503 	bic.w	r5, r5, #3
 8006eae:	3508      	adds	r5, #8
 8006eb0:	2d0c      	cmp	r5, #12
 8006eb2:	bf38      	it	cc
 8006eb4:	250c      	movcc	r5, #12
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f7ff ffa5 	bl	8006e08 <sbrk_aligned>
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d02b      	beq.n	8006f1a <_malloc_r+0xd2>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	442b      	add	r3, r5
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	e00e      	b.n	8006ee8 <_malloc_r+0xa0>
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	1b52      	subs	r2, r2, r5
 8006ece:	d41e      	bmi.n	8006f0e <_malloc_r+0xc6>
 8006ed0:	2a0b      	cmp	r2, #11
 8006ed2:	d916      	bls.n	8006f02 <_malloc_r+0xba>
 8006ed4:	1961      	adds	r1, r4, r5
 8006ed6:	42a3      	cmp	r3, r4
 8006ed8:	6025      	str	r5, [r4, #0]
 8006eda:	bf18      	it	ne
 8006edc:	6059      	strne	r1, [r3, #4]
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	bf08      	it	eq
 8006ee2:	6031      	streq	r1, [r6, #0]
 8006ee4:	5162      	str	r2, [r4, r5]
 8006ee6:	604b      	str	r3, [r1, #4]
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f104 060b 	add.w	r6, r4, #11
 8006eee:	f000 fc31 	bl	8007754 <__malloc_unlock>
 8006ef2:	f026 0607 	bic.w	r6, r6, #7
 8006ef6:	1d23      	adds	r3, r4, #4
 8006ef8:	1af2      	subs	r2, r6, r3
 8006efa:	d0b6      	beq.n	8006e6a <_malloc_r+0x22>
 8006efc:	1b9b      	subs	r3, r3, r6
 8006efe:	50a3      	str	r3, [r4, r2]
 8006f00:	e7b3      	b.n	8006e6a <_malloc_r+0x22>
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	bf0c      	ite	eq
 8006f08:	6032      	streq	r2, [r6, #0]
 8006f0a:	605a      	strne	r2, [r3, #4]
 8006f0c:	e7ec      	b.n	8006ee8 <_malloc_r+0xa0>
 8006f0e:	4623      	mov	r3, r4
 8006f10:	6864      	ldr	r4, [r4, #4]
 8006f12:	e7b2      	b.n	8006e7a <_malloc_r+0x32>
 8006f14:	4634      	mov	r4, r6
 8006f16:	6876      	ldr	r6, [r6, #4]
 8006f18:	e7b9      	b.n	8006e8e <_malloc_r+0x46>
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f000 fc18 	bl	8007754 <__malloc_unlock>
 8006f24:	e7a1      	b.n	8006e6a <_malloc_r+0x22>
 8006f26:	6025      	str	r5, [r4, #0]
 8006f28:	e7de      	b.n	8006ee8 <_malloc_r+0xa0>
 8006f2a:	bf00      	nop
 8006f2c:	20000330 	.word	0x20000330

08006f30 <__sfputc_r>:
 8006f30:	6893      	ldr	r3, [r2, #8]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	b410      	push	{r4}
 8006f38:	6093      	str	r3, [r2, #8]
 8006f3a:	da08      	bge.n	8006f4e <__sfputc_r+0x1e>
 8006f3c:	6994      	ldr	r4, [r2, #24]
 8006f3e:	42a3      	cmp	r3, r4
 8006f40:	db01      	blt.n	8006f46 <__sfputc_r+0x16>
 8006f42:	290a      	cmp	r1, #10
 8006f44:	d103      	bne.n	8006f4e <__sfputc_r+0x1e>
 8006f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f4a:	f000 b99f 	b.w	800728c <__swbuf_r>
 8006f4e:	6813      	ldr	r3, [r2, #0]
 8006f50:	1c58      	adds	r0, r3, #1
 8006f52:	6010      	str	r0, [r2, #0]
 8006f54:	7019      	strb	r1, [r3, #0]
 8006f56:	4608      	mov	r0, r1
 8006f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <__sfputs_r>:
 8006f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f60:	4606      	mov	r6, r0
 8006f62:	460f      	mov	r7, r1
 8006f64:	4614      	mov	r4, r2
 8006f66:	18d5      	adds	r5, r2, r3
 8006f68:	42ac      	cmp	r4, r5
 8006f6a:	d101      	bne.n	8006f70 <__sfputs_r+0x12>
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	e007      	b.n	8006f80 <__sfputs_r+0x22>
 8006f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f74:	463a      	mov	r2, r7
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7ff ffda 	bl	8006f30 <__sfputc_r>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d1f3      	bne.n	8006f68 <__sfputs_r+0xa>
 8006f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f84 <_vfiprintf_r>:
 8006f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f88:	460d      	mov	r5, r1
 8006f8a:	b09d      	sub	sp, #116	; 0x74
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	4698      	mov	r8, r3
 8006f90:	4606      	mov	r6, r0
 8006f92:	b118      	cbz	r0, 8006f9c <_vfiprintf_r+0x18>
 8006f94:	6983      	ldr	r3, [r0, #24]
 8006f96:	b90b      	cbnz	r3, 8006f9c <_vfiprintf_r+0x18>
 8006f98:	f7ff fa94 	bl	80064c4 <__sinit>
 8006f9c:	4b89      	ldr	r3, [pc, #548]	; (80071c4 <_vfiprintf_r+0x240>)
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	d11b      	bne.n	8006fda <_vfiprintf_r+0x56>
 8006fa2:	6875      	ldr	r5, [r6, #4]
 8006fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa6:	07d9      	lsls	r1, r3, #31
 8006fa8:	d405      	bmi.n	8006fb6 <_vfiprintf_r+0x32>
 8006faa:	89ab      	ldrh	r3, [r5, #12]
 8006fac:	059a      	lsls	r2, r3, #22
 8006fae:	d402      	bmi.n	8006fb6 <_vfiprintf_r+0x32>
 8006fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fb2:	f7ff fb2a 	bl	800660a <__retarget_lock_acquire_recursive>
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	071b      	lsls	r3, r3, #28
 8006fba:	d501      	bpl.n	8006fc0 <_vfiprintf_r+0x3c>
 8006fbc:	692b      	ldr	r3, [r5, #16]
 8006fbe:	b9eb      	cbnz	r3, 8006ffc <_vfiprintf_r+0x78>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f000 f9c6 	bl	8007354 <__swsetup_r>
 8006fc8:	b1c0      	cbz	r0, 8006ffc <_vfiprintf_r+0x78>
 8006fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fcc:	07dc      	lsls	r4, r3, #31
 8006fce:	d50e      	bpl.n	8006fee <_vfiprintf_r+0x6a>
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	b01d      	add	sp, #116	; 0x74
 8006fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fda:	4b7b      	ldr	r3, [pc, #492]	; (80071c8 <_vfiprintf_r+0x244>)
 8006fdc:	429d      	cmp	r5, r3
 8006fde:	d101      	bne.n	8006fe4 <_vfiprintf_r+0x60>
 8006fe0:	68b5      	ldr	r5, [r6, #8]
 8006fe2:	e7df      	b.n	8006fa4 <_vfiprintf_r+0x20>
 8006fe4:	4b79      	ldr	r3, [pc, #484]	; (80071cc <_vfiprintf_r+0x248>)
 8006fe6:	429d      	cmp	r5, r3
 8006fe8:	bf08      	it	eq
 8006fea:	68f5      	ldreq	r5, [r6, #12]
 8006fec:	e7da      	b.n	8006fa4 <_vfiprintf_r+0x20>
 8006fee:	89ab      	ldrh	r3, [r5, #12]
 8006ff0:	0598      	lsls	r0, r3, #22
 8006ff2:	d4ed      	bmi.n	8006fd0 <_vfiprintf_r+0x4c>
 8006ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ff6:	f7ff fb09 	bl	800660c <__retarget_lock_release_recursive>
 8006ffa:	e7e9      	b.n	8006fd0 <_vfiprintf_r+0x4c>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8007000:	2320      	movs	r3, #32
 8007002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007006:	f8cd 800c 	str.w	r8, [sp, #12]
 800700a:	2330      	movs	r3, #48	; 0x30
 800700c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071d0 <_vfiprintf_r+0x24c>
 8007010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007014:	f04f 0901 	mov.w	r9, #1
 8007018:	4623      	mov	r3, r4
 800701a:	469a      	mov	sl, r3
 800701c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007020:	b10a      	cbz	r2, 8007026 <_vfiprintf_r+0xa2>
 8007022:	2a25      	cmp	r2, #37	; 0x25
 8007024:	d1f9      	bne.n	800701a <_vfiprintf_r+0x96>
 8007026:	ebba 0b04 	subs.w	fp, sl, r4
 800702a:	d00b      	beq.n	8007044 <_vfiprintf_r+0xc0>
 800702c:	465b      	mov	r3, fp
 800702e:	4622      	mov	r2, r4
 8007030:	4629      	mov	r1, r5
 8007032:	4630      	mov	r0, r6
 8007034:	f7ff ff93 	bl	8006f5e <__sfputs_r>
 8007038:	3001      	adds	r0, #1
 800703a:	f000 80aa 	beq.w	8007192 <_vfiprintf_r+0x20e>
 800703e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007040:	445a      	add	r2, fp
 8007042:	9209      	str	r2, [sp, #36]	; 0x24
 8007044:	f89a 3000 	ldrb.w	r3, [sl]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80a2 	beq.w	8007192 <_vfiprintf_r+0x20e>
 800704e:	2300      	movs	r3, #0
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007058:	f10a 0a01 	add.w	sl, sl, #1
 800705c:	9304      	str	r3, [sp, #16]
 800705e:	9307      	str	r3, [sp, #28]
 8007060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007064:	931a      	str	r3, [sp, #104]	; 0x68
 8007066:	4654      	mov	r4, sl
 8007068:	2205      	movs	r2, #5
 800706a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706e:	4858      	ldr	r0, [pc, #352]	; (80071d0 <_vfiprintf_r+0x24c>)
 8007070:	f7f9 f8b6 	bl	80001e0 <memchr>
 8007074:	9a04      	ldr	r2, [sp, #16]
 8007076:	b9d8      	cbnz	r0, 80070b0 <_vfiprintf_r+0x12c>
 8007078:	06d1      	lsls	r1, r2, #27
 800707a:	bf44      	itt	mi
 800707c:	2320      	movmi	r3, #32
 800707e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007082:	0713      	lsls	r3, r2, #28
 8007084:	bf44      	itt	mi
 8007086:	232b      	movmi	r3, #43	; 0x2b
 8007088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800708c:	f89a 3000 	ldrb.w	r3, [sl]
 8007090:	2b2a      	cmp	r3, #42	; 0x2a
 8007092:	d015      	beq.n	80070c0 <_vfiprintf_r+0x13c>
 8007094:	9a07      	ldr	r2, [sp, #28]
 8007096:	4654      	mov	r4, sl
 8007098:	2000      	movs	r0, #0
 800709a:	f04f 0c0a 	mov.w	ip, #10
 800709e:	4621      	mov	r1, r4
 80070a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070a4:	3b30      	subs	r3, #48	; 0x30
 80070a6:	2b09      	cmp	r3, #9
 80070a8:	d94e      	bls.n	8007148 <_vfiprintf_r+0x1c4>
 80070aa:	b1b0      	cbz	r0, 80070da <_vfiprintf_r+0x156>
 80070ac:	9207      	str	r2, [sp, #28]
 80070ae:	e014      	b.n	80070da <_vfiprintf_r+0x156>
 80070b0:	eba0 0308 	sub.w	r3, r0, r8
 80070b4:	fa09 f303 	lsl.w	r3, r9, r3
 80070b8:	4313      	orrs	r3, r2
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	46a2      	mov	sl, r4
 80070be:	e7d2      	b.n	8007066 <_vfiprintf_r+0xe2>
 80070c0:	9b03      	ldr	r3, [sp, #12]
 80070c2:	1d19      	adds	r1, r3, #4
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	9103      	str	r1, [sp, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	bfbb      	ittet	lt
 80070cc:	425b      	neglt	r3, r3
 80070ce:	f042 0202 	orrlt.w	r2, r2, #2
 80070d2:	9307      	strge	r3, [sp, #28]
 80070d4:	9307      	strlt	r3, [sp, #28]
 80070d6:	bfb8      	it	lt
 80070d8:	9204      	strlt	r2, [sp, #16]
 80070da:	7823      	ldrb	r3, [r4, #0]
 80070dc:	2b2e      	cmp	r3, #46	; 0x2e
 80070de:	d10c      	bne.n	80070fa <_vfiprintf_r+0x176>
 80070e0:	7863      	ldrb	r3, [r4, #1]
 80070e2:	2b2a      	cmp	r3, #42	; 0x2a
 80070e4:	d135      	bne.n	8007152 <_vfiprintf_r+0x1ce>
 80070e6:	9b03      	ldr	r3, [sp, #12]
 80070e8:	1d1a      	adds	r2, r3, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	9203      	str	r2, [sp, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bfb8      	it	lt
 80070f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80070f6:	3402      	adds	r4, #2
 80070f8:	9305      	str	r3, [sp, #20]
 80070fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071e0 <_vfiprintf_r+0x25c>
 80070fe:	7821      	ldrb	r1, [r4, #0]
 8007100:	2203      	movs	r2, #3
 8007102:	4650      	mov	r0, sl
 8007104:	f7f9 f86c 	bl	80001e0 <memchr>
 8007108:	b140      	cbz	r0, 800711c <_vfiprintf_r+0x198>
 800710a:	2340      	movs	r3, #64	; 0x40
 800710c:	eba0 000a 	sub.w	r0, r0, sl
 8007110:	fa03 f000 	lsl.w	r0, r3, r0
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	4303      	orrs	r3, r0
 8007118:	3401      	adds	r4, #1
 800711a:	9304      	str	r3, [sp, #16]
 800711c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007120:	482c      	ldr	r0, [pc, #176]	; (80071d4 <_vfiprintf_r+0x250>)
 8007122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007126:	2206      	movs	r2, #6
 8007128:	f7f9 f85a 	bl	80001e0 <memchr>
 800712c:	2800      	cmp	r0, #0
 800712e:	d03f      	beq.n	80071b0 <_vfiprintf_r+0x22c>
 8007130:	4b29      	ldr	r3, [pc, #164]	; (80071d8 <_vfiprintf_r+0x254>)
 8007132:	bb1b      	cbnz	r3, 800717c <_vfiprintf_r+0x1f8>
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	3307      	adds	r3, #7
 8007138:	f023 0307 	bic.w	r3, r3, #7
 800713c:	3308      	adds	r3, #8
 800713e:	9303      	str	r3, [sp, #12]
 8007140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007142:	443b      	add	r3, r7
 8007144:	9309      	str	r3, [sp, #36]	; 0x24
 8007146:	e767      	b.n	8007018 <_vfiprintf_r+0x94>
 8007148:	fb0c 3202 	mla	r2, ip, r2, r3
 800714c:	460c      	mov	r4, r1
 800714e:	2001      	movs	r0, #1
 8007150:	e7a5      	b.n	800709e <_vfiprintf_r+0x11a>
 8007152:	2300      	movs	r3, #0
 8007154:	3401      	adds	r4, #1
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	4619      	mov	r1, r3
 800715a:	f04f 0c0a 	mov.w	ip, #10
 800715e:	4620      	mov	r0, r4
 8007160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007164:	3a30      	subs	r2, #48	; 0x30
 8007166:	2a09      	cmp	r2, #9
 8007168:	d903      	bls.n	8007172 <_vfiprintf_r+0x1ee>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0c5      	beq.n	80070fa <_vfiprintf_r+0x176>
 800716e:	9105      	str	r1, [sp, #20]
 8007170:	e7c3      	b.n	80070fa <_vfiprintf_r+0x176>
 8007172:	fb0c 2101 	mla	r1, ip, r1, r2
 8007176:	4604      	mov	r4, r0
 8007178:	2301      	movs	r3, #1
 800717a:	e7f0      	b.n	800715e <_vfiprintf_r+0x1da>
 800717c:	ab03      	add	r3, sp, #12
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	462a      	mov	r2, r5
 8007182:	4b16      	ldr	r3, [pc, #88]	; (80071dc <_vfiprintf_r+0x258>)
 8007184:	a904      	add	r1, sp, #16
 8007186:	4630      	mov	r0, r6
 8007188:	f7fd fee6 	bl	8004f58 <_printf_float>
 800718c:	4607      	mov	r7, r0
 800718e:	1c78      	adds	r0, r7, #1
 8007190:	d1d6      	bne.n	8007140 <_vfiprintf_r+0x1bc>
 8007192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007194:	07d9      	lsls	r1, r3, #31
 8007196:	d405      	bmi.n	80071a4 <_vfiprintf_r+0x220>
 8007198:	89ab      	ldrh	r3, [r5, #12]
 800719a:	059a      	lsls	r2, r3, #22
 800719c:	d402      	bmi.n	80071a4 <_vfiprintf_r+0x220>
 800719e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071a0:	f7ff fa34 	bl	800660c <__retarget_lock_release_recursive>
 80071a4:	89ab      	ldrh	r3, [r5, #12]
 80071a6:	065b      	lsls	r3, r3, #25
 80071a8:	f53f af12 	bmi.w	8006fd0 <_vfiprintf_r+0x4c>
 80071ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ae:	e711      	b.n	8006fd4 <_vfiprintf_r+0x50>
 80071b0:	ab03      	add	r3, sp, #12
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	462a      	mov	r2, r5
 80071b6:	4b09      	ldr	r3, [pc, #36]	; (80071dc <_vfiprintf_r+0x258>)
 80071b8:	a904      	add	r1, sp, #16
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7fe f970 	bl	80054a0 <_printf_i>
 80071c0:	e7e4      	b.n	800718c <_vfiprintf_r+0x208>
 80071c2:	bf00      	nop
 80071c4:	080079d0 	.word	0x080079d0
 80071c8:	080079f0 	.word	0x080079f0
 80071cc:	080079b0 	.word	0x080079b0
 80071d0:	08007b6c 	.word	0x08007b6c
 80071d4:	08007b76 	.word	0x08007b76
 80071d8:	08004f59 	.word	0x08004f59
 80071dc:	08006f5f 	.word	0x08006f5f
 80071e0:	08007b72 	.word	0x08007b72

080071e4 <_sbrk_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d06      	ldr	r5, [pc, #24]	; (8007200 <_sbrk_r+0x1c>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	f7f9 ffc4 	bl	800117c <_sbrk>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_sbrk_r+0x1a>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_sbrk_r+0x1a>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	20000338 	.word	0x20000338

08007204 <__sread>:
 8007204:	b510      	push	{r4, lr}
 8007206:	460c      	mov	r4, r1
 8007208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720c:	f000 faa8 	bl	8007760 <_read_r>
 8007210:	2800      	cmp	r0, #0
 8007212:	bfab      	itete	ge
 8007214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007216:	89a3      	ldrhlt	r3, [r4, #12]
 8007218:	181b      	addge	r3, r3, r0
 800721a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800721e:	bfac      	ite	ge
 8007220:	6563      	strge	r3, [r4, #84]	; 0x54
 8007222:	81a3      	strhlt	r3, [r4, #12]
 8007224:	bd10      	pop	{r4, pc}

08007226 <__swrite>:
 8007226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722a:	461f      	mov	r7, r3
 800722c:	898b      	ldrh	r3, [r1, #12]
 800722e:	05db      	lsls	r3, r3, #23
 8007230:	4605      	mov	r5, r0
 8007232:	460c      	mov	r4, r1
 8007234:	4616      	mov	r6, r2
 8007236:	d505      	bpl.n	8007244 <__swrite+0x1e>
 8007238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723c:	2302      	movs	r3, #2
 800723e:	2200      	movs	r2, #0
 8007240:	f000 f9f8 	bl	8007634 <_lseek_r>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800724a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	4632      	mov	r2, r6
 8007252:	463b      	mov	r3, r7
 8007254:	4628      	mov	r0, r5
 8007256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800725a:	f000 b869 	b.w	8007330 <_write_r>

0800725e <__sseek>:
 800725e:	b510      	push	{r4, lr}
 8007260:	460c      	mov	r4, r1
 8007262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007266:	f000 f9e5 	bl	8007634 <_lseek_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	bf15      	itete	ne
 8007270:	6560      	strne	r0, [r4, #84]	; 0x54
 8007272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800727a:	81a3      	strheq	r3, [r4, #12]
 800727c:	bf18      	it	ne
 800727e:	81a3      	strhne	r3, [r4, #12]
 8007280:	bd10      	pop	{r4, pc}

08007282 <__sclose>:
 8007282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007286:	f000 b8f1 	b.w	800746c <_close_r>
	...

0800728c <__swbuf_r>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	460e      	mov	r6, r1
 8007290:	4614      	mov	r4, r2
 8007292:	4605      	mov	r5, r0
 8007294:	b118      	cbz	r0, 800729e <__swbuf_r+0x12>
 8007296:	6983      	ldr	r3, [r0, #24]
 8007298:	b90b      	cbnz	r3, 800729e <__swbuf_r+0x12>
 800729a:	f7ff f913 	bl	80064c4 <__sinit>
 800729e:	4b21      	ldr	r3, [pc, #132]	; (8007324 <__swbuf_r+0x98>)
 80072a0:	429c      	cmp	r4, r3
 80072a2:	d12b      	bne.n	80072fc <__swbuf_r+0x70>
 80072a4:	686c      	ldr	r4, [r5, #4]
 80072a6:	69a3      	ldr	r3, [r4, #24]
 80072a8:	60a3      	str	r3, [r4, #8]
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	071a      	lsls	r2, r3, #28
 80072ae:	d52f      	bpl.n	8007310 <__swbuf_r+0x84>
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	b36b      	cbz	r3, 8007310 <__swbuf_r+0x84>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	6820      	ldr	r0, [r4, #0]
 80072b8:	1ac0      	subs	r0, r0, r3
 80072ba:	6963      	ldr	r3, [r4, #20]
 80072bc:	b2f6      	uxtb	r6, r6
 80072be:	4283      	cmp	r3, r0
 80072c0:	4637      	mov	r7, r6
 80072c2:	dc04      	bgt.n	80072ce <__swbuf_r+0x42>
 80072c4:	4621      	mov	r1, r4
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 f966 	bl	8007598 <_fflush_r>
 80072cc:	bb30      	cbnz	r0, 800731c <__swbuf_r+0x90>
 80072ce:	68a3      	ldr	r3, [r4, #8]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	60a3      	str	r3, [r4, #8]
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	6022      	str	r2, [r4, #0]
 80072da:	701e      	strb	r6, [r3, #0]
 80072dc:	6963      	ldr	r3, [r4, #20]
 80072de:	3001      	adds	r0, #1
 80072e0:	4283      	cmp	r3, r0
 80072e2:	d004      	beq.n	80072ee <__swbuf_r+0x62>
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	07db      	lsls	r3, r3, #31
 80072e8:	d506      	bpl.n	80072f8 <__swbuf_r+0x6c>
 80072ea:	2e0a      	cmp	r6, #10
 80072ec:	d104      	bne.n	80072f8 <__swbuf_r+0x6c>
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 f951 	bl	8007598 <_fflush_r>
 80072f6:	b988      	cbnz	r0, 800731c <__swbuf_r+0x90>
 80072f8:	4638      	mov	r0, r7
 80072fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <__swbuf_r+0x9c>)
 80072fe:	429c      	cmp	r4, r3
 8007300:	d101      	bne.n	8007306 <__swbuf_r+0x7a>
 8007302:	68ac      	ldr	r4, [r5, #8]
 8007304:	e7cf      	b.n	80072a6 <__swbuf_r+0x1a>
 8007306:	4b09      	ldr	r3, [pc, #36]	; (800732c <__swbuf_r+0xa0>)
 8007308:	429c      	cmp	r4, r3
 800730a:	bf08      	it	eq
 800730c:	68ec      	ldreq	r4, [r5, #12]
 800730e:	e7ca      	b.n	80072a6 <__swbuf_r+0x1a>
 8007310:	4621      	mov	r1, r4
 8007312:	4628      	mov	r0, r5
 8007314:	f000 f81e 	bl	8007354 <__swsetup_r>
 8007318:	2800      	cmp	r0, #0
 800731a:	d0cb      	beq.n	80072b4 <__swbuf_r+0x28>
 800731c:	f04f 37ff 	mov.w	r7, #4294967295
 8007320:	e7ea      	b.n	80072f8 <__swbuf_r+0x6c>
 8007322:	bf00      	nop
 8007324:	080079d0 	.word	0x080079d0
 8007328:	080079f0 	.word	0x080079f0
 800732c:	080079b0 	.word	0x080079b0

08007330 <_write_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4d07      	ldr	r5, [pc, #28]	; (8007350 <_write_r+0x20>)
 8007334:	4604      	mov	r4, r0
 8007336:	4608      	mov	r0, r1
 8007338:	4611      	mov	r1, r2
 800733a:	2200      	movs	r2, #0
 800733c:	602a      	str	r2, [r5, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	f7f9 fed4 	bl	80010ec <_write>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d102      	bne.n	800734e <_write_r+0x1e>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b103      	cbz	r3, 800734e <_write_r+0x1e>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	20000338 	.word	0x20000338

08007354 <__swsetup_r>:
 8007354:	4b32      	ldr	r3, [pc, #200]	; (8007420 <__swsetup_r+0xcc>)
 8007356:	b570      	push	{r4, r5, r6, lr}
 8007358:	681d      	ldr	r5, [r3, #0]
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	b125      	cbz	r5, 800736a <__swsetup_r+0x16>
 8007360:	69ab      	ldr	r3, [r5, #24]
 8007362:	b913      	cbnz	r3, 800736a <__swsetup_r+0x16>
 8007364:	4628      	mov	r0, r5
 8007366:	f7ff f8ad 	bl	80064c4 <__sinit>
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <__swsetup_r+0xd0>)
 800736c:	429c      	cmp	r4, r3
 800736e:	d10f      	bne.n	8007390 <__swsetup_r+0x3c>
 8007370:	686c      	ldr	r4, [r5, #4]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007378:	0719      	lsls	r1, r3, #28
 800737a:	d42c      	bmi.n	80073d6 <__swsetup_r+0x82>
 800737c:	06dd      	lsls	r5, r3, #27
 800737e:	d411      	bmi.n	80073a4 <__swsetup_r+0x50>
 8007380:	2309      	movs	r3, #9
 8007382:	6033      	str	r3, [r6, #0]
 8007384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	f04f 30ff 	mov.w	r0, #4294967295
 800738e:	e03e      	b.n	800740e <__swsetup_r+0xba>
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <__swsetup_r+0xd4>)
 8007392:	429c      	cmp	r4, r3
 8007394:	d101      	bne.n	800739a <__swsetup_r+0x46>
 8007396:	68ac      	ldr	r4, [r5, #8]
 8007398:	e7eb      	b.n	8007372 <__swsetup_r+0x1e>
 800739a:	4b24      	ldr	r3, [pc, #144]	; (800742c <__swsetup_r+0xd8>)
 800739c:	429c      	cmp	r4, r3
 800739e:	bf08      	it	eq
 80073a0:	68ec      	ldreq	r4, [r5, #12]
 80073a2:	e7e6      	b.n	8007372 <__swsetup_r+0x1e>
 80073a4:	0758      	lsls	r0, r3, #29
 80073a6:	d512      	bpl.n	80073ce <__swsetup_r+0x7a>
 80073a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073aa:	b141      	cbz	r1, 80073be <__swsetup_r+0x6a>
 80073ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b0:	4299      	cmp	r1, r3
 80073b2:	d002      	beq.n	80073ba <__swsetup_r+0x66>
 80073b4:	4630      	mov	r0, r6
 80073b6:	f7ff fcdb 	bl	8006d70 <_free_r>
 80073ba:	2300      	movs	r3, #0
 80073bc:	6363      	str	r3, [r4, #52]	; 0x34
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	2300      	movs	r3, #0
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	f043 0308 	orr.w	r3, r3, #8
 80073d4:	81a3      	strh	r3, [r4, #12]
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	b94b      	cbnz	r3, 80073ee <__swsetup_r+0x9a>
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e4:	d003      	beq.n	80073ee <__swsetup_r+0x9a>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 f95b 	bl	80076a4 <__smakebuf_r>
 80073ee:	89a0      	ldrh	r0, [r4, #12]
 80073f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f4:	f010 0301 	ands.w	r3, r0, #1
 80073f8:	d00a      	beq.n	8007410 <__swsetup_r+0xbc>
 80073fa:	2300      	movs	r3, #0
 80073fc:	60a3      	str	r3, [r4, #8]
 80073fe:	6963      	ldr	r3, [r4, #20]
 8007400:	425b      	negs	r3, r3
 8007402:	61a3      	str	r3, [r4, #24]
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	b943      	cbnz	r3, 800741a <__swsetup_r+0xc6>
 8007408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800740c:	d1ba      	bne.n	8007384 <__swsetup_r+0x30>
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	0781      	lsls	r1, r0, #30
 8007412:	bf58      	it	pl
 8007414:	6963      	ldrpl	r3, [r4, #20]
 8007416:	60a3      	str	r3, [r4, #8]
 8007418:	e7f4      	b.n	8007404 <__swsetup_r+0xb0>
 800741a:	2000      	movs	r0, #0
 800741c:	e7f7      	b.n	800740e <__swsetup_r+0xba>
 800741e:	bf00      	nop
 8007420:	20000014 	.word	0x20000014
 8007424:	080079d0 	.word	0x080079d0
 8007428:	080079f0 	.word	0x080079f0
 800742c:	080079b0 	.word	0x080079b0

08007430 <__assert_func>:
 8007430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007432:	4614      	mov	r4, r2
 8007434:	461a      	mov	r2, r3
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <__assert_func+0x2c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4605      	mov	r5, r0
 800743c:	68d8      	ldr	r0, [r3, #12]
 800743e:	b14c      	cbz	r4, 8007454 <__assert_func+0x24>
 8007440:	4b07      	ldr	r3, [pc, #28]	; (8007460 <__assert_func+0x30>)
 8007442:	9100      	str	r1, [sp, #0]
 8007444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007448:	4906      	ldr	r1, [pc, #24]	; (8007464 <__assert_func+0x34>)
 800744a:	462b      	mov	r3, r5
 800744c:	f000 f8e0 	bl	8007610 <fiprintf>
 8007450:	f000 f9a5 	bl	800779e <abort>
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <__assert_func+0x38>)
 8007456:	461c      	mov	r4, r3
 8007458:	e7f3      	b.n	8007442 <__assert_func+0x12>
 800745a:	bf00      	nop
 800745c:	20000014 	.word	0x20000014
 8007460:	08007b7d 	.word	0x08007b7d
 8007464:	08007b8a 	.word	0x08007b8a
 8007468:	08007bb8 	.word	0x08007bb8

0800746c <_close_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d06      	ldr	r5, [pc, #24]	; (8007488 <_close_r+0x1c>)
 8007470:	2300      	movs	r3, #0
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	f7f9 fe4c 	bl	8001114 <_close>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_close_r+0x1a>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	b103      	cbz	r3, 8007486 <_close_r+0x1a>
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	20000338 	.word	0x20000338

0800748c <__sflush_r>:
 800748c:	898a      	ldrh	r2, [r1, #12]
 800748e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007492:	4605      	mov	r5, r0
 8007494:	0710      	lsls	r0, r2, #28
 8007496:	460c      	mov	r4, r1
 8007498:	d458      	bmi.n	800754c <__sflush_r+0xc0>
 800749a:	684b      	ldr	r3, [r1, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	dc05      	bgt.n	80074ac <__sflush_r+0x20>
 80074a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	dc02      	bgt.n	80074ac <__sflush_r+0x20>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ae:	2e00      	cmp	r6, #0
 80074b0:	d0f9      	beq.n	80074a6 <__sflush_r+0x1a>
 80074b2:	2300      	movs	r3, #0
 80074b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074b8:	682f      	ldr	r7, [r5, #0]
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	d032      	beq.n	8007524 <__sflush_r+0x98>
 80074be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	075a      	lsls	r2, r3, #29
 80074c4:	d505      	bpl.n	80074d2 <__sflush_r+0x46>
 80074c6:	6863      	ldr	r3, [r4, #4]
 80074c8:	1ac0      	subs	r0, r0, r3
 80074ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074cc:	b10b      	cbz	r3, 80074d2 <__sflush_r+0x46>
 80074ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074d0:	1ac0      	subs	r0, r0, r3
 80074d2:	2300      	movs	r3, #0
 80074d4:	4602      	mov	r2, r0
 80074d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074d8:	6a21      	ldr	r1, [r4, #32]
 80074da:	4628      	mov	r0, r5
 80074dc:	47b0      	blx	r6
 80074de:	1c43      	adds	r3, r0, #1
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	d106      	bne.n	80074f2 <__sflush_r+0x66>
 80074e4:	6829      	ldr	r1, [r5, #0]
 80074e6:	291d      	cmp	r1, #29
 80074e8:	d82c      	bhi.n	8007544 <__sflush_r+0xb8>
 80074ea:	4a2a      	ldr	r2, [pc, #168]	; (8007594 <__sflush_r+0x108>)
 80074ec:	40ca      	lsrs	r2, r1
 80074ee:	07d6      	lsls	r6, r2, #31
 80074f0:	d528      	bpl.n	8007544 <__sflush_r+0xb8>
 80074f2:	2200      	movs	r2, #0
 80074f4:	6062      	str	r2, [r4, #4]
 80074f6:	04d9      	lsls	r1, r3, #19
 80074f8:	6922      	ldr	r2, [r4, #16]
 80074fa:	6022      	str	r2, [r4, #0]
 80074fc:	d504      	bpl.n	8007508 <__sflush_r+0x7c>
 80074fe:	1c42      	adds	r2, r0, #1
 8007500:	d101      	bne.n	8007506 <__sflush_r+0x7a>
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	b903      	cbnz	r3, 8007508 <__sflush_r+0x7c>
 8007506:	6560      	str	r0, [r4, #84]	; 0x54
 8007508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800750a:	602f      	str	r7, [r5, #0]
 800750c:	2900      	cmp	r1, #0
 800750e:	d0ca      	beq.n	80074a6 <__sflush_r+0x1a>
 8007510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007514:	4299      	cmp	r1, r3
 8007516:	d002      	beq.n	800751e <__sflush_r+0x92>
 8007518:	4628      	mov	r0, r5
 800751a:	f7ff fc29 	bl	8006d70 <_free_r>
 800751e:	2000      	movs	r0, #0
 8007520:	6360      	str	r0, [r4, #52]	; 0x34
 8007522:	e7c1      	b.n	80074a8 <__sflush_r+0x1c>
 8007524:	6a21      	ldr	r1, [r4, #32]
 8007526:	2301      	movs	r3, #1
 8007528:	4628      	mov	r0, r5
 800752a:	47b0      	blx	r6
 800752c:	1c41      	adds	r1, r0, #1
 800752e:	d1c7      	bne.n	80074c0 <__sflush_r+0x34>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0c4      	beq.n	80074c0 <__sflush_r+0x34>
 8007536:	2b1d      	cmp	r3, #29
 8007538:	d001      	beq.n	800753e <__sflush_r+0xb2>
 800753a:	2b16      	cmp	r3, #22
 800753c:	d101      	bne.n	8007542 <__sflush_r+0xb6>
 800753e:	602f      	str	r7, [r5, #0]
 8007540:	e7b1      	b.n	80074a6 <__sflush_r+0x1a>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007548:	81a3      	strh	r3, [r4, #12]
 800754a:	e7ad      	b.n	80074a8 <__sflush_r+0x1c>
 800754c:	690f      	ldr	r7, [r1, #16]
 800754e:	2f00      	cmp	r7, #0
 8007550:	d0a9      	beq.n	80074a6 <__sflush_r+0x1a>
 8007552:	0793      	lsls	r3, r2, #30
 8007554:	680e      	ldr	r6, [r1, #0]
 8007556:	bf08      	it	eq
 8007558:	694b      	ldreq	r3, [r1, #20]
 800755a:	600f      	str	r7, [r1, #0]
 800755c:	bf18      	it	ne
 800755e:	2300      	movne	r3, #0
 8007560:	eba6 0807 	sub.w	r8, r6, r7
 8007564:	608b      	str	r3, [r1, #8]
 8007566:	f1b8 0f00 	cmp.w	r8, #0
 800756a:	dd9c      	ble.n	80074a6 <__sflush_r+0x1a>
 800756c:	6a21      	ldr	r1, [r4, #32]
 800756e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007570:	4643      	mov	r3, r8
 8007572:	463a      	mov	r2, r7
 8007574:	4628      	mov	r0, r5
 8007576:	47b0      	blx	r6
 8007578:	2800      	cmp	r0, #0
 800757a:	dc06      	bgt.n	800758a <__sflush_r+0xfe>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007582:	81a3      	strh	r3, [r4, #12]
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	e78e      	b.n	80074a8 <__sflush_r+0x1c>
 800758a:	4407      	add	r7, r0
 800758c:	eba8 0800 	sub.w	r8, r8, r0
 8007590:	e7e9      	b.n	8007566 <__sflush_r+0xda>
 8007592:	bf00      	nop
 8007594:	20400001 	.word	0x20400001

08007598 <_fflush_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	690b      	ldr	r3, [r1, #16]
 800759c:	4605      	mov	r5, r0
 800759e:	460c      	mov	r4, r1
 80075a0:	b913      	cbnz	r3, 80075a8 <_fflush_r+0x10>
 80075a2:	2500      	movs	r5, #0
 80075a4:	4628      	mov	r0, r5
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	b118      	cbz	r0, 80075b2 <_fflush_r+0x1a>
 80075aa:	6983      	ldr	r3, [r0, #24]
 80075ac:	b90b      	cbnz	r3, 80075b2 <_fflush_r+0x1a>
 80075ae:	f7fe ff89 	bl	80064c4 <__sinit>
 80075b2:	4b14      	ldr	r3, [pc, #80]	; (8007604 <_fflush_r+0x6c>)
 80075b4:	429c      	cmp	r4, r3
 80075b6:	d11b      	bne.n	80075f0 <_fflush_r+0x58>
 80075b8:	686c      	ldr	r4, [r5, #4]
 80075ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0ef      	beq.n	80075a2 <_fflush_r+0xa>
 80075c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075c4:	07d0      	lsls	r0, r2, #31
 80075c6:	d404      	bmi.n	80075d2 <_fflush_r+0x3a>
 80075c8:	0599      	lsls	r1, r3, #22
 80075ca:	d402      	bmi.n	80075d2 <_fflush_r+0x3a>
 80075cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ce:	f7ff f81c 	bl	800660a <__retarget_lock_acquire_recursive>
 80075d2:	4628      	mov	r0, r5
 80075d4:	4621      	mov	r1, r4
 80075d6:	f7ff ff59 	bl	800748c <__sflush_r>
 80075da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075dc:	07da      	lsls	r2, r3, #31
 80075de:	4605      	mov	r5, r0
 80075e0:	d4e0      	bmi.n	80075a4 <_fflush_r+0xc>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	059b      	lsls	r3, r3, #22
 80075e6:	d4dd      	bmi.n	80075a4 <_fflush_r+0xc>
 80075e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ea:	f7ff f80f 	bl	800660c <__retarget_lock_release_recursive>
 80075ee:	e7d9      	b.n	80075a4 <_fflush_r+0xc>
 80075f0:	4b05      	ldr	r3, [pc, #20]	; (8007608 <_fflush_r+0x70>)
 80075f2:	429c      	cmp	r4, r3
 80075f4:	d101      	bne.n	80075fa <_fflush_r+0x62>
 80075f6:	68ac      	ldr	r4, [r5, #8]
 80075f8:	e7df      	b.n	80075ba <_fflush_r+0x22>
 80075fa:	4b04      	ldr	r3, [pc, #16]	; (800760c <_fflush_r+0x74>)
 80075fc:	429c      	cmp	r4, r3
 80075fe:	bf08      	it	eq
 8007600:	68ec      	ldreq	r4, [r5, #12]
 8007602:	e7da      	b.n	80075ba <_fflush_r+0x22>
 8007604:	080079d0 	.word	0x080079d0
 8007608:	080079f0 	.word	0x080079f0
 800760c:	080079b0 	.word	0x080079b0

08007610 <fiprintf>:
 8007610:	b40e      	push	{r1, r2, r3}
 8007612:	b503      	push	{r0, r1, lr}
 8007614:	4601      	mov	r1, r0
 8007616:	ab03      	add	r3, sp, #12
 8007618:	4805      	ldr	r0, [pc, #20]	; (8007630 <fiprintf+0x20>)
 800761a:	f853 2b04 	ldr.w	r2, [r3], #4
 800761e:	6800      	ldr	r0, [r0, #0]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	f7ff fcaf 	bl	8006f84 <_vfiprintf_r>
 8007626:	b002      	add	sp, #8
 8007628:	f85d eb04 	ldr.w	lr, [sp], #4
 800762c:	b003      	add	sp, #12
 800762e:	4770      	bx	lr
 8007630:	20000014 	.word	0x20000014

08007634 <_lseek_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d07      	ldr	r5, [pc, #28]	; (8007654 <_lseek_r+0x20>)
 8007638:	4604      	mov	r4, r0
 800763a:	4608      	mov	r0, r1
 800763c:	4611      	mov	r1, r2
 800763e:	2200      	movs	r2, #0
 8007640:	602a      	str	r2, [r5, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	f7f9 fd8d 	bl	8001162 <_lseek>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_lseek_r+0x1e>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_lseek_r+0x1e>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	20000338 	.word	0x20000338

08007658 <__swhatbuf_r>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	460e      	mov	r6, r1
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	2900      	cmp	r1, #0
 8007662:	b096      	sub	sp, #88	; 0x58
 8007664:	4614      	mov	r4, r2
 8007666:	461d      	mov	r5, r3
 8007668:	da08      	bge.n	800767c <__swhatbuf_r+0x24>
 800766a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	602a      	str	r2, [r5, #0]
 8007672:	061a      	lsls	r2, r3, #24
 8007674:	d410      	bmi.n	8007698 <__swhatbuf_r+0x40>
 8007676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800767a:	e00e      	b.n	800769a <__swhatbuf_r+0x42>
 800767c:	466a      	mov	r2, sp
 800767e:	f000 f895 	bl	80077ac <_fstat_r>
 8007682:	2800      	cmp	r0, #0
 8007684:	dbf1      	blt.n	800766a <__swhatbuf_r+0x12>
 8007686:	9a01      	ldr	r2, [sp, #4]
 8007688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800768c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007690:	425a      	negs	r2, r3
 8007692:	415a      	adcs	r2, r3
 8007694:	602a      	str	r2, [r5, #0]
 8007696:	e7ee      	b.n	8007676 <__swhatbuf_r+0x1e>
 8007698:	2340      	movs	r3, #64	; 0x40
 800769a:	2000      	movs	r0, #0
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	b016      	add	sp, #88	; 0x58
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080076a4 <__smakebuf_r>:
 80076a4:	898b      	ldrh	r3, [r1, #12]
 80076a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076a8:	079d      	lsls	r5, r3, #30
 80076aa:	4606      	mov	r6, r0
 80076ac:	460c      	mov	r4, r1
 80076ae:	d507      	bpl.n	80076c0 <__smakebuf_r+0x1c>
 80076b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	2301      	movs	r3, #1
 80076ba:	6163      	str	r3, [r4, #20]
 80076bc:	b002      	add	sp, #8
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	ab01      	add	r3, sp, #4
 80076c2:	466a      	mov	r2, sp
 80076c4:	f7ff ffc8 	bl	8007658 <__swhatbuf_r>
 80076c8:	9900      	ldr	r1, [sp, #0]
 80076ca:	4605      	mov	r5, r0
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7ff fbbb 	bl	8006e48 <_malloc_r>
 80076d2:	b948      	cbnz	r0, 80076e8 <__smakebuf_r+0x44>
 80076d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d8:	059a      	lsls	r2, r3, #22
 80076da:	d4ef      	bmi.n	80076bc <__smakebuf_r+0x18>
 80076dc:	f023 0303 	bic.w	r3, r3, #3
 80076e0:	f043 0302 	orr.w	r3, r3, #2
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	e7e3      	b.n	80076b0 <__smakebuf_r+0xc>
 80076e8:	4b0d      	ldr	r3, [pc, #52]	; (8007720 <__smakebuf_r+0x7c>)
 80076ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	6020      	str	r0, [r4, #0]
 80076f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f4:	81a3      	strh	r3, [r4, #12]
 80076f6:	9b00      	ldr	r3, [sp, #0]
 80076f8:	6163      	str	r3, [r4, #20]
 80076fa:	9b01      	ldr	r3, [sp, #4]
 80076fc:	6120      	str	r0, [r4, #16]
 80076fe:	b15b      	cbz	r3, 8007718 <__smakebuf_r+0x74>
 8007700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007704:	4630      	mov	r0, r6
 8007706:	f000 f863 	bl	80077d0 <_isatty_r>
 800770a:	b128      	cbz	r0, 8007718 <__smakebuf_r+0x74>
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	f023 0303 	bic.w	r3, r3, #3
 8007712:	f043 0301 	orr.w	r3, r3, #1
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	89a0      	ldrh	r0, [r4, #12]
 800771a:	4305      	orrs	r5, r0
 800771c:	81a5      	strh	r5, [r4, #12]
 800771e:	e7cd      	b.n	80076bc <__smakebuf_r+0x18>
 8007720:	0800645d 	.word	0x0800645d

08007724 <__ascii_mbtowc>:
 8007724:	b082      	sub	sp, #8
 8007726:	b901      	cbnz	r1, 800772a <__ascii_mbtowc+0x6>
 8007728:	a901      	add	r1, sp, #4
 800772a:	b142      	cbz	r2, 800773e <__ascii_mbtowc+0x1a>
 800772c:	b14b      	cbz	r3, 8007742 <__ascii_mbtowc+0x1e>
 800772e:	7813      	ldrb	r3, [r2, #0]
 8007730:	600b      	str	r3, [r1, #0]
 8007732:	7812      	ldrb	r2, [r2, #0]
 8007734:	1e10      	subs	r0, r2, #0
 8007736:	bf18      	it	ne
 8007738:	2001      	movne	r0, #1
 800773a:	b002      	add	sp, #8
 800773c:	4770      	bx	lr
 800773e:	4610      	mov	r0, r2
 8007740:	e7fb      	b.n	800773a <__ascii_mbtowc+0x16>
 8007742:	f06f 0001 	mvn.w	r0, #1
 8007746:	e7f8      	b.n	800773a <__ascii_mbtowc+0x16>

08007748 <__malloc_lock>:
 8007748:	4801      	ldr	r0, [pc, #4]	; (8007750 <__malloc_lock+0x8>)
 800774a:	f7fe bf5e 	b.w	800660a <__retarget_lock_acquire_recursive>
 800774e:	bf00      	nop
 8007750:	2000032c 	.word	0x2000032c

08007754 <__malloc_unlock>:
 8007754:	4801      	ldr	r0, [pc, #4]	; (800775c <__malloc_unlock+0x8>)
 8007756:	f7fe bf59 	b.w	800660c <__retarget_lock_release_recursive>
 800775a:	bf00      	nop
 800775c:	2000032c 	.word	0x2000032c

08007760 <_read_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4d07      	ldr	r5, [pc, #28]	; (8007780 <_read_r+0x20>)
 8007764:	4604      	mov	r4, r0
 8007766:	4608      	mov	r0, r1
 8007768:	4611      	mov	r1, r2
 800776a:	2200      	movs	r2, #0
 800776c:	602a      	str	r2, [r5, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	f7f9 fc9e 	bl	80010b0 <_read>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_read_r+0x1e>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_read_r+0x1e>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20000338 	.word	0x20000338

08007784 <__ascii_wctomb>:
 8007784:	b149      	cbz	r1, 800779a <__ascii_wctomb+0x16>
 8007786:	2aff      	cmp	r2, #255	; 0xff
 8007788:	bf85      	ittet	hi
 800778a:	238a      	movhi	r3, #138	; 0x8a
 800778c:	6003      	strhi	r3, [r0, #0]
 800778e:	700a      	strbls	r2, [r1, #0]
 8007790:	f04f 30ff 	movhi.w	r0, #4294967295
 8007794:	bf98      	it	ls
 8007796:	2001      	movls	r0, #1
 8007798:	4770      	bx	lr
 800779a:	4608      	mov	r0, r1
 800779c:	4770      	bx	lr

0800779e <abort>:
 800779e:	b508      	push	{r3, lr}
 80077a0:	2006      	movs	r0, #6
 80077a2:	f000 f84d 	bl	8007840 <raise>
 80077a6:	2001      	movs	r0, #1
 80077a8:	f7f9 fc78 	bl	800109c <_exit>

080077ac <_fstat_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	; (80077cc <_fstat_r+0x20>)
 80077b0:	2300      	movs	r3, #0
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f7f9 fcb7 	bl	800112c <_fstat>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d102      	bne.n	80077c8 <_fstat_r+0x1c>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b103      	cbz	r3, 80077c8 <_fstat_r+0x1c>
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	bd38      	pop	{r3, r4, r5, pc}
 80077ca:	bf00      	nop
 80077cc:	20000338 	.word	0x20000338

080077d0 <_isatty_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4d06      	ldr	r5, [pc, #24]	; (80077ec <_isatty_r+0x1c>)
 80077d4:	2300      	movs	r3, #0
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	602b      	str	r3, [r5, #0]
 80077dc:	f7f9 fcb6 	bl	800114c <_isatty>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_isatty_r+0x1a>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_isatty_r+0x1a>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	20000338 	.word	0x20000338

080077f0 <_raise_r>:
 80077f0:	291f      	cmp	r1, #31
 80077f2:	b538      	push	{r3, r4, r5, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	d904      	bls.n	8007804 <_raise_r+0x14>
 80077fa:	2316      	movs	r3, #22
 80077fc:	6003      	str	r3, [r0, #0]
 80077fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007806:	b112      	cbz	r2, 800780e <_raise_r+0x1e>
 8007808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800780c:	b94b      	cbnz	r3, 8007822 <_raise_r+0x32>
 800780e:	4620      	mov	r0, r4
 8007810:	f000 f830 	bl	8007874 <_getpid_r>
 8007814:	462a      	mov	r2, r5
 8007816:	4601      	mov	r1, r0
 8007818:	4620      	mov	r0, r4
 800781a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800781e:	f000 b817 	b.w	8007850 <_kill_r>
 8007822:	2b01      	cmp	r3, #1
 8007824:	d00a      	beq.n	800783c <_raise_r+0x4c>
 8007826:	1c59      	adds	r1, r3, #1
 8007828:	d103      	bne.n	8007832 <_raise_r+0x42>
 800782a:	2316      	movs	r3, #22
 800782c:	6003      	str	r3, [r0, #0]
 800782e:	2001      	movs	r0, #1
 8007830:	e7e7      	b.n	8007802 <_raise_r+0x12>
 8007832:	2400      	movs	r4, #0
 8007834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007838:	4628      	mov	r0, r5
 800783a:	4798      	blx	r3
 800783c:	2000      	movs	r0, #0
 800783e:	e7e0      	b.n	8007802 <_raise_r+0x12>

08007840 <raise>:
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <raise+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f7ff bfd3 	b.w	80077f0 <_raise_r>
 800784a:	bf00      	nop
 800784c:	20000014 	.word	0x20000014

08007850 <_kill_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	; (8007870 <_kill_r+0x20>)
 8007854:	2300      	movs	r3, #0
 8007856:	4604      	mov	r4, r0
 8007858:	4608      	mov	r0, r1
 800785a:	4611      	mov	r1, r2
 800785c:	602b      	str	r3, [r5, #0]
 800785e:	f7f9 fc0d 	bl	800107c <_kill>
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	d102      	bne.n	800786c <_kill_r+0x1c>
 8007866:	682b      	ldr	r3, [r5, #0]
 8007868:	b103      	cbz	r3, 800786c <_kill_r+0x1c>
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	bd38      	pop	{r3, r4, r5, pc}
 800786e:	bf00      	nop
 8007870:	20000338 	.word	0x20000338

08007874 <_getpid_r>:
 8007874:	f7f9 bbfa 	b.w	800106c <_getpid>

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
